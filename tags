!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	glues/libtess/geom.h	68;"	d
ABS	glues/libtess/geom.h	69;"	d
ABS	glues/libtess/normal.c	46;"	d	file:
ABS	glues/libtess/normal.c	47;"	d	file:
APIENTRY	GLES/gl.h	60;"	d
APIENTRY	GLES/gl.h	71;"	d
APIENTRY	GLES/glext.h	53;"	d
APIENTRY	GLES/glext.h	57;"	d
APIENTRYP	glues/glu.h	48;"	d
APIENTRYP	glues/glues.h	48;"	d
APIFUNC_DEG	ogles.h	98;"	d
APIdumper	outfile.cpp	/^FILE * APIdumper;$/;"	v
APP_H_INCLUDED	app.h	26;"	d
ActiveRegion	glues/libtess/mesh.h	/^typedef struct ActiveRegion ActiveRegion;       \/* Internal data *\/$/;"	t	typeref:struct:ActiveRegion
ActiveRegion	glues/libtess/sweep.h	/^struct ActiveRegion$/;"	s
ActiveTexture	fixed_api.cpp	/^void Context::ActiveTexture(GLenum texture)$/;"	f	class:Context
ActiveTexture	ogles.h	/^    int         ActiveTexture;$/;"	m	struct:GLfuncstat
AddRegionBelow	glues/libtess/sweep.c	/^static ActiveRegion* AddRegionBelow(GLUtesselator* tess, ActiveRegion* regAbove,$/;"	f	file:
AddRightEdges	glues/libtess/sweep.c	/^static void AddRightEdges(GLUtesselator* tess, ActiveRegion* regUp,$/;"	f	file:
AddSentinel	glues/libtess/sweep.c	/^static void AddSentinel(GLUtesselator* tess, GLfloat t)$/;"	f	file:
AddToTrail	glues/libtess/render.c	166;"	d	file:
AddVertex	glues/libtess/tess.c	/^static int AddVertex(GLUtesselator* tess, GLfloat coords[3], void* data)$/;"	f	file:
AddWinding	glues/libtess/sweep.c	95;"	d	file:
AddWinding	glues/libtess/tessmono.c	41;"	d	file:
AlphaFunc	float_api.cpp	/^void Context::AlphaFunc(GLenum func, GLclampf ref)$/;"	f	class:Context
AlphaFunc	ogles.h	/^    int         AlphaFunc;$/;"	m	struct:GLfuncstat
AlphaFuncx	fixed_api.cpp	/^void Context::AlphaFuncx(GLenum func, GLclampx ref)$/;"	f	class:Context
AlphaRef	rasterizer.h	/^    U32     AlphaRef;$/;"	m	class:Rasterizer
AlphaTest	ogles.h	/^struct AlphaTest$/;"	s
AlphaTestEn	rasterizer.h	/^    bool    DepthTestEn, AlphaTestEn, ScissorTestEn, StencilTestEn, LogicOpTestEn, MultiSampleEn;$/;"	m	class:Rasterizer
AlphaTestMode	rasterizer.h	/^    U32     AlphaTestMode;$/;"	m	class:Rasterizer
ArrayPointer	ogles.h	/^struct ArrayPointer$/;"	s
Att	geometry.h	/^		float 	 		Att;$/;"	m	struct:Geometry
AutoVersion	version.h	/^namespace AutoVersion{$/;"	n
AvailableTriangleCounter	geometry.h	/^		int   	 		AvailableTriangleCounter;$/;"	m	struct:Geometry
BARYCENTRIC_METHOD	rasterizer.cpp	21;"	d	file:
BF_TYPE	bitmap.h	49;"	d
BI_BITFIELDS	bitmap.h	73;"	d
BI_RGB	bitmap.h	70;"	d
BI_RLE4	bitmap.h	72;"	d
BI_RLE8	bitmap.h	71;"	d
BOX2	glues/glues_mipmap.c	2196;"	d	file:
BOX2	glues/glues_mipmap.c	2243;"	d	file:
BOX4	glues/glues_mipmap.c	2118;"	d	file:
BUILD	version.h	/^	static const long BUILD = 0;$/;"	m	namespace:AutoVersion
BUILDS_COUNT	version.h	/^	static const long BUILDS_COUNT = 1;$/;"	m	namespace:AutoVersion
BUILD_HISTORY	version.h	/^	static const long BUILD_HISTORY = 0;$/;"	m	namespace:AutoVersion
BindBuffer	fixed_api.cpp	/^void Context::BindBuffer(GLenum target, GLuint buffer)$/;"	f	class:Context
BindTexture	fixed_api.cpp	/^void Context::BindTexture(GLenum target, GLuint texture)$/;"	f	class:Context
BindTexture	ogles.h	/^    int         BindTexture;$/;"	m	struct:GLfuncstat
BlendFunc	fixed_api.cpp	/^void Context::BlendFunc(GLenum sfactor, GLenum dfactor)$/;"	f	class:Context
BlendFunc	ogles.h	/^    int         BlendFunc;$/;"	m	struct:GLfuncstat
Blending	ogles.h	/^struct Blending$/;"	s
BlendingDst	rasterizer.h	/^    U8      BlendingDst[4];$/;"	m	class:Rasterizer
BlendingDstMode	rasterizer.h	/^    U32     BlendingDstMode;$/;"	m	class:Rasterizer
BlendingEn	rasterizer.h	/^    bool    TexMappingEn,BlendingEn,FogEn;$/;"	m	class:Rasterizer
BlendingSrc	rasterizer.h	/^    U8      BlendingSrc[4];$/;"	m	class:Rasterizer
BlendingSrcMode	rasterizer.h	/^    U32     BlendingSrcMode;$/;"	m	class:Rasterizer
BufferData	fixed_api.cpp	/^void Context::BufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)$/;"	f	class:Context
BufferSubData	fixed_api.cpp	/^void Context::BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)$/;"	f	class:Context
CACHE_SIZE	glues/glues_quad.c	40;"	d	file:
CALL_BEGIN_OR_BEGIN_DATA	glues/libtess/tess.h	130;"	d
CALL_COMBINE_OR_COMBINE_DATA	glues/libtess/tess.h	150;"	d
CALL_EDGE_FLAG_OR_EDGE_FLAG_DATA	glues/libtess/tess.h	140;"	d
CALL_END_OR_END_DATA	glues/libtess/tess.h	145;"	d
CALL_ERROR_OR_ERROR_DATA	glues/libtess/tess.h	155;"	d
CALL_VERTEX_OR_VERTEX_DATA	glues/libtess/tess.h	135;"	d
CAMS_H_INCLUDED	cams.h	26;"	d
CAMTRACK	cams.h	/^} CAMTRACK;$/;"	t	typeref:struct:__anon6
CAMTRACK_COUNT	cams.h	62;"	d
CAMTRACK_LEN	cams.h	32;"	d
CC	Makefile	/^CC = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS = -O -fpermissive -Wall -DEGL_ON_LINUX$/;"	m
CHECKPRECLIPPING	ogles.h	117;"	d
CLAMP	float_api.cpp	/^    float CLAMP(float value, float min, float max)$/;"	f	namespace:__anon13
CLAMP	geometry.cpp	/^float Geometry::CLAMP(float value, float min, float max)$/;"	f	class:Geometry
CONFIG_H_INCLUDED	config.h	2;"	d
CONTEXT_EXEC	gl.cpp	24;"	d	file:
CONTEXT_EXEC_RETURN	gl.cpp	32;"	d	file:
CONTEXT_H_INCLUDED	context.h	2;"	d
CSVglfunc	outfile.cpp	/^FILE * CSVglfunc;$/;"	v
CSVhanlder	outfile.cpp	/^FILE * CSVhanlder;$/;"	v
CacheVertex	glues/libtess/tess.c	/^static void CacheVertex(GLUtesselator* tess, GLfloat coords[3], void* data)$/;"	f	file:
CachedVertex	glues/libtess/tess.h	/^typedef struct CachedVertex$/;"	s
CachedVertex	glues/libtess/tess.h	/^} CachedVertex;$/;"	t	typeref:struct:CachedVertex
CalcCC	geometry.cpp	/^int Geometry::CalcCC(int *check_outside ,float * vertex)$/;"	f	class:Geometry
CalcCC2	geometry.cpp	/^unsigned int Geometry::CalcCC2(float * vertex)$/;"	f	class:Geometry
CalcFPS	main.cpp	/^void CalcFPS(void)$/;"	f
CalcTexAdd	rasterizer.cpp	/^U32 Rasterizer::CalcTexAdd(short int us,short int ub,short int uo,short int vs,short int vb,short int vo)$/;"	f	class:Rasterizer
CallBack	gltools_TGA_rev.cpp	/^typedef GLvoid (*CallBack)(...);            \/\/ Visual C++ style$/;"	t	file:
CallBack	gltools_TGA_rev.cpp	/^typedef GLvoid (_stdcall *CallBack)();      \/\/ XCode (GNU) style$/;"	t	file:
CallCombine	glues/libtess/sweep.c	/^static void CallCombine(GLUtesselator* tess, GLUvertex* isect,$/;"	f	file:
CameraChanged	main.cpp	57;"	d	file:
Cbufdumper	outfile.cpp	/^FILE * Cbufdumper;$/;"	v
CheckForIntersect	glues/libtess/sweep.c	/^static int CheckForIntersect(GLUtesselator* tess, ActiveRegion* regUp)$/;"	f	file:
CheckForLeftSplice	glues/libtess/sweep.c	/^static int CheckForLeftSplice(GLUtesselator* tess, ActiveRegion* regUp)$/;"	f	file:
CheckForRightSplice	glues/libtess/sweep.c	/^static int CheckForRightSplice(GLUtesselator* tess, ActiveRegion* regUp)$/;"	f	file:
CheckOrientation	glues/libtess/normal.c	/^static void CheckOrientation(GLUtesselator* tess)$/;"	f	file:
CheckorderBUG	ogles.h	121;"	d
Clear	fixed_api.cpp	/^void Context::Clear(GLbitfield mask)$/;"	f	class:Context
Clear	ogles.h	/^    int         Clear;$/;"	m	struct:GLfuncstat
ClearBuffer	rasterizer.cpp	/^void Rasterizer::ClearBuffer(unsigned int mask)$/;"	f	class:Rasterizer
ClearColor	float_api.cpp	/^void Context::ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)$/;"	f	class:Context
ClearColor	ogles.h	/^    int         ClearColor;$/;"	m	struct:GLfuncstat
ClearColorx	fixed_api.cpp	/^void Context::ClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)$/;"	f	class:Context
ClearDepth	ogles.h	/^    int         ClearDepth;$/;"	m	struct:GLfuncstat
ClearDepthf	float_api.cpp	/^void Context::ClearDepthf(GLclampf depth)$/;"	f	class:Context
ClearDepthx	fixed_api.cpp	/^void Context::ClearDepthx(GLclampx depth)$/;"	f	class:Context
ClearStatistics	geometry.cpp	/^void Geometry::ClearStatistics()$/;"	f	class:Geometry
ClearStatistics	rasterizer.cpp	/^void Rasterizer::ClearStatistics()$/;"	f	class:Rasterizer
ClearStencil	fixed_api.cpp	/^void Context::ClearStencil(GLint s)$/;"	f	class:Context
ClearStencil	ogles.h	/^    int         ClearStencil;$/;"	m	struct:GLfuncstat
ClientActiveTexture	fixed_api.cpp	/^void Context::ClientActiveTexture(GLenum texture)$/;"	f	class:Context
ClipCoords	geometry.h	/^		float 	 		ClipCoords[4];$/;"	m	struct:Geometry
ClipCoordsToWindowCoords	geometry.cpp	/^void Geometry::ClipCoordsToWindowCoords(float* pos, float* info)$/;"	f	class:Geometry
ClipPlanef	float_api.cpp	/^void Context::ClipPlanef(GLenum plane, const GLfloat *equation)$/;"	f	class:Context
ClipPlanex	fixed_api.cpp	/^void Context::ClipPlanex(GLenum plane, const GLfixed *equation)$/;"	f	class:Context
ClipReady	geometry.h	/^		GLboolean       ClipReady;$/;"	m	struct:Geometry
CloseFile	outfile.cpp	/^void CloseFile()$/;"	f
Coeff4q28	geometry.cpp	/^float Geometry::Coeff4q28(float num, float denom)$/;"	f	class:Geometry
Color	geometry.h	/^		float 	 		Color[4];$/;"	m	struct:Geometry
Color	ogles.h	/^    inline Color()$/;"	f	struct:Color
Color	ogles.h	/^struct Color$/;"	s
Color4	ogles.h	/^    int         Color4;$/;"	m	struct:GLfuncstat
Color4f	float_api.cpp	/^void Context::Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)$/;"	f	class:Context
Color4x	fixed_api.cpp	/^void Context::Color4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)$/;"	f	class:Context
ColorBuffer	rasterizer.h	/^    U8      ColorBuffer[WINDOW_DEFAULT_HEIGHT][WINDOW_DEFAULT_WIDTH][4];$/;"	m	class:Rasterizer
ColorClearVal	rasterizer.h	/^    U8      ColorClearVal[4];$/;"	m	class:Rasterizer
ColorMask	fixed_api.cpp	/^void Context::ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)$/;"	f	class:Context
ColorPointer	fixed_api.cpp	/^void Context::ColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)$/;"	f	class:Context
ColorPointer	ogles.h	/^    int         ColorPointer;$/;"	m	struct:GLfuncstat
CompressedTexImage2D	fixed_api.cpp	/^void Context::CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)$/;"	f	class:Context
CompressedTexSubImage2D	fixed_api.cpp	/^void Context::CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)$/;"	f	class:Context
ComputeNormal	glues/libtess/normal.c	/^static void ComputeNormal(GLUtesselator* tess, GLfloat norm[3])$/;"	f	file:
ComputeNormal	glues/libtess/render.c	/^static int ComputeNormal(GLUtesselator* tess, GLfloat norm[3], int check)$/;"	f	file:
ComputeWinding	glues/libtess/sweep.c	/^static void ComputeWinding(GLUtesselator* tess, ActiveRegion* reg)$/;"	f	file:
Config	config.cpp	/^Config::Config (const Config &other, const EGLint * attribList, const EGLint * validAttributes)$/;"	f	class:Config
Config	config.h	/^    class Config$/;"	c	namespace:EGL
ConnectLeftDegenerate	glues/libtess/sweep.c	/^static void ConnectLeftDegenerate(GLUtesselator* tess,$/;"	f	file:
ConnectLeftVertex	glues/libtess/sweep.c	/^static void ConnectLeftVertex(GLUtesselator* tess, GLUvertex* vEvent)$/;"	f	file:
ConnectRightVertex	glues/libtess/sweep.c	/^static void ConnectRightVertex(GLUtesselator* tess, ActiveRegion* regUp,$/;"	f	file:
Contains	surface.h	/^        bool Contains(const Rect& other) const$/;"	f	struct:EGL::Rect
Context	context.cpp	/^Context::Context(const Config &config)$/;"	f	class:Context
Context	context.h	/^    class Context$/;"	c	namespace:EGL
ConvertTo565	surface.cpp	/^    template <class T> U16 ConvertTo565(T color)$/;"	f	namespace:__anon2
CopyTexImage2D	fixed_api.cpp	/^void Context::CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)$/;"	f	class:Context
CopyTexSubImage2D	fixed_api.cpp	/^void Context::CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)$/;"	f	class:Context
CreateDebugFile	outfile.cpp	/^void CreateDebugFile()$/;"	f
Ctxdumper	outfile.cpp	/^FILE * Ctxdumper;$/;"	v
CullFace	fixed_api.cpp	/^void Context::CullFace(GLenum mode)$/;"	f	class:Context
CullFace	geometry.h	/^		GLboolean       CullFace;$/;"	m	struct:Geometry
CullFace	ogles.h	/^    int         CullFace;$/;"	m	struct:GLfuncstat
CullFaceMode	geometry.h	/^		GLenum   		CullFaceMode;$/;"	m	struct:Geometry
CurHeight	rasterizer.h	/^    I32     CurWidth, CurHeight;$/;"	m	class:Rasterizer
CurWidth	rasterizer.h	/^    I32     CurWidth, CurHeight;$/;"	m	class:Rasterizer
CurrentMatrix	matrix_stack.h	/^        inline Matrix4x4 & CurrentMatrix()$/;"	f	class:EGL::MatrixStack
CurrentMatrixStack	context.h	/^        inline MatrixStack * CurrentMatrixStack()$/;"	f	class:EGL::Context
DATE	version.h	/^	static const char DATE[] = "19";$/;"	m	namespace:AutoVersion
DVR_IMPL__H_INCLUDED	drv_impl.h	2;"	d
DebugEvent	glues/libtess/sweep.c	54;"	d	file:
DeleteBuffers	fixed_api.cpp	/^void Context::DeleteBuffers(GLsizei n, const GLuint *buffers)$/;"	f	class:Context
DeleteRegion	glues/libtess/sweep.c	/^static void DeleteRegion(GLUtesselator* tess, ActiveRegion* reg)$/;"	f	file:
DeleteTextures	fixed_api.cpp	/^void Context::DeleteTextures(GLsizei n, const GLuint *textures)$/;"	f	class:Context
DeleteTextures	ogles.h	/^    int         DeleteTextures;$/;"	m	struct:GLfuncstat
DepthBuffer	rasterizer.h	/^    float   DepthBuffer[WINDOW_DEFAULT_HEIGHT][WINDOW_DEFAULT_WIDTH];$/;"	m	class:Rasterizer
DepthFunc	fixed_api.cpp	/^void Context::DepthFunc(GLenum func)$/;"	f	class:Context
DepthFunc	ogles.h	/^    int         DepthFunc;$/;"	m	struct:GLfuncstat
DepthMask	fixed_api.cpp	/^void Context::DepthMask(GLboolean flag)$/;"	f	class:Context
DepthOffSet	ogles.h	/^struct DepthOffSet$/;"	s
DepthRange	ogles.h	/^    int         DepthRange;$/;"	m	struct:GLfuncstat
DepthRangeBase	geometry.h	/^		float    		DepthRangeBase; 	 \/\/ (n+f)\/2$/;"	m	struct:Geometry
DepthRangeFactor	geometry.h	/^		float    		DepthRangeFactor;  \/\/ (f-n)\/2$/;"	m	struct:Geometry
DepthRangef	float_api.cpp	/^void Context::DepthRangef(GLclampf zNear, GLclampf zFar)$/;"	f	class:Context
DepthRangex	fixed_api.cpp	/^void Context::DepthRangex(GLclampx zNear, GLclampx zFar)$/;"	f	class:Context
DepthRef	rasterizer.h	/^    float   DepthRef;$/;"	m	class:Rasterizer
DepthTest	ogles.h	/^struct DepthTest$/;"	s
DepthTestEn	rasterizer.h	/^    bool    DepthTestEn, AlphaTestEn, ScissorTestEn, StencilTestEn, LogicOpTestEn, MultiSampleEn;$/;"	m	class:Rasterizer
DepthTestMode	rasterizer.h	/^    U32     DepthTestMode;$/;"	m	class:Rasterizer
Dict	glues/libtess/dict-list.h	/^struct Dict$/;"	s
Dict	glues/libtess/dict-list.h	/^typedef struct Dict Dict;$/;"	t	typeref:struct:Dict
Dict	glues/libtess/dict-list.h	41;"	d
Dict	glues/libtess/dict.h	/^struct Dict$/;"	s
Dict	glues/libtess/dict.h	/^typedef struct Dict Dict;$/;"	t	typeref:struct:Dict
Dict	glues/libtess/dict.h	41;"	d
DictKey	glues/libtess/dict-list.h	/^typedef void *DictKey;$/;"	t
DictKey	glues/libtess/dict-list.h	40;"	d
DictKey	glues/libtess/dict.h	/^typedef void* DictKey;$/;"	t
DictKey	glues/libtess/dict.h	40;"	d
DictNode	glues/libtess/dict-list.h	/^struct DictNode$/;"	s
DictNode	glues/libtess/dict-list.h	/^typedef struct DictNode DictNode;$/;"	t	typeref:struct:DictNode
DictNode	glues/libtess/dict-list.h	42;"	d
DictNode	glues/libtess/dict.h	/^struct DictNode$/;"	s
DictNode	glues/libtess/dict.h	/^typedef struct DictNode DictNode;$/;"	t	typeref:struct:DictNode
DictNode	glues/libtess/dict.h	42;"	d
Direction	geometry.cpp	/^void  Geometry::Direction(float * from, float * to, float * result)$/;"	f	class:Geometry
Disable	fixed_api.cpp	/^void Context::Disable(GLenum cap)$/;"	f	class:Context
Disable	ogles.h	/^    int         Disable;$/;"	m	struct:GLfuncstat
DisableClientState	fixed_api.cpp	/^void Context::DisableClientState(GLenum array)$/;"	f	class:Context
DisableClientState	ogles.h	/^    int         DisableClientState;$/;"	m	struct:GLfuncstat
Display	display.h	/^    class Display$/;"	c	namespace:EGL
Dispose	context.cpp	/^void Context::Dispose()$/;"	f	class:Context
Dispose	surface.cpp	/^void Surface::Dispose()$/;"	f	class:Surface
Dnext	glues/libtess/mesh.h	162;"	d
DoneEdgeDict	glues/libtess/sweep.c	/^static void DoneEdgeDict(GLUtesselator* tess)$/;"	f	file:
DonePriorityQ	glues/libtess/sweep.c	/^static void DonePriorityQ(GLUtesselator* tess)$/;"	f	file:
Dot	glues/libtess/normal.c	44;"	d	file:
Dprev	glues/libtess/mesh.h	160;"	d
DrawArrayCmd	ogles.h	/^struct DrawArrayCmd$/;"	s
DrawArrayDEG	drv_impl.cpp	25;"	d	file:
DrawArrays	fixed_api.cpp	/^void Context::DrawArrays(GLenum mode, GLint first, GLsizei count)$/;"	f	class:Context
DrawArrays	ogles.h	/^    int         DrawArrays;$/;"	m	struct:GLfuncstat
DrawElemCmd	ogles.h	/^struct DrawElemCmd$/;"	s
DrawElements	fixed_api.cpp	/^void Context::DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)$/;"	f	class:Context
DrawElements	ogles.h	/^    int         DrawElements;$/;"	m	struct:GLfuncstat
DrawMode	geometry.h	/^		GLenum   		DrawMode;	 \/\/0:GL_TRIANGLES  1:GL_TRIANGLE_STRIP  2:GL_TRIANGLE_FAN$/;"	m	struct:Geometry
DrawOFF	offviewer.h	/^void DrawOFF(const char * filename)$/;"	f
DrawObjectKind	main.cpp	56;"	d	file:
Drvdumper	outfile.cpp	/^FILE * Drvdumper;$/;"	v
Dst	glues/libtess/mesh.h	156;"	d
DumpDepthImage	rasterizer.cpp	/^void Rasterizer::DumpDepthImage(int ImageType, char *filename)$/;"	f	class:Rasterizer
DumpImage	rasterizer.cpp	/^void Rasterizer::DumpImage(int ImageType, char *filename)$/;"	f	class:Rasterizer
EGL	GLES/egltypes.h	/^namespace EGL$/;"	n
EGL	config.h	/^namespace EGL$/;"	n
EGL	context.h	/^namespace EGL$/;"	n
EGL	display.h	/^namespace EGL$/;"	n
EGL	fixed.h	/^namespace EGL$/;"	n
EGL	matrix_stack.h	/^namespace EGL$/;"	n
EGL	surface.h	/^namespace EGL$/;"	n
EGLBoolean	GLES/egltypes.h	/^typedef int				EGLBoolean;$/;"	t
EGLConfig	GLES/egltypes.h	/^typedef const EGL::Config *		EGLConfig;$/;"	t
EGLConfig	GLES/egltypes.h	/^typedef void *			EGLConfig;$/;"	t
EGLContext	GLES/egltypes.h	/^typedef EGL::Context  *			EGLContext;$/;"	t
EGLContext	GLES/egltypes.h	/^typedef void *			EGLContext;$/;"	t
EGLDisplay	GLES/egltypes.h	/^typedef void *			EGLDisplay;$/;"	t
EGLSurface	GLES/egltypes.h	/^typedef EGL::Surface *			EGLSurface;$/;"	t
EGLSurface	GLES/egltypes.h	/^typedef void *			EGLSurface;$/;"	t
EGL_ALPHA_SIZE	GLES/egl.h	59;"	d
EGL_BACK_BUFFER	GLES/egl.h	129;"	d
EGL_BAD_ACCESS	GLES/egl.h	40;"	d
EGL_BAD_ALLOC	GLES/egl.h	41;"	d
EGL_BAD_ATTRIBUTE	GLES/egl.h	42;"	d
EGL_BAD_CONFIG	GLES/egl.h	43;"	d
EGL_BAD_CONTEXT	GLES/egl.h	44;"	d
EGL_BAD_CURRENT_SURFACE	GLES/egl.h	45;"	d
EGL_BAD_DISPLAY	GLES/egl.h	46;"	d
EGL_BAD_MATCH	GLES/egl.h	47;"	d
EGL_BAD_NATIVE_PIXMAP	GLES/egl.h	48;"	d
EGL_BAD_NATIVE_WINDOW	GLES/egl.h	49;"	d
EGL_BAD_PARAMETER	GLES/egl.h	50;"	d
EGL_BAD_SURFACE	GLES/egl.h	51;"	d
EGL_BIND_TO_TEXTURE_RGB	GLES/egl.h	83;"	d
EGL_BIND_TO_TEXTURE_RGBA	GLES/egl.h	84;"	d
EGL_BLUE_SIZE	GLES/egl.h	60;"	d
EGL_BUFFER_SIZE	GLES/egl.h	58;"	d
EGL_CONFIG_CAVEAT	GLES/egl.h	65;"	d
EGL_CONFIG_ID	GLES/egl.h	66;"	d
EGL_CONFIG_RENDERER	ogles.h	47;"	d
EGL_CONFIG_VENDOR	ogles.h	39;"	d
EGL_CONFIG_VERSION	ogles.h	42;"	d
EGL_CONFIG_VERSION	ogles.h	44;"	d
EGL_CONTEXT_LOST	GLES/egl.h	52;"	d
EGL_CORE_NATIVE_ENGINE	GLES/egl.h	140;"	d
EGL_DEFAULT_DISPLAY	GLES/egltypes.h	34;"	d
EGL_DEFAULT_DISPLAY	GLES/egltypes.h	48;"	d
EGL_DEFAULT_DISPLAY	GLES/egltypes.h	57;"	d
EGL_DEPTH_SIZE	GLES/egl.h	63;"	d
EGL_DISPLAY_H	display.h	2;"	d
EGL_DONT_CARE	GLES/egl.h	91;"	d
EGL_DRAW	GLES/egl.h	134;"	d
EGL_EXTENSIONS	GLES/egl.h	113;"	d
EGL_FALSE	GLES/egl.h	32;"	d
EGL_GREEN_SIZE	GLES/egl.h	61;"	d
EGL_HEIGHT	GLES/egl.h	118;"	d
EGL_LARGEST_PBUFFER	GLES/egl.h	120;"	d
EGL_LEVEL	GLES/egl.h	67;"	d
EGL_MAX_LEVELS	ogles.h	55;"	d
EGL_MAX_NUM_VARYING	ogles.h	60;"	d
EGL_MAX_PBUFFER_HEIGHT	GLES/egl.h	68;"	d
EGL_MAX_PBUFFER_PIXELS	GLES/egl.h	69;"	d
EGL_MAX_PBUFFER_WIDTH	GLES/egl.h	70;"	d
EGL_MAX_SWAP_INTERVAL	GLES/egl.h	86;"	d
EGL_MIN_SWAP_INTERVAL	GLES/egl.h	85;"	d
EGL_MIPMAP_LEVEL	GLES/egl.h	124;"	d
EGL_MIPMAP_PER_TEXEL	ogles.h	57;"	d
EGL_MIPMAP_TEXTURE	GLES/egl.h	123;"	d
EGL_NATIVE_RENDERABLE	GLES/egl.h	71;"	d
EGL_NATIVE_VISUAL_ID	GLES/egl.h	72;"	d
EGL_NATIVE_VISUAL_TYPE	GLES/egl.h	73;"	d
EGL_NONE	GLES/egl.h	82;"	d
EGL_NON_CONFORMANT_CONFIG	GLES/egl.h	94;"	d
EGL_NOT_INITIALIZED	GLES/egl.h	39;"	d
EGL_NO_CONTEXT	GLES/egltypes.h	97;"	d
EGL_NO_DISPLAY	GLES/egltypes.h	98;"	d
EGL_NO_SURFACE	GLES/egltypes.h	99;"	d
EGL_NO_TEXTURE	GLES/egl.h	96;"	d
EGL_NUM_LIGHTING	ogles.h	56;"	d
EGL_NUM_TEXTURE_UNITS	ogles.h	54;"	d
EGL_PBUFFER_BIT	GLES/egl.h	104;"	d
EGL_PIXMAP_BIT	GLES/egl.h	105;"	d
EGL_READ	GLES/egl.h	135;"	d
EGL_RED_SIZE	GLES/egl.h	62;"	d
EGL_RELEASE	ogles.h	36;"	d
EGL_SAMPLES	GLES/egl.h	75;"	d
EGL_SAMPLE_BUFFERS	GLES/egl.h	76;"	d
EGL_SLOW_CONFIG	GLES/egl.h	93;"	d
EGL_STENCIL_SIZE	GLES/egl.h	64;"	d
EGL_SUCCESS	GLES/egl.h	38;"	d
EGL_SURFACE_TYPE	GLES/egl.h	77;"	d
EGL_TEXTURE_2D	GLES/egl.h	99;"	d
EGL_TEXTURE_FORMAT	GLES/egl.h	121;"	d
EGL_TEXTURE_RGB	GLES/egl.h	97;"	d
EGL_TEXTURE_RGBA	GLES/egl.h	98;"	d
EGL_TEXTURE_TARGET	GLES/egl.h	122;"	d
EGL_TRANSPARENT_BLUE_VALUE	GLES/egl.h	79;"	d
EGL_TRANSPARENT_GREEN_VALUE	GLES/egl.h	80;"	d
EGL_TRANSPARENT_RED_VALUE	GLES/egl.h	81;"	d
EGL_TRANSPARENT_RGB	GLES/egl.h	95;"	d
EGL_TRANSPARENT_TYPE	GLES/egl.h	78;"	d
EGL_TRUE	GLES/egl.h	33;"	d
EGL_VENDOR	GLES/egl.h	111;"	d
EGL_VERSION	GLES/egl.h	112;"	d
EGL_VERSION_1_0	GLES/egl.h	26;"	d
EGL_VERSION_1_1	GLES/egl.h	27;"	d
EGL_VERSION_MAJOR	egl.cpp	30;"	d	file:
EGL_VERSION_MINOR	egl.cpp	31;"	d	file:
EGL_VERSION_NUMBER	ogles.h	48;"	d
EGL_WIDTH	GLES/egl.h	119;"	d
EGL_WINDOW_BIT	GLES/egl.h	106;"	d
EGLint	GLES/egltypes.h	/^typedef int				EGLint;$/;"	t
ELM3	ogles.h	64;"	d
ELM4	ogles.h	63;"	d
Edge	rasterizer.h	/^    float   Edge[3][2];$/;"	m	class:Rasterizer
EdgeEval	glues/libtess/geom.h	55;"	d
EdgeGoesLeft	glues/libtess/geom.h	65;"	d
EdgeGoesRight	glues/libtess/geom.h	66;"	d
EdgeLeq	glues/libtess/sweep.c	/^static int EdgeLeq(GLUtesselator* tess, ActiveRegion* reg1, ActiveRegion* reg2)$/;"	f	file:
EdgePair	glues/libtess/mesh.c	/^} EdgePair;$/;"	t	typeref:struct:__anon18	file:
EdgePair	glues/libtess/tess.c	/^typedef struct {GLUhalfEdge e, eSym;} EdgePair;$/;"	t	typeref:struct:__anon19	file:
EdgeSign	glues/libtess/geom.h	56;"	d
EffectP	rasterizer.h	/^    U32     EffectP;$/;"	m	class:Rasterizer
EffectPixBuffer	rasterizer.h	/^    float   EffectPixBuffer[TILEHEIGHT*TILEWIDTH*4][16];$/;"	m	class:Rasterizer
EmptyCache	glues/libtess/tess.c	/^static int EmptyCache(GLUtesselator* tess)$/;"	f	file:
Enable	fixed_api.cpp	/^void Context::Enable(GLenum cap)$/;"	f	class:Context
Enable	ogles.h	/^    int         Enable;$/;"	m	struct:GLfuncstat
EnableAA	main.cpp	58;"	d	file:
EnableClientState	fixed_api.cpp	/^void Context::EnableClientState(GLenum array)$/;"	f	class:Context
EnableClientState	ogles.h	/^    int         EnableClientState;$/;"	m	struct:GLfuncstat
EndTile	rasterizer.cpp	/^void Rasterizer::EndTile(U32 * ColorBuf)$/;"	f	class:Rasterizer
Errors	glues/glues_error.c	/^static const struct token_string Errors[]=$/;"	v	typeref:struct:token_string	file:
EyeCoords	geometry.h	/^		float 	 		EyeCoords[4];$/;"	m	struct:Geometry
EyeNormal	geometry.h	/^		float 	 		EyeNormal[4];$/;"	m	struct:Geometry
FALSE	glues/libtess/mesh.c	41;"	d	file:
FALSE	glues/libtess/normal.c	42;"	d	file:
FALSE	glues/libtess/render.c	42;"	d	file:
FALSE	glues/libtess/sweep.c	49;"	d	file:
FALSE	glues/libtess/tess.c	50;"	d	file:
FIXED	demo.cpp	66;"	d	file:
FIXED_H_INCLUDED	fixed.h	2;"	d
FOGCALBUG	ogles.h	111;"	d
FPS	main.cpp	/^static double FPS = 0.f;$/;"	v	file:
FRAME	main.cpp	60;"	d	file:
FRAMEDUMP	ogles.h	124;"	d
FULLVERSION_STRING	version.h	/^	static const char FULLVERSION_STRING[] = "1.0.0.0";$/;"	m	namespace:AutoVersion
Face	offviewer.h	/^    Face(void) : nverts(0), verts(0) {};$/;"	f	struct:Face
Face	offviewer.h	/^typedef struct Face$/;"	s
Face	offviewer.h	/^} Face;$/;"	t	typeref:struct:Face
FaceCount	glues/libtess/render.c	/^struct FaceCount$/;"	s	file:
FillRect	surface.cpp	/^    template <class T> void FillRect(T * base, const Rect & bufferRect, const Rect & fillRect,$/;"	f	namespace:__anon2
Finish	fixed_api.cpp	/^void Context::Finish(void)$/;"	f	class:Context
Finish	ogles.h	/^    int         Finish;$/;"	m	struct:GLfuncstat
FinishLeftRegions	glues/libtess/sweep.c	/^static GLUhalfEdge* FinishLeftRegions(GLUtesselator* tess, ActiveRegion* regFirst,$/;"	f	file:
FinishRegion	glues/libtess/sweep.c	/^static void FinishRegion(GLUtesselator* tess, ActiveRegion* reg)$/;"	f	file:
FixUpperEdge	glues/libtess/sweep.c	/^static int FixUpperEdge(ActiveRegion* reg, GLUhalfEdge* newEdge)$/;"	f	file:
Fixed	fixed.h	/^        inline Fixed()$/;"	f	class:EGL::Fixed
Fixed	fixed.h	/^        inline Fixed(GLfixed value)$/;"	f	class:EGL::Fixed
Fixed	fixed.h	/^    class Fixed$/;"	c	namespace:EGL
Fixed24D8	fixed.h	/^        inline Fixed24D8()$/;"	f	class:EGL::Fixed24D8
Fixed24D8	fixed.h	/^        inline Fixed24D8(GLfixed value)$/;"	f	class:EGL::Fixed24D8
Fixed24D8	fixed.h	/^    class Fixed24D8$/;"	c	namespace:EGL
Fixed28D4	fixed.h	/^        inline Fixed28D4()$/;"	f	class:EGL::Fixed28D4
Fixed28D4	fixed.h	/^        inline Fixed28D4(GLfixed value)$/;"	f	class:EGL::Fixed28D4
Fixed28D4	fixed.h	/^    class Fixed28D4$/;"	c	namespace:EGL
Flush	fixed_api.cpp	/^void Context::Flush(void)$/;"	f	class:Context
Flush	ogles.h	/^    int         Flush;$/;"	m	struct:GLfuncstat
Fog	ogles.h	/^    int         Fog;$/;"	m	struct:GLfuncstat
Fog	ogles.h	/^struct Fog$/;"	s
FogColor	rasterizer.h	/^    U8      FogColor[4];$/;"	m	class:Rasterizer
FogDensity	rasterizer.h	/^    float   FogDensity;$/;"	m	class:Rasterizer
FogEn	rasterizer.h	/^    bool    TexMappingEn,BlendingEn,FogEn;$/;"	m	class:Rasterizer
FogEnd	rasterizer.h	/^    float   FogEnd;$/;"	m	class:Rasterizer
FogMode	rasterizer.h	/^    U32     FogMode;$/;"	m	class:Rasterizer
FogStart	rasterizer.h	/^    float   FogStart;$/;"	m	class:Rasterizer
Fogf	float_api.cpp	/^void Context::Fogf(GLenum pname, const GLfloat param)$/;"	f	class:Context
Fogfv	float_api.cpp	/^void Context::Fogfv(GLenum pname, const GLfloat *params)$/;"	f	class:Context
Fogv	ogles.h	/^    int         Fogv;$/;"	m	struct:GLfuncstat
Fogx	fixed_api.cpp	/^void Context::Fogx(GLenum pname, GLfixed param)$/;"	f	class:Context
Fogxv	fixed_api.cpp	/^void Context::Fogxv(GLenum pname, const GLfixed *params)$/;"	f	class:Context
FractionFromFixed	fixed.h	/^        inline GLfixed FractionFromFixed()$/;"	f	class:EGL::Fixed
FractionFromFixed24D8	fixed.h	/^        inline GLfixed FractionFromFixed24D8()$/;"	f	class:EGL::Fixed24D8
FractionFromFixed28D4	fixed.h	/^        inline GLfixed FractionFromFixed28D4()$/;"	f	class:EGL::Fixed28D4
FreeTrail	glues/libtess/render.c	168;"	d	file:
FrontFace	fixed_api.cpp	/^void Context::FrontFace(GLenum mode)$/;"	f	class:Context
FrontFace	geometry.h	/^		GLenum   		FrontFace;$/;"	m	struct:Geometry
FrontFace	ogles.h	/^    int         FrontFace;$/;"	m	struct:GLfuncstat
Frustum	ogles.h	/^    int         Frustum;$/;"	m	struct:GLfuncstat
Frustumf	float_api.cpp	/^void Context::Frustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)$/;"	f	class:Context
Frustumx	fixed_api.cpp	/^void Context::Frustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)$/;"	f	class:Context
GENERATE_STAT_CSV	ogles.h	99;"	d
GEOMETRY_H_INCLUDED	geometry.h	12;"	d
GLAPI	GLES/gl.h	53;"	d
GLAPI	GLES/gl.h	57;"	d
GLAPI	GLES/gl.h	76;"	d
GLAPI	GLES/gl.h	78;"	d
GLAPI	GLES/glext.h	61;"	d
GLAPI	GLES/glext.h	62;"	d
GLAPI	GLES/glext.h	65;"	d
GLM_COLOR	glm.h	27;"	d
GLM_FLAT	glm.h	24;"	d
GLM_H_INCLUDED	glm.h	14;"	d
GLM_MATERIAL	glm.h	28;"	d
GLM_NONE	glm.h	23;"	d
GLM_RGB	glm.h	30;"	d
GLM_RGBA	glm.h	31;"	d
GLM_SMOOTH	glm.h	25;"	d
GLM_TEXTURE	glm.h	26;"	d
GLMgroup	glm.h	/^} GLMgroup;$/;"	t	typeref:struct:_GLMgroup
GLMmaterial	glm.h	/^} GLMmaterial;$/;"	t	typeref:struct:_GLMmaterial
GLMmodel	glm.h	/^} GLMmodel;$/;"	t	typeref:struct:_GLMmodel
GLMnode	glm.cpp	/^} GLMnode;$/;"	t	typeref:struct:_GLMnode	file:
GLMtextures	glm.h	/^} GLMtextures;$/;"	t	typeref:struct:_GLMtextures
GLMtriangle	glm.h	/^} GLMtriangle;$/;"	t	typeref:struct:_GLMtriangle
GLOBJECT	demo.cpp	/^} GLOBJECT;$/;"	t	typeref:struct:__anon3	file:
GLUTarrows	offviewer.h	/^static int GLUTarrows[4] = { 0, 0, 0, 0 };$/;"	v
GLUTbutton	offviewer.h	/^static int GLUTbutton[3] = { 0, 0, 0 };$/;"	v
GLUTmodifiers	offviewer.h	/^static int GLUTmodifiers = 0;$/;"	v
GLUTmouse	offviewer.h	/^static int GLUTmouse[2] = { 0, 0 };$/;"	v
GLUTwindow	offviewer.h	/^static int GLUTwindow = 0;$/;"	v
GLUTwindow_height	offviewer.h	/^static int GLUTwindow_height = 800;$/;"	v
GLUTwindow_width	offviewer.h	/^static int GLUTwindow_width = 800;$/;"	v
GLU_BEGIN	glues/glu.h	150;"	d
GLU_BEGIN	glues/glues.h	150;"	d
GLU_CCW	glues/glu.h	168;"	d
GLU_CCW	glues/glues.h	168;"	d
GLU_CW	glues/glu.h	167;"	d
GLU_CW	glues/glues.h	167;"	d
GLU_EDGE_FLAG	glues/glu.h	157;"	d
GLU_EDGE_FLAG	glues/glues.h	157;"	d
GLU_END	glues/glu.h	154;"	d
GLU_END	glues/glues.h	154;"	d
GLU_ERROR	glues/glu.h	84;"	d
GLU_ERROR	glues/glues.h	84;"	d
GLU_ERROR	glues/glues_quad.h	65;"	d
GLU_EXTENSIONS	glues/glu.h	68;"	d
GLU_EXTENSIONS	glues/glues.h	68;"	d
GLU_EXTENSIONS	glues/glues_registry.h	58;"	d
GLU_EXTERIOR	glues/glu.h	170;"	d
GLU_EXTERIOR	glues/glues.h	170;"	d
GLU_FALSE	glues/glu.h	58;"	d
GLU_FALSE	glues/glues.h	58;"	d
GLU_FILL	glues/glu.h	80;"	d
GLU_FILL	glues/glues.h	80;"	d
GLU_FILL	glues/glues_quad.h	61;"	d
GLU_FLAT	glues/glu.h	88;"	d
GLU_FLAT	glues/glues.h	88;"	d
GLU_FLAT	glues/glues_quad.h	69;"	d
GLU_INCOMPATIBLE_GL_VERSION	glues/glu.h	74;"	d
GLU_INCOMPATIBLE_GL_VERSION	glues/glues.h	74;"	d
GLU_INCOMPATIBLE_GL_VERSION	glues/glues_error.h	55;"	d
GLU_INCOMPATIBLE_GL_VERSION	glues/glues_mipmap.h	55;"	d
GLU_INCOMPATIBLE_GL_VERSION	glues/glues_quad.h	55;"	d
GLU_INSIDE	glues/glu.h	93;"	d
GLU_INSIDE	glues/glues.h	93;"	d
GLU_INSIDE	glues/glues_quad.h	74;"	d
GLU_INTERIOR	glues/glu.h	169;"	d
GLU_INTERIOR	glues/glues.h	169;"	d
GLU_INVALID_ENUM	glues/glu.h	71;"	d
GLU_INVALID_ENUM	glues/glues.h	71;"	d
GLU_INVALID_ENUM	glues/glues_error.h	52;"	d
GLU_INVALID_ENUM	glues/glues_mipmap.h	52;"	d
GLU_INVALID_ENUM	glues/glues_quad.h	52;"	d
GLU_INVALID_OPERATION	glues/glu.h	75;"	d
GLU_INVALID_OPERATION	glues/glues.h	75;"	d
GLU_INVALID_OPERATION	glues/glues_error.h	56;"	d
GLU_INVALID_OPERATION	glues/glues_mipmap.h	56;"	d
GLU_INVALID_OPERATION	glues/glues_quad.h	56;"	d
GLU_INVALID_VALUE	glues/glu.h	72;"	d
GLU_INVALID_VALUE	glues/glues.h	72;"	d
GLU_INVALID_VALUE	glues/glues_error.h	53;"	d
GLU_INVALID_VALUE	glues/glues_mipmap.h	53;"	d
GLU_INVALID_VALUE	glues/glues_quad.h	53;"	d
GLU_LINE	glues/glu.h	79;"	d
GLU_LINE	glues/glues.h	79;"	d
GLU_LINE	glues/glues_quad.h	60;"	d
GLU_NONE	glues/glu.h	89;"	d
GLU_NONE	glues/glues.h	89;"	d
GLU_NONE	glues/glues_quad.h	70;"	d
GLU_NURBS_ERROR1	glues/glu.h	217;"	d
GLU_NURBS_ERROR1	glues/glues.h	217;"	d
GLU_NURBS_ERROR1	glues/glues_error.h	75;"	d
GLU_NURBS_ERROR10	glues/glu.h	226;"	d
GLU_NURBS_ERROR10	glues/glues.h	226;"	d
GLU_NURBS_ERROR10	glues/glues_error.h	84;"	d
GLU_NURBS_ERROR11	glues/glu.h	227;"	d
GLU_NURBS_ERROR11	glues/glues.h	227;"	d
GLU_NURBS_ERROR11	glues/glues_error.h	85;"	d
GLU_NURBS_ERROR12	glues/glu.h	228;"	d
GLU_NURBS_ERROR12	glues/glues.h	228;"	d
GLU_NURBS_ERROR12	glues/glues_error.h	86;"	d
GLU_NURBS_ERROR13	glues/glu.h	229;"	d
GLU_NURBS_ERROR13	glues/glues.h	229;"	d
GLU_NURBS_ERROR13	glues/glues_error.h	87;"	d
GLU_NURBS_ERROR14	glues/glu.h	230;"	d
GLU_NURBS_ERROR14	glues/glues.h	230;"	d
GLU_NURBS_ERROR14	glues/glues_error.h	88;"	d
GLU_NURBS_ERROR15	glues/glu.h	231;"	d
GLU_NURBS_ERROR15	glues/glues.h	231;"	d
GLU_NURBS_ERROR15	glues/glues_error.h	89;"	d
GLU_NURBS_ERROR16	glues/glu.h	232;"	d
GLU_NURBS_ERROR16	glues/glues.h	232;"	d
GLU_NURBS_ERROR16	glues/glues_error.h	90;"	d
GLU_NURBS_ERROR17	glues/glu.h	233;"	d
GLU_NURBS_ERROR17	glues/glues.h	233;"	d
GLU_NURBS_ERROR17	glues/glues_error.h	91;"	d
GLU_NURBS_ERROR18	glues/glu.h	234;"	d
GLU_NURBS_ERROR18	glues/glues.h	234;"	d
GLU_NURBS_ERROR18	glues/glues_error.h	92;"	d
GLU_NURBS_ERROR19	glues/glu.h	235;"	d
GLU_NURBS_ERROR19	glues/glues.h	235;"	d
GLU_NURBS_ERROR19	glues/glues_error.h	93;"	d
GLU_NURBS_ERROR2	glues/glu.h	218;"	d
GLU_NURBS_ERROR2	glues/glues.h	218;"	d
GLU_NURBS_ERROR2	glues/glues_error.h	76;"	d
GLU_NURBS_ERROR20	glues/glu.h	236;"	d
GLU_NURBS_ERROR20	glues/glues.h	236;"	d
GLU_NURBS_ERROR20	glues/glues_error.h	94;"	d
GLU_NURBS_ERROR21	glues/glu.h	237;"	d
GLU_NURBS_ERROR21	glues/glues.h	237;"	d
GLU_NURBS_ERROR21	glues/glues_error.h	95;"	d
GLU_NURBS_ERROR22	glues/glu.h	238;"	d
GLU_NURBS_ERROR22	glues/glues.h	238;"	d
GLU_NURBS_ERROR22	glues/glues_error.h	96;"	d
GLU_NURBS_ERROR23	glues/glu.h	239;"	d
GLU_NURBS_ERROR23	glues/glues.h	239;"	d
GLU_NURBS_ERROR23	glues/glues_error.h	97;"	d
GLU_NURBS_ERROR24	glues/glu.h	240;"	d
GLU_NURBS_ERROR24	glues/glues.h	240;"	d
GLU_NURBS_ERROR24	glues/glues_error.h	98;"	d
GLU_NURBS_ERROR25	glues/glu.h	241;"	d
GLU_NURBS_ERROR25	glues/glues.h	241;"	d
GLU_NURBS_ERROR25	glues/glues_error.h	99;"	d
GLU_NURBS_ERROR26	glues/glu.h	242;"	d
GLU_NURBS_ERROR26	glues/glues.h	242;"	d
GLU_NURBS_ERROR26	glues/glues_error.h	100;"	d
GLU_NURBS_ERROR27	glues/glu.h	243;"	d
GLU_NURBS_ERROR27	glues/glues.h	243;"	d
GLU_NURBS_ERROR27	glues/glues_error.h	101;"	d
GLU_NURBS_ERROR28	glues/glu.h	244;"	d
GLU_NURBS_ERROR28	glues/glues.h	244;"	d
GLU_NURBS_ERROR28	glues/glues_error.h	102;"	d
GLU_NURBS_ERROR29	glues/glu.h	245;"	d
GLU_NURBS_ERROR29	glues/glues.h	245;"	d
GLU_NURBS_ERROR29	glues/glues_error.h	103;"	d
GLU_NURBS_ERROR3	glues/glu.h	219;"	d
GLU_NURBS_ERROR3	glues/glues.h	219;"	d
GLU_NURBS_ERROR3	glues/glues_error.h	77;"	d
GLU_NURBS_ERROR30	glues/glu.h	246;"	d
GLU_NURBS_ERROR30	glues/glues.h	246;"	d
GLU_NURBS_ERROR30	glues/glues_error.h	104;"	d
GLU_NURBS_ERROR31	glues/glu.h	247;"	d
GLU_NURBS_ERROR31	glues/glues.h	247;"	d
GLU_NURBS_ERROR31	glues/glues_error.h	105;"	d
GLU_NURBS_ERROR32	glues/glu.h	248;"	d
GLU_NURBS_ERROR32	glues/glues.h	248;"	d
GLU_NURBS_ERROR32	glues/glues_error.h	106;"	d
GLU_NURBS_ERROR33	glues/glu.h	249;"	d
GLU_NURBS_ERROR33	glues/glues.h	249;"	d
GLU_NURBS_ERROR33	glues/glues_error.h	107;"	d
GLU_NURBS_ERROR34	glues/glu.h	250;"	d
GLU_NURBS_ERROR34	glues/glues.h	250;"	d
GLU_NURBS_ERROR34	glues/glues_error.h	108;"	d
GLU_NURBS_ERROR35	glues/glu.h	251;"	d
GLU_NURBS_ERROR35	glues/glues.h	251;"	d
GLU_NURBS_ERROR35	glues/glues_error.h	109;"	d
GLU_NURBS_ERROR36	glues/glu.h	252;"	d
GLU_NURBS_ERROR36	glues/glues.h	252;"	d
GLU_NURBS_ERROR36	glues/glues_error.h	110;"	d
GLU_NURBS_ERROR37	glues/glu.h	253;"	d
GLU_NURBS_ERROR37	glues/glues.h	253;"	d
GLU_NURBS_ERROR37	glues/glues_error.h	111;"	d
GLU_NURBS_ERROR4	glues/glu.h	220;"	d
GLU_NURBS_ERROR4	glues/glues.h	220;"	d
GLU_NURBS_ERROR4	glues/glues_error.h	78;"	d
GLU_NURBS_ERROR5	glues/glu.h	221;"	d
GLU_NURBS_ERROR5	glues/glues.h	221;"	d
GLU_NURBS_ERROR5	glues/glues_error.h	79;"	d
GLU_NURBS_ERROR6	glues/glu.h	222;"	d
GLU_NURBS_ERROR6	glues/glues.h	222;"	d
GLU_NURBS_ERROR6	glues/glues_error.h	80;"	d
GLU_NURBS_ERROR7	glues/glu.h	223;"	d
GLU_NURBS_ERROR7	glues/glues.h	223;"	d
GLU_NURBS_ERROR7	glues/glues_error.h	81;"	d
GLU_NURBS_ERROR8	glues/glu.h	224;"	d
GLU_NURBS_ERROR8	glues/glues.h	224;"	d
GLU_NURBS_ERROR8	glues/glues_error.h	82;"	d
GLU_NURBS_ERROR9	glues/glu.h	225;"	d
GLU_NURBS_ERROR9	glues/glues.h	225;"	d
GLU_NURBS_ERROR9	glues/glues_error.h	83;"	d
GLU_OUTSIDE	glues/glu.h	92;"	d
GLU_OUTSIDE	glues/glues.h	92;"	d
GLU_OUTSIDE	glues/glues_quad.h	73;"	d
GLU_OUT_OF_MEMORY	glues/glu.h	73;"	d
GLU_OUT_OF_MEMORY	glues/glues.h	73;"	d
GLU_OUT_OF_MEMORY	glues/glues_error.h	54;"	d
GLU_OUT_OF_MEMORY	glues/glues_mipmap.h	54;"	d
GLU_OUT_OF_MEMORY	glues/glues_quad.h	54;"	d
GLU_POINT	glues/glu.h	78;"	d
GLU_POINT	glues/glues.h	78;"	d
GLU_POINT	glues/glues_quad.h	59;"	d
GLU_SILHOUETTE	glues/glu.h	81;"	d
GLU_SILHOUETTE	glues/glues.h	81;"	d
GLU_SILHOUETTE	glues/glues_quad.h	62;"	d
GLU_SMOOTH	glues/glu.h	87;"	d
GLU_SMOOTH	glues/glues.h	87;"	d
GLU_SMOOTH	glues/glues_quad.h	68;"	d
GLU_TESS_BEGIN	glues/glu.h	149;"	d
GLU_TESS_BEGIN	glues/glues.h	149;"	d
GLU_TESS_BEGIN_DATA	glues/glu.h	159;"	d
GLU_TESS_BEGIN_DATA	glues/glues.h	159;"	d
GLU_TESS_BOUNDARY_ONLY	glues/glu.h	175;"	d
GLU_TESS_BOUNDARY_ONLY	glues/glues.h	175;"	d
GLU_TESS_COMBINE	glues/glu.h	158;"	d
GLU_TESS_COMBINE	glues/glues.h	158;"	d
GLU_TESS_COMBINE_DATA	glues/glu.h	164;"	d
GLU_TESS_COMBINE_DATA	glues/glues.h	164;"	d
GLU_TESS_COORD_TOO_LARGE	glues/glu.h	191;"	d
GLU_TESS_COORD_TOO_LARGE	glues/glues.h	191;"	d
GLU_TESS_COORD_TOO_LARGE	glues/glues_error.h	71;"	d
GLU_TESS_DEFAULT_TOLERANCE	glues/libtess/tess.c	46;"	d	file:
GLU_TESS_EDGE_FLAG	glues/glu.h	156;"	d
GLU_TESS_EDGE_FLAG	glues/glues.h	156;"	d
GLU_TESS_EDGE_FLAG_DATA	glues/glu.h	163;"	d
GLU_TESS_EDGE_FLAG_DATA	glues/glues.h	163;"	d
GLU_TESS_END	glues/glu.h	153;"	d
GLU_TESS_END	glues/glues.h	153;"	d
GLU_TESS_END_DATA	glues/glu.h	161;"	d
GLU_TESS_END_DATA	glues/glues.h	161;"	d
GLU_TESS_ERROR	glues/glu.h	155;"	d
GLU_TESS_ERROR	glues/glues.h	155;"	d
GLU_TESS_ERROR1	glues/glu.h	179;"	d
GLU_TESS_ERROR1	glues/glues.h	179;"	d
GLU_TESS_ERROR1	glues/glues_error.h	59;"	d
GLU_TESS_ERROR2	glues/glu.h	180;"	d
GLU_TESS_ERROR2	glues/glues.h	180;"	d
GLU_TESS_ERROR2	glues/glues_error.h	60;"	d
GLU_TESS_ERROR3	glues/glu.h	181;"	d
GLU_TESS_ERROR3	glues/glues.h	181;"	d
GLU_TESS_ERROR3	glues/glues_error.h	61;"	d
GLU_TESS_ERROR4	glues/glu.h	182;"	d
GLU_TESS_ERROR4	glues/glues.h	182;"	d
GLU_TESS_ERROR4	glues/glues_error.h	62;"	d
GLU_TESS_ERROR5	glues/glu.h	183;"	d
GLU_TESS_ERROR5	glues/glues.h	183;"	d
GLU_TESS_ERROR5	glues/glues_error.h	63;"	d
GLU_TESS_ERROR6	glues/glu.h	184;"	d
GLU_TESS_ERROR6	glues/glues.h	184;"	d
GLU_TESS_ERROR6	glues/glues_error.h	64;"	d
GLU_TESS_ERROR7	glues/glu.h	185;"	d
GLU_TESS_ERROR7	glues/glues.h	185;"	d
GLU_TESS_ERROR7	glues/glues_error.h	65;"	d
GLU_TESS_ERROR8	glues/glu.h	186;"	d
GLU_TESS_ERROR8	glues/glues.h	186;"	d
GLU_TESS_ERROR8	glues/glues_error.h	66;"	d
GLU_TESS_ERROR_DATA	glues/glu.h	162;"	d
GLU_TESS_ERROR_DATA	glues/glues.h	162;"	d
GLU_TESS_MAX_COORD	glues/glu.h	146;"	d
GLU_TESS_MAX_COORD	glues/glues.h	146;"	d
GLU_TESS_MESH	glues/libtess/tess.c	47;"	d	file:
GLU_TESS_MISSING_BEGIN_CONTOUR	glues/glu.h	188;"	d
GLU_TESS_MISSING_BEGIN_CONTOUR	glues/glues.h	188;"	d
GLU_TESS_MISSING_BEGIN_CONTOUR	glues/glues_error.h	68;"	d
GLU_TESS_MISSING_BEGIN_POLYGON	glues/glu.h	187;"	d
GLU_TESS_MISSING_BEGIN_POLYGON	glues/glues.h	187;"	d
GLU_TESS_MISSING_BEGIN_POLYGON	glues/glues_error.h	67;"	d
GLU_TESS_MISSING_END_CONTOUR	glues/glu.h	190;"	d
GLU_TESS_MISSING_END_CONTOUR	glues/glues.h	190;"	d
GLU_TESS_MISSING_END_CONTOUR	glues/glues_error.h	70;"	d
GLU_TESS_MISSING_END_POLYGON	glues/glu.h	189;"	d
GLU_TESS_MISSING_END_POLYGON	glues/glues.h	189;"	d
GLU_TESS_MISSING_END_POLYGON	glues/glues_error.h	69;"	d
GLU_TESS_NEED_COMBINE_CALLBACK	glues/glu.h	192;"	d
GLU_TESS_NEED_COMBINE_CALLBACK	glues/glues.h	192;"	d
GLU_TESS_NEED_COMBINE_CALLBACK	glues/glues_error.h	72;"	d
GLU_TESS_TOLERANCE	glues/glu.h	176;"	d
GLU_TESS_TOLERANCE	glues/glues.h	176;"	d
GLU_TESS_VERTEX	glues/glu.h	151;"	d
GLU_TESS_VERTEX	glues/glues.h	151;"	d
GLU_TESS_VERTEX_DATA	glues/glu.h	160;"	d
GLU_TESS_VERTEX_DATA	glues/glues.h	160;"	d
GLU_TESS_WINDING_ABS_GEQ_TWO	glues/glu.h	199;"	d
GLU_TESS_WINDING_ABS_GEQ_TWO	glues/glues.h	199;"	d
GLU_TESS_WINDING_NEGATIVE	glues/glu.h	198;"	d
GLU_TESS_WINDING_NEGATIVE	glues/glues.h	198;"	d
GLU_TESS_WINDING_NONZERO	glues/glu.h	196;"	d
GLU_TESS_WINDING_NONZERO	glues/glues.h	196;"	d
GLU_TESS_WINDING_ODD	glues/glu.h	195;"	d
GLU_TESS_WINDING_ODD	glues/glues.h	195;"	d
GLU_TESS_WINDING_POSITIVE	glues/glu.h	197;"	d
GLU_TESS_WINDING_POSITIVE	glues/glues.h	197;"	d
GLU_TESS_WINDING_RULE	glues/glu.h	174;"	d
GLU_TESS_WINDING_RULE	glues/glues.h	174;"	d
GLU_TRUE	glues/glu.h	59;"	d
GLU_TRUE	glues/glues.h	59;"	d
GLU_UNKNOWN	glues/glu.h	171;"	d
GLU_UNKNOWN	glues/glues.h	171;"	d
GLU_VERSION	glues/glu.h	67;"	d
GLU_VERSION	glues/glues.h	67;"	d
GLU_VERSION	glues/glues_registry.h	57;"	d
GLU_VERSION_1_1	glues/glu.h	62;"	d
GLU_VERSION_1_1	glues/glues.h	62;"	d
GLU_VERSION_1_1	glues/glues_registry.h	52;"	d
GLU_VERSION_1_2	glues/glu.h	63;"	d
GLU_VERSION_1_2	glues/glues.h	63;"	d
GLU_VERSION_1_2	glues/glues_registry.h	53;"	d
GLU_VERSION_1_3	glues/glu.h	64;"	d
GLU_VERSION_1_3	glues/glues.h	64;"	d
GLU_VERSION_1_3	glues/glues_registry.h	54;"	d
GLU_VERTEX	glues/glu.h	152;"	d
GLU_VERTEX	glues/glues.h	152;"	d
GLUface	glues/libtess/mesh.h	/^struct GLUface$/;"	s
GLUface	glues/libtess/mesh.h	/^typedef struct GLUface GLUface;$/;"	t	typeref:struct:GLUface
GLUhalfEdge	glues/libtess/mesh.h	/^struct GLUhalfEdge$/;"	s
GLUhalfEdge	glues/libtess/mesh.h	/^typedef struct GLUhalfEdge GLUhalfEdge;$/;"	t	typeref:struct:GLUhalfEdge
GLUmesh	glues/libtess/mesh.h	/^struct GLUmesh$/;"	s
GLUmesh	glues/libtess/mesh.h	/^typedef struct GLUmesh GLUmesh;$/;"	t	typeref:struct:GLUmesh
GLUquadric	glues/glu.h	/^typedef struct GLUquadric GLUquadric;$/;"	t	typeref:struct:GLUquadric
GLUquadric	glues/glues.h	/^typedef struct GLUquadric GLUquadric;$/;"	t	typeref:struct:GLUquadric
GLUquadric	glues/glues_quad.c	/^struct GLUquadric$/;"	s	file:
GLUquadric	glues/glues_quad.h	/^typedef struct GLUquadric GLUquadric;$/;"	t	typeref:struct:GLUquadric
GLUquadricObj	glues/glu.h	/^typedef GLUquadric GLUquadricObj;$/;"	t
GLUquadricObj	glues/glues.h	/^typedef GLUquadric GLUquadricObj;$/;"	t
GLUquadricObj	glues/glues_quad.h	/^typedef GLUquadric GLUquadricObj;$/;"	t
GLUtesselator	glues/glu.h	/^typedef struct GLUtesselator GLUtesselator;$/;"	t	typeref:struct:GLUtesselator
GLUtesselator	glues/glues.h	/^typedef struct GLUtesselator GLUtesselator;$/;"	t	typeref:struct:GLUtesselator
GLUtesselator	glues/libtess/tess.h	/^struct GLUtesselator$/;"	s
GLUtesselatorObj	glues/glu.h	/^typedef GLUtesselator GLUtesselatorObj;$/;"	t
GLUtesselatorObj	glues/glues.h	/^typedef GLUtesselator GLUtesselatorObj;$/;"	t
GLUtriangulatorObj	glues/glu.h	/^typedef GLUtesselator GLUtriangulatorObj;$/;"	t
GLUtriangulatorObj	glues/glues.h	/^typedef GLUtesselator GLUtriangulatorObj;$/;"	t
GLUvertex	glues/libtess/mesh.h	/^struct GLUvertex$/;"	s
GLUvertex	glues/libtess/mesh.h	/^typedef struct GLUvertex GLUvertex;$/;"	t	typeref:struct:GLUvertex
GL_ACTIVE_TEXTURE	GLES/gl.h	562;"	d
GL_ADD	GLES/gl.h	497;"	d
GL_ADD_SIGNED	GLES/gl.h	624;"	d
GL_ALIASED_LINE_WIDTH_RANGE	GLES/gl.h	273;"	d
GL_ALIASED_POINT_SIZE_RANGE	GLES/gl.h	272;"	d
GL_ALPHA	GLES/gl.h	443;"	d
GL_ALPHA_BITS	GLES/gl.h	322;"	d
GL_ALPHA_SCALE	GLES/gl.h	636;"	d
GL_ALPHA_TEST	GLES/gl.h	205;"	d
GL_ALPHA_TEST_FUNC	GLES/gl.h	297;"	d
GL_ALPHA_TEST_REF	GLES/gl.h	298;"	d
GL_ALWAYS	GLES/gl.h	143;"	d
GL_AMBIENT	GLES/gl.h	383;"	d
GL_AMBIENT_AND_DIFFUSE	GLES/gl.h	426;"	d
GL_AND	GLES/gl.h	404;"	d
GL_AND_INVERTED	GLES/gl.h	407;"	d
GL_AND_REVERSE	GLES/gl.h	405;"	d
GL_ARRAY_BUFFER	GLES/gl.h	598;"	d
GL_ARRAY_BUFFER_BINDING	GLES/gl.h	601;"	d
GL_BACK	GLES/gl.h	187;"	d
GL_BLEND	GLES/gl.h	206;"	d
GL_BLEND_DST	GLES/gl.h	299;"	d
GL_BLEND_SRC	GLES/gl.h	300;"	d
GL_BLUE_BITS	GLES/gl.h	321;"	d
GL_BUFFER_ACCESS	GLES/gl.h	615;"	d
GL_BUFFER_SIZE	GLES/gl.h	613;"	d
GL_BUFFER_USAGE	GLES/gl.h	614;"	d
GL_BYTE	GLES/gl.h	395;"	d
GL_CCW	GLES/gl.h	258;"	d
GL_CLAMP_TO_EDGE	GLES/gl.h	567;"	d
GL_CLEAR	GLES/gl.h	403;"	d
GL_CLIENT_ACTIVE_TEXTURE	GLES/gl.h	563;"	d
GL_CLIP_PLANE0	GLES/gl.h	167;"	d
GL_CLIP_PLANE1	GLES/gl.h	168;"	d
GL_CLIP_PLANE2	GLES/gl.h	169;"	d
GL_CLIP_PLANE3	GLES/gl.h	170;"	d
GL_CLIP_PLANE4	GLES/gl.h	171;"	d
GL_CLIP_PLANE5	GLES/gl.h	172;"	d
GL_COLOR_ARRAY	GLES/gl.h	228;"	d
GL_COLOR_ARRAY_BUFFER_BINDING	GLES/gl.h	605;"	d
GL_COLOR_ARRAY_POINTER	GLES/gl.h	342;"	d
GL_COLOR_ARRAY_SIZE	GLES/gl.h	334;"	d
GL_COLOR_ARRAY_STRIDE	GLES/gl.h	336;"	d
GL_COLOR_ARRAY_TYPE	GLES/gl.h	335;"	d
GL_COLOR_BUFFER_BIT	GLES/gl.h	120;"	d
GL_COLOR_CLEAR_VALUE	GLES/gl.h	304;"	d
GL_COLOR_LOGIC_OP	GLES/gl.h	207;"	d
GL_COLOR_MATERIAL	GLES/gl.h	222;"	d
GL_COLOR_WRITEMASK	GLES/gl.h	305;"	d
GL_COMBINE	GLES/gl.h	620;"	d
GL_COMBINE_ALPHA	GLES/gl.h	622;"	d
GL_COMBINE_RGB	GLES/gl.h	621;"	d
GL_COMPRESSED_TEXTURE_FORMATS	GLES/gl.h	358;"	d
GL_CONSTANT	GLES/gl.h	626;"	d
GL_CONSTANT_ATTENUATION	GLES/gl.h	390;"	d
GL_COORD_REPLACE_OES	GLES/gl.h	653;"	d
GL_COPY	GLES/gl.h	406;"	d
GL_COPY_INVERTED	GLES/gl.h	415;"	d
GL_CULL_FACE	GLES/gl.h	204;"	d
GL_CULL_FACE_MODE	GLES/gl.h	274;"	d
GL_CURRENT_COLOR	GLES/gl.h	261;"	d
GL_CURRENT_NORMAL	GLES/gl.h	262;"	d
GL_CURRENT_TEXTURE_COORDS	GLES/gl.h	263;"	d
GL_CW	GLES/gl.h	257;"	d
GL_DECAL	GLES/gl.h	495;"	d
GL_DECR	GLES/gl.h	478;"	d
GL_DEPTH_BITS	GLES/gl.h	323;"	d
GL_DEPTH_BUFFER_BIT	GLES/gl.h	118;"	d
GL_DEPTH_CLEAR_VALUE	GLES/gl.h	279;"	d
GL_DEPTH_FUNC	GLES/gl.h	280;"	d
GL_DEPTH_RANGE	GLES/gl.h	277;"	d
GL_DEPTH_TEST	GLES/gl.h	210;"	d
GL_DEPTH_WRITEMASK	GLES/gl.h	278;"	d
GL_DIFFUSE	GLES/gl.h	384;"	d
GL_DITHER	GLES/gl.h	208;"	d
GL_DONT_CARE	GLES/gl.h	366;"	d
GL_DOT3_RGB	GLES/gl.h	645;"	d
GL_DOT3_RGBA	GLES/gl.h	646;"	d
GL_DST_ALPHA	GLES/gl.h	152;"	d
GL_DST_COLOR	GLES/gl.h	158;"	d
GL_DYNAMIC_DRAW	GLES/gl.h	609;"	d
GL_ELEMENT_ARRAY_BUFFER	GLES/gl.h	599;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	GLES/gl.h	602;"	d
GL_EMISSION	GLES/gl.h	424;"	d
GL_EQUAL	GLES/gl.h	138;"	d
GL_EQUIV	GLES/gl.h	412;"	d
GL_EXP	GLES/gl.h	246;"	d
GL_EXP2	GLES/gl.h	247;"	d
GL_EXTENSIONS	GLES/gl.h	485;"	d
GL_FALSE	GLES/gl.h	123;"	d
GL_FASTEST	GLES/gl.h	367;"	d
GL_FIXED	GLES/gl.h	400;"	d
GL_FLAT	GLES/gl.h	460;"	d
GL_FLOAT	GLES/gl.h	399;"	d
GL_FOG	GLES/gl.h	201;"	d
GL_FOG_COLOR	GLES/gl.h	254;"	d
GL_FOG_DENSITY	GLES/gl.h	250;"	d
GL_FOG_END	GLES/gl.h	252;"	d
GL_FOG_HINT	GLES/gl.h	375;"	d
GL_FOG_MODE	GLES/gl.h	253;"	d
GL_FOG_START	GLES/gl.h	251;"	d
GL_FRONT	GLES/gl.h	186;"	d
GL_FRONT_AND_BACK	GLES/gl.h	188;"	d
GL_FRONT_FACE	GLES/gl.h	275;"	d
GL_GENERATE_MIPMAP	GLES/gl.h	524;"	d
GL_GENERATE_MIPMAP_HINT	GLES/gl.h	376;"	d
GL_GEQUAL	GLES/gl.h	142;"	d
GL_GREATER	GLES/gl.h	140;"	d
GL_GREEN_BITS	GLES/gl.h	320;"	d
GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES	GLES/gl.h	356;"	d
GL_IMPLEMENTATION_COLOR_READ_TYPE_OES	GLES/gl.h	355;"	d
GL_INCR	GLES/gl.h	477;"	d
GL_INTERPOLATE	GLES/gl.h	625;"	d
GL_INVALID_ENUM	GLES/gl.h	237;"	d
GL_INVALID_OPERATION	GLES/gl.h	239;"	d
GL_INVALID_VALUE	GLES/gl.h	238;"	d
GL_INVERT	GLES/gl.h	413;"	d
GL_KEEP	GLES/gl.h	475;"	d
GL_LEQUAL	GLES/gl.h	139;"	d
GL_LESS	GLES/gl.h	137;"	d
GL_LIGHT0	GLES/gl.h	588;"	d
GL_LIGHT1	GLES/gl.h	589;"	d
GL_LIGHT2	GLES/gl.h	590;"	d
GL_LIGHT3	GLES/gl.h	591;"	d
GL_LIGHT4	GLES/gl.h	592;"	d
GL_LIGHT5	GLES/gl.h	593;"	d
GL_LIGHT6	GLES/gl.h	594;"	d
GL_LIGHT7	GLES/gl.h	595;"	d
GL_LIGHTING	GLES/gl.h	202;"	d
GL_LIGHT_MODEL_AMBIENT	GLES/gl.h	379;"	d
GL_LIGHT_MODEL_TWO_SIDE	GLES/gl.h	380;"	d
GL_LINEAR	GLES/gl.h	509;"	d
GL_LINEAR_ATTENUATION	GLES/gl.h	391;"	d
GL_LINEAR_MIPMAP_LINEAR	GLES/gl.h	517;"	d
GL_LINEAR_MIPMAP_NEAREST	GLES/gl.h	515;"	d
GL_LINES	GLES/gl.h	128;"	d
GL_LINE_LOOP	GLES/gl.h	129;"	d
GL_LINE_SMOOTH	GLES/gl.h	220;"	d
GL_LINE_SMOOTH_HINT	GLES/gl.h	373;"	d
GL_LINE_STRIP	GLES/gl.h	130;"	d
GL_LINE_WIDTH	GLES/gl.h	270;"	d
GL_LOGIC_OP_MODE	GLES/gl.h	301;"	d
GL_LUMINANCE	GLES/gl.h	446;"	d
GL_LUMINANCE_ALPHA	GLES/gl.h	447;"	d
GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES	GLES/gl.h	673;"	d
GL_MATRIX_INDEX_ARRAY_OES	GLES/gl.h	666;"	d
GL_MATRIX_INDEX_ARRAY_POINTER_OES	GLES/gl.h	672;"	d
GL_MATRIX_INDEX_ARRAY_SIZE_OES	GLES/gl.h	669;"	d
GL_MATRIX_INDEX_ARRAY_STRIDE_OES	GLES/gl.h	671;"	d
GL_MATRIX_INDEX_ARRAY_TYPE_OES	GLES/gl.h	670;"	d
GL_MATRIX_MODE	GLES/gl.h	289;"	d
GL_MATRIX_PALETTE_OES	GLES/gl.h	665;"	d
GL_MAX_CLIP_PLANES	GLES/gl.h	309;"	d
GL_MAX_ELEMENTS_INDICES	GLES/gl.h	316;"	d
GL_MAX_ELEMENTS_VERTICES	GLES/gl.h	315;"	d
GL_MAX_LIGHTS	GLES/gl.h	308;"	d
GL_MAX_MODELVIEW_STACK_DEPTH	GLES/gl.h	311;"	d
GL_MAX_PALETTE_MATRICES_OES	GLES/gl.h	664;"	d
GL_MAX_PROJECTION_STACK_DEPTH	GLES/gl.h	312;"	d
GL_MAX_TEXTURE_SIZE	GLES/gl.h	310;"	d
GL_MAX_TEXTURE_STACK_DEPTH	GLES/gl.h	313;"	d
GL_MAX_TEXTURE_UNITS	GLES/gl.h	317;"	d
GL_MAX_VERTEX_UNITS_OES	GLES/gl.h	663;"	d
GL_MAX_VIEWPORT_DIMS	GLES/gl.h	314;"	d
GL_MODELVIEW	GLES/gl.h	432;"	d
GL_MODELVIEW_MATRIX	GLES/gl.h	294;"	d
GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS	GLES/gl.h	361;"	d
GL_MODELVIEW_STACK_DEPTH	GLES/gl.h	291;"	d
GL_MODULATE	GLES/gl.h	494;"	d
GL_MULTISAMPLE	GLES/gl.h	230;"	d
GL_NAND	GLES/gl.h	417;"	d
GL_NEAREST	GLES/gl.h	508;"	d
GL_NEAREST_MIPMAP_LINEAR	GLES/gl.h	516;"	d
GL_NEAREST_MIPMAP_NEAREST	GLES/gl.h	514;"	d
GL_NEVER	GLES/gl.h	136;"	d
GL_NICEST	GLES/gl.h	368;"	d
GL_NOOP	GLES/gl.h	408;"	d
GL_NOR	GLES/gl.h	411;"	d
GL_NORMALIZE	GLES/gl.h	223;"	d
GL_NORMAL_ARRAY	GLES/gl.h	227;"	d
GL_NORMAL_ARRAY_BUFFER_BINDING	GLES/gl.h	604;"	d
GL_NORMAL_ARRAY_POINTER	GLES/gl.h	341;"	d
GL_NORMAL_ARRAY_STRIDE	GLES/gl.h	333;"	d
GL_NORMAL_ARRAY_TYPE	GLES/gl.h	332;"	d
GL_NOTEQUAL	GLES/gl.h	141;"	d
GL_NO_ERROR	GLES/gl.h	236;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	GLES/gl.h	357;"	d
GL_OES_VERSION_1_0	GLES/gl.h	105;"	d
GL_OES_VERSION_1_1	GLES/gl.h	106;"	d
GL_OES_compressed_paletted_texture	GLES/gl.h	109;"	d
GL_OES_matrix_get	GLES/gl.h	111;"	d
GL_OES_point_size_array	GLES/gl.h	113;"	d
GL_OES_point_sprite	GLES/gl.h	114;"	d
GL_OES_query_matrix	GLES/glext.h	70;"	d
GL_OES_read_format	GLES/gl.h	115;"	d
GL_ONE	GLES/gl.h	147;"	d
GL_ONE_MINUS_DST_ALPHA	GLES/gl.h	153;"	d
GL_ONE_MINUS_DST_COLOR	GLES/gl.h	159;"	d
GL_ONE_MINUS_SRC_ALPHA	GLES/gl.h	151;"	d
GL_ONE_MINUS_SRC_COLOR	GLES/gl.h	149;"	d
GL_OPERAND0_ALPHA	GLES/gl.h	632;"	d
GL_OPERAND0_RGB	GLES/gl.h	629;"	d
GL_OPERAND1_ALPHA	GLES/gl.h	633;"	d
GL_OPERAND1_RGB	GLES/gl.h	630;"	d
GL_OPERAND2_ALPHA	GLES/gl.h	634;"	d
GL_OPERAND2_RGB	GLES/gl.h	631;"	d
GL_OR	GLES/gl.h	410;"	d
GL_OR_INVERTED	GLES/gl.h	416;"	d
GL_OR_REVERSE	GLES/gl.h	414;"	d
GL_OUT_OF_MEMORY	GLES/gl.h	242;"	d
GL_PACK_ALIGNMENT	GLES/gl.h	307;"	d
GL_PACK_ALIGNMENT	GLES/gl.h	451;"	d
GL_PALETTE4_R5_G6_B5_OES	GLES/gl.h	572;"	d
GL_PALETTE4_RGB5_A1_OES	GLES/gl.h	574;"	d
GL_PALETTE4_RGB8_OES	GLES/gl.h	570;"	d
GL_PALETTE4_RGBA4_OES	GLES/gl.h	573;"	d
GL_PALETTE4_RGBA8_OES	GLES/gl.h	571;"	d
GL_PALETTE8_R5_G6_B5_OES	GLES/gl.h	577;"	d
GL_PALETTE8_RGB5_A1_OES	GLES/gl.h	579;"	d
GL_PALETTE8_RGB8_OES	GLES/gl.h	575;"	d
GL_PALETTE8_RGBA4_OES	GLES/gl.h	578;"	d
GL_PALETTE8_RGBA8_OES	GLES/gl.h	576;"	d
GL_PERSPECTIVE_CORRECTION_HINT	GLES/gl.h	371;"	d
GL_POINTS	GLES/gl.h	127;"	d
GL_POINT_DISTANCE_ATTENUATION	GLES/gl.h	268;"	d
GL_POINT_FADE_THRESHOLD_SIZE	GLES/gl.h	267;"	d
GL_POINT_SIZE	GLES/gl.h	264;"	d
GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES	GLES/gl.h	660;"	d
GL_POINT_SIZE_ARRAY_OES	GLES/gl.h	656;"	d
GL_POINT_SIZE_ARRAY_POINTER_OES	GLES/gl.h	659;"	d
GL_POINT_SIZE_ARRAY_STRIDE_OES	GLES/gl.h	658;"	d
GL_POINT_SIZE_ARRAY_TYPE_OES	GLES/gl.h	657;"	d
GL_POINT_SIZE_MAX	GLES/gl.h	266;"	d
GL_POINT_SIZE_MIN	GLES/gl.h	265;"	d
GL_POINT_SMOOTH	GLES/gl.h	219;"	d
GL_POINT_SMOOTH_HINT	GLES/gl.h	372;"	d
GL_POINT_SPRITE_OES	GLES/gl.h	652;"	d
GL_POLYGON_OFFSET_FACTOR	GLES/gl.h	327;"	d
GL_POLYGON_OFFSET_FILL	GLES/gl.h	225;"	d
GL_POLYGON_OFFSET_FILL	GLES/gl.h	326;"	d
GL_POLYGON_OFFSET_UNITS	GLES/gl.h	325;"	d
GL_POLYGON_SMOOTH_HINT	GLES/gl.h	374;"	d
GL_POSITION	GLES/gl.h	386;"	d
GL_PREVIOUS	GLES/gl.h	628;"	d
GL_PRIMARY_COLOR	GLES/gl.h	627;"	d
GL_PROJECTION	GLES/gl.h	433;"	d
GL_PROJECTION_MATRIX	GLES/gl.h	295;"	d
GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS	GLES/gl.h	362;"	d
GL_PROJECTION_STACK_DEPTH	GLES/gl.h	292;"	d
GL_QUADRATIC_ATTENUATION	GLES/gl.h	392;"	d
GL_RED_BITS	GLES/gl.h	319;"	d
GL_RENDERER	GLES/gl.h	483;"	d
GL_REPEAT	GLES/gl.h	566;"	d
GL_REPLACE	GLES/gl.h	476;"	d
GL_RESCALE_NORMAL	GLES/gl.h	224;"	d
GL_RGB	GLES/gl.h	444;"	d
GL_RGBA	GLES/gl.h	445;"	d
GL_RGB_SCALE	GLES/gl.h	623;"	d
GL_SAMPLES	GLES/gl.h	345;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	GLES/gl.h	231;"	d
GL_SAMPLE_ALPHA_TO_ONE	GLES/gl.h	232;"	d
GL_SAMPLE_BUFFERS	GLES/gl.h	344;"	d
GL_SAMPLE_COVERAGE	GLES/gl.h	233;"	d
GL_SAMPLE_COVERAGE_INVERT	GLES/gl.h	347;"	d
GL_SAMPLE_COVERAGE_VALUE	GLES/gl.h	346;"	d
GL_SCISSOR_BOX	GLES/gl.h	302;"	d
GL_SCISSOR_TEST	GLES/gl.h	221;"	d
GL_SCISSOR_TEST	GLES/gl.h	303;"	d
GL_SET	GLES/gl.h	418;"	d
GL_SHADE_MODEL	GLES/gl.h	276;"	d
GL_SHININESS	GLES/gl.h	425;"	d
GL_SHORT	GLES/gl.h	397;"	d
GL_SMOOTH	GLES/gl.h	461;"	d
GL_SMOOTH_LINE_WIDTH_RANGE	GLES/gl.h	271;"	d
GL_SMOOTH_POINT_SIZE_RANGE	GLES/gl.h	269;"	d
GL_SPECULAR	GLES/gl.h	385;"	d
GL_SPOT_CUTOFF	GLES/gl.h	389;"	d
GL_SPOT_DIRECTION	GLES/gl.h	387;"	d
GL_SPOT_EXPONENT	GLES/gl.h	388;"	d
GL_SRC0_ALPHA	GLES/gl.h	641;"	d
GL_SRC0_RGB	GLES/gl.h	638;"	d
GL_SRC1_ALPHA	GLES/gl.h	642;"	d
GL_SRC1_RGB	GLES/gl.h	639;"	d
GL_SRC2_ALPHA	GLES/gl.h	643;"	d
GL_SRC2_RGB	GLES/gl.h	640;"	d
GL_SRC_ALPHA	GLES/gl.h	150;"	d
GL_SRC_ALPHA_SATURATE	GLES/gl.h	160;"	d
GL_SRC_COLOR	GLES/gl.h	148;"	d
GL_STACK_OVERFLOW	GLES/gl.h	240;"	d
GL_STACK_UNDERFLOW	GLES/gl.h	241;"	d
GL_STATIC_DRAW	GLES/gl.h	608;"	d
GL_STENCIL_BITS	GLES/gl.h	324;"	d
GL_STENCIL_BUFFER_BIT	GLES/gl.h	119;"	d
GL_STENCIL_CLEAR_VALUE	GLES/gl.h	281;"	d
GL_STENCIL_FAIL	GLES/gl.h	284;"	d
GL_STENCIL_FUNC	GLES/gl.h	282;"	d
GL_STENCIL_PASS_DEPTH_FAIL	GLES/gl.h	285;"	d
GL_STENCIL_PASS_DEPTH_PASS	GLES/gl.h	286;"	d
GL_STENCIL_REF	GLES/gl.h	287;"	d
GL_STENCIL_TEST	GLES/gl.h	209;"	d
GL_STENCIL_VALUE_MASK	GLES/gl.h	283;"	d
GL_STENCIL_WRITEMASK	GLES/gl.h	288;"	d
GL_SUBPIXEL_BITS	GLES/gl.h	318;"	d
GL_SUBTRACT	GLES/gl.h	619;"	d
GL_TEXTURE	GLES/gl.h	434;"	d
GL_TEXTURE0	GLES/gl.h	530;"	d
GL_TEXTURE1	GLES/gl.h	531;"	d
GL_TEXTURE10	GLES/gl.h	540;"	d
GL_TEXTURE11	GLES/gl.h	541;"	d
GL_TEXTURE12	GLES/gl.h	542;"	d
GL_TEXTURE13	GLES/gl.h	543;"	d
GL_TEXTURE14	GLES/gl.h	544;"	d
GL_TEXTURE15	GLES/gl.h	545;"	d
GL_TEXTURE16	GLES/gl.h	546;"	d
GL_TEXTURE17	GLES/gl.h	547;"	d
GL_TEXTURE18	GLES/gl.h	548;"	d
GL_TEXTURE19	GLES/gl.h	549;"	d
GL_TEXTURE2	GLES/gl.h	532;"	d
GL_TEXTURE20	GLES/gl.h	550;"	d
GL_TEXTURE21	GLES/gl.h	551;"	d
GL_TEXTURE22	GLES/gl.h	552;"	d
GL_TEXTURE23	GLES/gl.h	553;"	d
GL_TEXTURE24	GLES/gl.h	554;"	d
GL_TEXTURE25	GLES/gl.h	555;"	d
GL_TEXTURE26	GLES/gl.h	556;"	d
GL_TEXTURE27	GLES/gl.h	557;"	d
GL_TEXTURE28	GLES/gl.h	558;"	d
GL_TEXTURE29	GLES/gl.h	559;"	d
GL_TEXTURE3	GLES/gl.h	533;"	d
GL_TEXTURE30	GLES/gl.h	560;"	d
GL_TEXTURE31	GLES/gl.h	561;"	d
GL_TEXTURE4	GLES/gl.h	534;"	d
GL_TEXTURE5	GLES/gl.h	535;"	d
GL_TEXTURE6	GLES/gl.h	536;"	d
GL_TEXTURE7	GLES/gl.h	537;"	d
GL_TEXTURE8	GLES/gl.h	538;"	d
GL_TEXTURE9	GLES/gl.h	539;"	d
GL_TEXTURE_2D	GLES/gl.h	203;"	d
GL_TEXTURE_BASE	ogles.h	1067;"	d
GL_TEXTURE_BINDING_2D	GLES/gl.h	328;"	d
GL_TEXTURE_COORD_ARRAY	GLES/gl.h	229;"	d
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING	GLES/gl.h	606;"	d
GL_TEXTURE_COORD_ARRAY_POINTER	GLES/gl.h	343;"	d
GL_TEXTURE_COORD_ARRAY_SIZE	GLES/gl.h	337;"	d
GL_TEXTURE_COORD_ARRAY_STRIDE	GLES/gl.h	339;"	d
GL_TEXTURE_COORD_ARRAY_TYPE	GLES/gl.h	338;"	d
GL_TEXTURE_CROP_RECT_OES	GLES/gl.h	682;"	d
GL_TEXTURE_ENV	GLES/gl.h	505;"	d
GL_TEXTURE_ENV_COLOR	GLES/gl.h	502;"	d
GL_TEXTURE_ENV_MODE	GLES/gl.h	501;"	d
GL_TEXTURE_FILTER	ogles.h	1066;"	d
GL_TEXTURE_FORMAT	ogles.h	1068;"	d
GL_TEXTURE_HEIGHT	ogles.h	1064;"	d
GL_TEXTURE_MAG_FILTER	GLES/gl.h	520;"	d
GL_TEXTURE_MATRIX	GLES/gl.h	296;"	d
GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS	GLES/gl.h	363;"	d
GL_TEXTURE_MIN_FILTER	GLES/gl.h	521;"	d
GL_TEXTURE_STACK_DEPTH	GLES/gl.h	293;"	d
GL_TEXTURE_WIDTH	ogles.h	1065;"	d
GL_TEXTURE_WRAP_S	GLES/gl.h	522;"	d
GL_TEXTURE_WRAP_T	GLES/gl.h	523;"	d
GL_TRIANGLES	GLES/gl.h	131;"	d
GL_TRIANGLE_FAN	GLES/gl.h	133;"	d
GL_TRIANGLE_STRIP	GLES/gl.h	132;"	d
GL_TRUE	GLES/gl.h	124;"	d
GL_UNPACK_ALIGNMENT	GLES/gl.h	306;"	d
GL_UNPACK_ALIGNMENT	GLES/gl.h	450;"	d
GL_UNSIGNED_BYTE	GLES/gl.h	396;"	d
GL_UNSIGNED_SHORT	GLES/gl.h	398;"	d
GL_UNSIGNED_SHORT_4_4_4_4	GLES/gl.h	455;"	d
GL_UNSIGNED_SHORT_5_5_5_1	GLES/gl.h	456;"	d
GL_UNSIGNED_SHORT_5_6_5	GLES/gl.h	457;"	d
GL_VENDOR	GLES/gl.h	482;"	d
GL_VERSION	GLES/gl.h	484;"	d
GL_VERTEX_ARRAY	GLES/gl.h	226;"	d
GL_VERTEX_ARRAY_BUFFER_BINDING	GLES/gl.h	603;"	d
GL_VERTEX_ARRAY_POINTER	GLES/gl.h	340;"	d
GL_VERTEX_ARRAY_SIZE	GLES/gl.h	329;"	d
GL_VERTEX_ARRAY_STRIDE	GLES/gl.h	331;"	d
GL_VERTEX_ARRAY_TYPE	GLES/gl.h	330;"	d
GL_VIEWPORT	GLES/gl.h	290;"	d
GL_WEIGHT_ARRAY_BUFFER_BINDING_OES	GLES/gl.h	679;"	d
GL_WEIGHT_ARRAY_OES	GLES/gl.h	667;"	d
GL_WEIGHT_ARRAY_POINTER_OES	GLES/gl.h	678;"	d
GL_WEIGHT_ARRAY_SIZE_OES	GLES/gl.h	675;"	d
GL_WEIGHT_ARRAY_STRIDE_OES	GLES/gl.h	677;"	d
GL_WEIGHT_ARRAY_TYPE_OES	GLES/gl.h	676;"	d
GL_WRITE_ONLY	GLES/gl.h	611;"	d
GL_XOR	GLES/gl.h	409;"	d
GL_ZERO	GLES/gl.h	146;"	d
GLbitfield	GLES/gl.h	/^typedef unsigned int GLbitfield;$/;"	t
GLboolean	GLES/gl.h	/^typedef unsigned char GLboolean;$/;"	t
GLbyte	GLES/gl.h	/^typedef signed char GLbyte;$/;"	t
GLclampf	GLES/gl.h	/^typedef float GLclampf;$/;"	t
GLclampx	GLES/gl.h	/^typedef int GLclampx;$/;"	t
GLenum	GLES/gl.h	/^typedef unsigned int GLenum;$/;"	t
GLfixed	GLES/gl.h	/^typedef int GLfixed;$/;"	t
GLfloat	GLES/gl.h	/^typedef float GLfloat;$/;"	t
GLfuncstat	ogles.h	/^    inline GLfuncstat()$/;"	f	struct:GLfuncstat
GLfuncstat	ogles.h	/^struct GLfuncstat$/;"	s
GLinit	offviewer.h	/^void GLinit()$/;"	f
GLint	GLES/gl.h	/^typedef int GLint;$/;"	t
GLintptr	GLES/gl.h	/^typedef int GLintptr;$/;"	t
GLshort	GLES/gl.h	/^typedef short GLshort;$/;"	t
GLsizei	GLES/gl.h	/^typedef int GLsizei;$/;"	t
GLsizeiptr	GLES/gl.h	/^typedef int GLsizeiptr;$/;"	t
GLubyte	GLES/gl.h	/^typedef unsigned char GLubyte;$/;"	t
GLuint	GLES/gl.h	/^typedef unsigned int GLuint;$/;"	t
GLushort	GLES/gl.h	/^typedef unsigned short GLushort;$/;"	t
GLvoid	GLES/gl.h	/^typedef void GLvoid;$/;"	t
GMdumper	outfile.cpp	/^FILE * GMdumper;$/;"	v
GT	glues/libtess/priorityq.c	100;"	d	file:
GenBuffers	fixed_api.cpp	/^void Context::GenBuffers(GLsizei n, GLuint *buffers)$/;"	f	class:Context
GenTextures	fixed_api.cpp	/^void Context::GenTextures(GLsizei n, GLuint *textures)$/;"	f	class:Context
GenTextures	ogles.h	/^    int         GenTextures;$/;"	m	struct:GLfuncstat
Geometry	geometry.cpp	/^Geometry::Geometry()$/;"	f	class:Geometry
Geometry	geometry.h	/^struct Geometry$/;"	s
GetBitmap	surface.h	/^    inline void * Surface :: GetBitmap()$/;"	f	class:EGL::Surface
GetBooleanv	fixed_api.cpp	/^void Context::GetBooleanv(GLenum pname, GLboolean *params)$/;"	f	class:Context
GetBufferParameteriv	fixed_api.cpp	/^void Context::GetBufferParameteriv(GLenum target, GLenum pname, GLint *params)$/;"	f	class:Context
GetClipPlanef	float_api.cpp	/^void Context::GetClipPlanef(GLenum pname, GLfloat eqn[4])$/;"	f	class:Context
GetClipPlanex	fixed_api.cpp	/^void Context::GetClipPlanex(GLenum pname, GLfixed eqn[4])$/;"	f	class:Context
GetColorBuffer	surface.h	/^    inline U32 * Surface :: GetColorBuffer()$/;"	f	class:EGL::Surface
GetConfig	surface.h	/^    inline Config * Surface :: GetConfig()$/;"	f	class:EGL::Surface
GetConfigAttrib	config.cpp	/^EGLint Config::GetConfigAttrib(EGLint attribute) const$/;"	f	class:Config
GetCurrentContext	context.cpp	/^Context* Context::GetCurrentContext()$/;"	f	class:Context
GetCurrentContext	surface.h	/^    inline Context * Surface :: GetCurrentContext()$/;"	f	class:EGL::Surface
GetCurrentStackSize	matrix_stack.h	/^        inline I32 GetCurrentStackSize() const$/;"	f	class:EGL::MatrixStack
GetError	fixed_api.cpp	/^GLenum Context::GetError(void)$/;"	f	class:Context
GetFixedv	fixed_api.cpp	/^bool Context::Context::GetFixedv(GLenum pname, GLfixed *params)$/;"	f	class:Context::Context
GetFloatv	float_api.cpp	/^void Context::GetFloatv(GLenum pname, GLfloat *params)$/;"	f	class:Context
GetHeight	surface.h	/^    inline U16 Surface :: GetHeight()$/;"	f	class:EGL::Surface
GetIntegerv	fixed_api.cpp	/^void Context::GetIntegerv(GLenum pname, GLint *params)$/;"	f	class:Context
GetIntersectData	glues/libtess/sweep.c	/^static void GetIntersectData(GLUtesselator* tess, GLUvertex* isect,$/;"	f	file:
GetLightfv	float_api.cpp	/^void Context::GetLightfv(GLenum light, GLenum pname, GLfloat *params)$/;"	f	class:Context
GetLightxv	fixed_api.cpp	/^bool Context::GetLightxv(GLenum light, GLenum pname, GLfixed *params)$/;"	f	class:Context
GetMaterialfv	float_api.cpp	/^void Context::GetMaterialfv(GLenum face, GLenum pname, GLfloat *params)$/;"	f	class:Context
GetMaterialxv	fixed_api.cpp	/^bool Context::GetMaterialxv(GLenum face, GLenum pname, GLfixed *params)$/;"	f	class:Context
GetMemoryDC	surface.h	/^    inline void * Surface :: GetMemoryDC()$/;"	f	class:EGL::Surface
GetNativeDisplay	egl.cpp	/^static NativeDisplayType GetNativeDisplay (EGLDisplay display)$/;"	f	file:
GetPixels	surface.h	/^    inline U32 Surface :: GetPixels()$/;"	f	class:EGL::Surface
GetPointerv	fixed_api.cpp	/^void Context::GetPointerv(GLenum pname, void **params)$/;"	f	class:Context
GetRect	surface.h	/^    inline const Rect& Surface :: GetRect() const$/;"	f	class:EGL::Surface
GetStackSize	matrix_stack.h	/^        inline I32 GetStackSize() const$/;"	f	class:EGL::MatrixStack
GetString	fixed_api.cpp	/^const GLubyte* Context::GetString(GLenum name)$/;"	f	class:Context
GetTexColor	rasterizer.cpp	/^U32 Rasterizer::GetTexColor(const unsigned short u, const unsigned short v)$/;"	f	class:Rasterizer
GetTexEnvfv	float_api.cpp	/^void Context::GetTexEnvfv(GLenum env, GLenum pname, GLfloat *params)$/;"	f	class:Context
GetTexEnviv	fixed_api.cpp	/^void Context::GetTexEnviv(GLenum env, GLenum pname, GLint *params)$/;"	f	class:Context
GetTexEnvxv	fixed_api.cpp	/^bool Context::GetTexEnvxv(GLenum env, GLenum pname, GLfixed *params)$/;"	f	class:Context
GetTexParameterfv	float_api.cpp	/^void Context::GetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)$/;"	f	class:Context
GetTexParameteriv	fixed_api.cpp	/^void Context::GetTexParameteriv(GLenum target, GLenum pname, GLint *params)$/;"	f	class:Context
GetTexParameterxv	fixed_api.cpp	/^void Context::GetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)$/;"	f	class:Context
GetWidth	surface.h	/^    inline U16 Surface :: GetWidth()$/;"	f	class:EGL::Surface
GotoState	glues/libtess/tess.c	/^static void GotoState(GLUtesselator* tess, enum TessState newState)$/;"	f	file:
Hint	fixed_api.cpp	/^void Context::Hint(GLenum target, GLenum mode)$/;"	f	class:Context
I16	ogles.h	/^typedef short 				I16;$/;"	t
I32	ogles.h	/^typedef int 				I32;$/;"	t
I64	ogles.h	/^typedef long long			I64;$/;"	t
I8	ogles.h	/^typedef signed char 		I8;$/;"	t
ID	ogles.h	/^    U16         ID;$/;"	m	struct:RenderState
INCLUDE	Makefile	/^INCLUDE = .$/;"	m
INPUT_SIZE	rasterizer.cpp	19;"	d	file:
InfoHeader	surface.cpp	/^        InfoHeader(U32 width, U32 height)$/;"	f	struct:__anon1::InfoHeader
InfoHeader	surface.cpp	/^    struct InfoHeader$/;"	s	namespace:__anon1	file:
InitEdgeDict	glues/libtess/sweep.c	/^static void InitEdgeDict(GLUtesselator* tess)$/;"	f	file:
InitPriorityQ	glues/libtess/sweep.c	/^static int InitPriorityQ(GLUtesselator* tess)$/;"	f	file:
InputColor	geometry.h	/^		float    		InputColor[4];$/;"	m	struct:Geometry
InputNormal	geometry.h	/^		float   		InputNormal[3];$/;"	m	struct:Geometry
InputTexCoord	geometry.h	/^		float    		InputTexCoord[4];$/;"	m	struct:Geometry
InputVertex	geometry.h	/^		float    		InputVertex[4];$/;"	m	struct:Geometry
Interpolate	geometry.cpp	/^float Geometry::Interpolate(float x0f, float x1f, float coeff4q28)$/;"	f	class:Geometry
Interpolate	glues/libtess/geom.c	/^GLfloat Interpolate(GLfloat a, GLfloat x, GLfloat b, GLfloat y)$/;"	f
Interpolate	glues/libtess/geom.c	191;"	d	file:
InterpolateVtx	geometry.cpp	/^void Geometry::InterpolateVtx(float * result, const float * inside, const float * outside, float coeff4q28)$/;"	f	class:Geometry
Intersect	surface.h	/^        static Rect Intersect(const Rect& first, const Rect& second)$/;"	f	struct:EGL::Rect
InverseM	geometry.h	/^		float    		InverseM[9]; 			 \/\/ Inversed upper model-view matrix$/;"	m	struct:Geometry
InverseUpper3x3	context.cpp	/^void Context::InverseUpper3x3(Matrix3x3& invM, Matrix3x3& result, bool rescale)$/;"	f	class:Context
IsBuffer	fixed_api.cpp	/^GLboolean Context::IsBuffer(GLuint buffer)$/;"	f	class:Context
IsEnabled	fixed_api.cpp	/^GLboolean Context::IsEnabled(GLenum cap)$/;"	f	class:Context
IsEven	glues/libtess/render.c	204;"	d	file:
IsPowerOf2	fixed_api.cpp	/^    bool IsPowerOf2(GLsizei value)$/;"	f	namespace:__anon5
IsTexture	fixed_api.cpp	/^GLboolean Context::IsTexture(GLuint texture)$/;"	f	class:Context
IsWindingInside	glues/libtess/sweep.c	/^static GLboolean IsWindingInside(GLUtesselator* tess, int n)$/;"	f	file:
KICKSMALLAREA	ogles.h	122;"	d
KillEdge	glues/libtess/mesh.c	/^static void KillEdge(GLUhalfEdge* eDel)$/;"	f	file:
KillFace	glues/libtess/mesh.c	/^static void KillFace(GLUface* fDel, GLUface* newLface)$/;"	f	file:
KillVertex	glues/libtess/mesh.c	/^static void KillVertex(GLUvertex* vDel, GLUvertex* newOrg)$/;"	f	file:
LIGHTINGDEBUG	ogles.h	109;"	d
LT	glues/libtess/priorityq.c	99;"	d	file:
Lface	glues/libtess/mesh.h	/^   GLUface*     Lface;          \/* left face *\/$/;"	m	struct:GLUhalfEdge
LiAmbient	geometry.h	/^		float    		LiAmbient[4]; 	 \/\/ acli$/;"	m	struct:Geometry
LiDiffuse	geometry.h	/^		float    		LiDiffuse[4]; 	 \/\/ dcli$/;"	m	struct:Geometry
LiSpecular	geometry.h	/^		float    		LiSpecular[4];	 \/\/ scli$/;"	m	struct:Geometry
Light	ogles.h	/^    int         Light;$/;"	m	struct:GLfuncstat
LightModel	ogles.h	/^    int         LightModel;$/;"	m	struct:GLfuncstat
LightModelAmbient	geometry.h	/^		float    		LightModelAmbient[4]; \/\/ acs$/;"	m	struct:Geometry
LightModelf	float_api.cpp	/^void Context::LightModelf(GLenum pname, GLfloat param)$/;"	f	class:Context
LightModelfv	float_api.cpp	/^void Context::LightModelfv(GLenum pname, const GLfloat *params)$/;"	f	class:Context
LightModelv	ogles.h	/^    int         LightModelv;$/;"	m	struct:GLfuncstat
LightModelx	fixed_api.cpp	/^void Context::LightModelx(GLenum pname, GLfixed param)$/;"	f	class:Context
LightModelxv	fixed_api.cpp	/^void Context::LightModelxv(GLenum pname, const GLfixed *params)$/;"	f	class:Context
Lightf	float_api.cpp	/^void Context::Lightf(GLenum light, GLenum pname, GLfloat param)$/;"	f	class:Context
Lightfv	float_api.cpp	/^void Context::Lightfv(GLenum light, GLenum pname, const GLfloat *params)$/;"	f	class:Context
Lighting	geometry.h	/^		GLboolean       Lighting;$/;"	m	struct:Geometry
Lightv	ogles.h	/^    int         Lightv;$/;"	m	struct:GLfuncstat
Lightx	fixed_api.cpp	/^void Context::Lightx(GLenum light, GLenum pname, GLfixed param)$/;"	f	class:Context
Lightxv	fixed_api.cpp	/^void Context::Lightxv(GLenum light, GLenum pname, const GLfixed *params)$/;"	f	class:Context
LineWidth	float_api.cpp	/^void Context::LineWidth(GLfloat width)$/;"	f	class:Context
LineWidthx	fixed_api.cpp	/^void Context::LineWidthx(GLfixed width)$/;"	f	class:Context
Lnext	glues/libtess/mesh.h	/^   GLUhalfEdge* Lnext;          \/* next edge CCW around left face *\/$/;"	m	struct:GLUhalfEdge
LoadBMPTexture	glm.cpp	/^static void LoadBMPTexture(GLMmaterial* material)$/;"	f	file:
LoadDIBitmap	bitmap.cpp	/^LoadDIBitmap(const char *filename, \/* I - File to load *\/$/;"	f
LoadIdentity	fixed_api.cpp	/^void Context::LoadIdentity(void)$/;"	f	class:Context
LoadIdentity	matrix_stack.cpp	/^void MatrixStack :: LoadIdentity(void)$/;"	f	class:MatrixStack
LoadIdentity	ogles.h	/^    int         LoadIdentity;$/;"	m	struct:GLfuncstat
LoadMatrix	matrix_stack.cpp	/^void MatrixStack :: LoadMatrix(const GLfloat *m)$/;"	f	class:MatrixStack
LoadMatrix	matrix_stack.cpp	/^void MatrixStack :: LoadMatrix(const Matrix4x4& matrix)$/;"	f	class:MatrixStack
LoadMatrix	ogles.h	/^    int         LoadMatrix;$/;"	m	struct:GLfuncstat
LoadMatrixf	float_api.cpp	/^void Context::LoadMatrixf(const GLfloat *m)$/;"	f	class:Context
LoadMatrixx	fixed_api.cpp	/^void Context::LoadMatrixx(const GLfixed *m)$/;"	f	class:Context
LogicOP	rasterizer.h	/^    U32     LogicOP;$/;"	m	class:Rasterizer
LogicOp	fixed_api.cpp	/^void Context::LogicOp(GLenum opcode)$/;"	f	class:Context
LogicOp	ogles.h	/^    int         LogicOp;$/;"	m	struct:GLfuncstat
LogicOpTest	ogles.h	/^struct LogicOpTest$/;"	s
LogicOpTestEn	rasterizer.h	/^    bool    DepthTestEn, AlphaTestEn, ScissorTestEn, StencilTestEn, LogicOpTestEn, MultiSampleEn;$/;"	m	class:Rasterizer
LongAxis	glues/libtess/normal.c	/^static int LongAxis(GLfloat v[3])$/;"	f	file:
Lprev	glues/libtess/mesh.h	159;"	d
M	demo.cpp	679;"	d	file:
MAJOR	version.h	/^	static const long MAJOR = 1;$/;"	m	namespace:AutoVersion
MARKED_FOR_DELETION	glues/libtess/tessmono.c	189;"	d	file:
MATRIXDEBUG	ogles.h	108;"	d
MATRIX_STACK_H_INCLUDED	matrix_stack.h	2;"	d
MAX	glues/libtess/sweep.c	87;"	d	file:
MAX	glues/libtess/sweep.c	89;"	d	file:
MAX	glues/libtess/tess.c	73;"	d	file:
MAX	glues/libtess/tess.c	74;"	d	file:
MAX_FAST_ALLOC	glues/libtess/tess.c	75;"	d	file:
MIN	glues/libtess/sweep.c	88;"	d	file:
MIN	glues/libtess/sweep.c	90;"	d	file:
MINOR	version.h	/^	static const long MINOR = 0;$/;"	m	namespace:AutoVersion
MONTH	version.h	/^	static const char MONTH[] = "07";$/;"	m	namespace:AutoVersion
M_PI	glm.h	20;"	d
Mag_filter_mode	ogles.h	/^    GLenum      Mag_filter_mode;$/;"	m	struct:TextureState
MainLoop	offviewer.h	/^void MainLoop(void)$/;"	f
MakeDormant	glues/libtess/tess.c	/^static void MakeDormant( GLUtesselator *tess )$/;"	f	file:
MakeEdge	glues/libtess/mesh.c	/^static GLUhalfEdge* MakeEdge(GLUhalfEdge* eNext)$/;"	f	file:
MakeFace	glues/libtess/mesh.c	/^static void MakeFace(GLUface* newFace, GLUhalfEdge* eOrig, GLUface* fNext)$/;"	f	file:
MakeIdentity	ogles.h	/^    inline void MakeIdentity()$/;"	f	struct:Matrix3x3
MakeIdentity	ogles.h	/^    inline void MakeIdentity()$/;"	f	struct:Matrix4x4
MakeVertex	glues/libtess/mesh.c	/^static void MakeVertex(GLUvertex* newVertex, GLUhalfEdge* eOrig, GLUvertex* vNext)$/;"	f	file:
Marked	glues/libtess/render.c	164;"	d	file:
MatAmbient	geometry.h	/^		float    		MatAmbient[4];  \/\/ acm$/;"	m	struct:Geometry
MatDiffuse	geometry.h	/^		float    		MatDiffuse[4];  \/\/ dcm$/;"	m	struct:Geometry
MatEmission	geometry.h	/^		float    		MatEmission[4]; \/\/ ecm$/;"	m	struct:Geometry
MatSpecular	geometry.h	/^		float    		MatSpecular[4]; \/\/ scm$/;"	m	struct:Geometry
Material	ogles.h	/^    inline Material()$/;"	f	struct:Material
Material	ogles.h	/^    int         Material;$/;"	m	struct:GLfuncstat
Material	ogles.h	/^struct Material$/;"	s
Materialf	float_api.cpp	/^void Context::Materialf(GLenum face, GLenum pname, GLfloat param)$/;"	f	class:Context
Materialfv	float_api.cpp	/^void Context::Materialfv(GLenum face, GLenum pname, const GLfloat *params)$/;"	f	class:Context
Materialv	ogles.h	/^    int         Materialv;$/;"	m	struct:GLfuncstat
Materialx	fixed_api.cpp	/^void Context::Materialx(GLenum face, GLenum pname, GLfixed param)$/;"	f	class:Context
Materialxv	fixed_api.cpp	/^void Context::Materialxv(GLenum face, GLenum pname, const GLfixed *params)$/;"	f	class:Context
Matrix3x3	ogles.h	/^    inline Matrix3x3()$/;"	f	struct:Matrix3x3
Matrix3x3	ogles.h	/^struct Matrix3x3$/;"	s
Matrix4x4	ogles.h	/^    inline Matrix4x4()$/;"	f	struct:Matrix4x4
Matrix4x4	ogles.h	/^struct Matrix4x4$/;"	s
MatrixMode	fixed_api.cpp	/^void Context::MatrixMode(GLenum mode)$/;"	f	class:Context
MatrixMode	ogles.h	/^    int         MatrixMode;$/;"	m	struct:GLfuncstat
MatrixMult	geometry.cpp	/^void Geometry::MatrixMult (float * matrix, float * input, float * output)$/;"	f	class:Geometry
MatrixStack	matrix_stack.cpp	/^MatrixStack :: MatrixStack(I32 maxStackElements)$/;"	f	class:MatrixStack
MatrixStack	matrix_stack.h	/^    class MatrixStack$/;"	c	namespace:EGL
MatrixTransformVec3	context.cpp	/^void Context::MatrixTransformVec3(Matrix4x4& matrix, Vector3& vec3)$/;"	f	class:Context
MatrixTransformVec4	context.cpp	/^void Context::MatrixTransformVec4(Matrix4x4& matrix, Vertex4& vec4)$/;"	f	class:Context
Max	geometry.cpp	/^float Geometry::Max(float a, float b, float c)$/;"	f	class:Geometry
Max	surface.h	/^    template<class T> T Max(const T& a, const T& b)$/;"	f	namespace:EGL
MaximumFan	glues/libtess/render.c	/^static struct FaceCount MaximumFan(GLUhalfEdge* eOrig)$/;"	f	file:
MaximumStrip	glues/libtess/render.c	/^static struct FaceCount MaximumStrip(GLUhalfEdge* eOrig)$/;"	f	file:
Mesh	offviewer.h	/^    Mesh(void) : nverts(0), verts(0), nfaces(0), faces(0) {};$/;"	f	struct:Mesh
Mesh	offviewer.h	/^typedef struct Mesh$/;"	s
Mesh	offviewer.h	/^} Mesh;$/;"	t	typeref:struct:Mesh
Min	geometry.cpp	/^float Geometry::Min(float a, float b, float c)$/;"	f	class:Geometry
Min	surface.h	/^    template<class T> T Min(const T& a, const T& b)$/;"	f	namespace:EGL
Min_filter_mode	ogles.h	/^    GLenum      Min_filter_mode;$/;"	m	struct:TextureState
MipmapArray	ogles.h	/^struct MipmapArray$/;"	s
ModelViewMat	geometry.h	/^		float    		ModelViewMat[16];$/;"	m	struct:Geometry
Mul	fixed.h	/^        inline I64 Mul(const Fixed& other) const$/;"	f	class:EGL::Fixed
Mul	fixed.h	/^        inline I64 Mul(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
Mul	fixed.h	/^        inline I64 Mul(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
MultMatrix	matrix_stack.cpp	/^void MatrixStack :: MultMatrix(const GLfloat *m)$/;"	f	class:MatrixStack
MultMatrix	matrix_stack.cpp	/^void MatrixStack :: MultMatrix(const Matrix4x4& matrix)$/;"	f	class:MatrixStack
MultMatrix	ogles.h	/^    int         MultMatrix;$/;"	m	struct:GLfuncstat
MultMatrixf	float_api.cpp	/^void Context::MultMatrixf(const GLfloat *m)$/;"	f	class:Context
MultMatrixx	fixed_api.cpp	/^void Context::MultMatrixx(const GLfixed *m)$/;"	f	class:Context
MultiSampleEn	rasterizer.h	/^    bool    DepthTestEn, AlphaTestEn, ScissorTestEn, StencilTestEn, LogicOpTestEn, MultiSampleEn;$/;"	m	class:Rasterizer
MultiTexCoord4f	float_api.cpp	/^void Context::MultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)$/;"	f	class:Context
MultiTexCoord4x	fixed_api.cpp	/^void Context::MultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)$/;"	f	class:Context
NativeDisplayType	GLES/egltypes.h	/^typedef CWindowGc *		NativeDisplayType;$/;"	t
NativeDisplayType	GLES/egltypes.h	/^typedef HDC		NativeDisplayType;$/;"	t
NativeDisplayType	GLES/egltypes.h	/^typedef void *		NativeDisplayType;$/;"	t
NativePixmapType	GLES/egltypes.h	/^typedef CFbsBitmap * 	NativePixmapType;$/;"	t
NativePixmapType	GLES/egltypes.h	/^typedef HBITMAP NativePixmapType;$/;"	t
NativePixmapType	GLES/egltypes.h	/^typedef void * 		NativePixmapType;$/;"	t
NativeWindowType	GLES/egltypes.h	/^typedef HWND	NativeWindowType;$/;"	t
NativeWindowType	GLES/egltypes.h	/^typedef RWindow *		NativeWindowType;$/;"	t
NativeWindowType	GLES/egltypes.h	/^typedef void *		NativeWindowType;$/;"	t
NearestInt	fixed.h	/^        inline GLfixed NearestInt()$/;"	f	class:EGL::Fixed
NearestInt	fixed.h	/^        inline GLfixed NearestInt()$/;"	f	class:EGL::Fixed24D8
NearestInt	fixed.h	/^        inline GLfixed NearestInt()$/;"	f	class:EGL::Fixed28D4
Node	ogles.h	/^    Node(void) : kind(0), addr(0), next(0) {};$/;"	f	struct:Node
Node	ogles.h	/^struct Node$/;"	s
Normal	ogles.h	/^    inline Normal()$/;"	f	struct:Normal
Normal	ogles.h	/^struct Normal$/;"	s
Normal3	ogles.h	/^    int         Normal3;$/;"	m	struct:GLfuncstat
Normal3f	float_api.cpp	/^void Context::Normal3f(GLfloat nx, GLfloat ny, GLfloat nz)$/;"	f	class:Context
Normal3x	fixed_api.cpp	/^void Context::Normal3x(GLfixed nx, GLfixed ny, GLfixed nz)$/;"	f	class:Context
NormalPointer	fixed_api.cpp	/^void Context::NormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)$/;"	f	class:Context
NormalPointer	ogles.h	/^    int         NormalPointer;$/;"	m	struct:GLfuncstat
Normalize	geometry.h	/^		GLboolean       Normalize;$/;"	m	struct:Geometry
Normalize	ogles.h	/^    inline void Normalize()$/;"	f	struct:Vector3
Normalize3	geometry.cpp	/^void Geometry::Normalize3(float *Vin,float *Vout) 		\/\/do inverse here$/;"	f	class:Geometry
OBJ10	main.cpp	35;"	d	file:
OBJ11	main.cpp	36;"	d	file:
OBJ12	main.cpp	37;"	d	file:
OBJ13	main.cpp	38;"	d	file:
OBJ14	main.cpp	39;"	d	file:
OBJ15	main.cpp	40;"	d	file:
OBJ16	main.cpp	41;"	d	file:
OBJ17	main.cpp	42;"	d	file:
OBJ18	main.cpp	43;"	d	file:
OBJ19	main.cpp	44;"	d	file:
OBJ23	main.cpp	45;"	d	file:
OBJ24	main.cpp	46;"	d	file:
OBJ25	main.cpp	47;"	d	file:
OBJ26	main.cpp	48;"	d	file:
OBJ27	main.cpp	49;"	d	file:
OBJ28	main.cpp	50;"	d	file:
OBJ29	main.cpp	51;"	d	file:
OBJ33	main.cpp	52;"	d	file:
OBJ4	main.cpp	33;"	d	file:
OBJ9	main.cpp	34;"	d	file:
OBJNAME	main.cpp	55;"	d	file:
OGLES_H_INCLUDED	ogles.h	2;"	d
Onext	glues/libtess/mesh.h	/^   GLUhalfEdge* Onext;          \/* next edge CCW around origin *\/$/;"	m	struct:GLUhalfEdge
Oprev	glues/libtess/mesh.h	158;"	d
Org	glues/libtess/mesh.h	/^   GLUvertex*   Org;            \/* origin vertex (Overtex too long) *\/$/;"	m	struct:GLUhalfEdge
Ortho	ogles.h	/^    int         Ortho;$/;"	m	struct:GLfuncstat
Orthof	float_api.cpp	/^void Context::Orthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)$/;"	f	class:Context
Orthox	fixed_api.cpp	/^void Context::Orthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)$/;"	f	class:Context
Ox	ogles.h	/^    GLint       Ox,Oy;$/;"	m	struct:ViewPort
Oy	ogles.h	/^    GLint       Ox,Oy;$/;"	m	struct:ViewPort
PERSPECTIVEBUG	ogles.h	112;"	d
PI	demo.cpp	39;"	d	file:
PI	demo.cpp	40;"	d	file:
PI	glues/glues_quad.c	42;"	d	file:
PI	glues/glues_quad.c	43;"	d	file:
PI	ogles.h	65;"	d
PIXEL_DATA_DEBUG	ogles.h	104;"	d
PIXEL_GENERATE_DEBUG	ogles.h	103;"	d
PIXEL_GENERATE_DEBUGfp	rasterizer.h	/^    FILE    *PIXEL_GENERATE_DEBUGfp;$/;"	m	class:Rasterizer
PI_	uglu.h	6;"	d
PLANE_SIZE	rasterizer.cpp	20;"	d	file:
PQhandle	glues/libtess/priorityq-heap.h	/^typedef long   PQhandle;$/;"	t
PQhandle	glues/libtess/priorityq-heap.h	41;"	d
PQhandle	glues/libtess/priorityq-sort.h	/^typedef PQHeapHandle PQhandle;$/;"	t
PQhandle	glues/libtess/priorityq-sort.h	41;"	d
PQhandle	glues/libtess/priorityq-sort.h	55;"	d
PQhandle	glues/libtess/priorityq.h	/^typedef PQHeapHandle PQhandle;$/;"	t
PQhandle	glues/libtess/priorityq.h	41;"	d
PQhandle	glues/libtess/priorityq.h	55;"	d
PQhandleElem	glues/libtess/priorityq-heap.h	/^} PQhandleElem;$/;"	t	typeref:struct:__anon17
PQkey	glues/libtess/priorityq-heap.h	/^typedef void*  PQkey;$/;"	t
PQkey	glues/libtess/priorityq-heap.h	40;"	d
PQkey	glues/libtess/priorityq-sort.h	/^typedef PQHeapKey PQkey;$/;"	t
PQkey	glues/libtess/priorityq-sort.h	40;"	d
PQkey	glues/libtess/priorityq-sort.h	54;"	d
PQkey	glues/libtess/priorityq.h	/^typedef PQHeapKey    PQkey;$/;"	t
PQkey	glues/libtess/priorityq.h	40;"	d
PQkey	glues/libtess/priorityq.h	54;"	d
PQnode	glues/libtess/priorityq-heap.h	/^} PQnode;$/;"	t	typeref:struct:__anon16
PRECLIPPINGBUG	ogles.h	116;"	d
PRIMASSBUG	ogles.h	114;"	d
PerFragmentOp	rasterizer.cpp	/^void Rasterizer::PerFragmentOp()$/;"	f	class:Rasterizer
PixelGenerate	rasterizer.cpp	/^void Rasterizer::PixelGenerate(float* vertexA, float* vertexB, float* vertexC)$/;"	f	class:Rasterizer
PixelStorageModes	glues/glues_mipmap.c	/^} PixelStorageModes;$/;"	t	typeref:struct:__anon15	file:
PixelStorei	fixed_api.cpp	/^void Context::PixelStorei(GLenum pname, GLint param)$/;"	f	class:Context
PlotDiskPoints	uglu.h	/^void PlotDiskPoints(GLfloat inner_radius, GLfloat outer_radius, GLshort rings, GLshort slices, GLfloat* v)$/;"	f
PlotSpherePoints	uglu.h	/^void PlotSpherePoints(GLfloat radius, GLint stacks, GLint slices, GLfloat* v, GLfloat* n)$/;"	f
PlotTubePoints	uglu.h	/^void PlotTubePoints(GLfloat radius, GLfloat height, GLshort stacks, GLshort slices, GLfloat* v, GLfloat* n)$/;"	f
PointParameterf	float_api.cpp	/^void Context::PointParameterf(GLenum pname, GLfloat param)$/;"	f	class:Context
PointParameterfv	float_api.cpp	/^void Context::PointParameterfv(GLenum pname, const GLfloat *params)$/;"	f	class:Context
PointParameterx	fixed_api.cpp	/^void Context::PointParameterx(GLenum pname, GLfixed param)$/;"	f	class:Context
PointParameterxv	fixed_api.cpp	/^void Context::PointParameterxv(GLenum pname, const GLfixed *params)$/;"	f	class:Context
PointSize	float_api.cpp	/^void Context::PointSize(GLfloat size)$/;"	f	class:Context
PointSizex	fixed_api.cpp	/^void Context::PointSizex(GLfixed size)$/;"	f	class:Context
PolygonOffset	float_api.cpp	/^void Context::PolygonOffset(GLfloat factor, GLfloat units)$/;"	f	class:Context
PolygonOffset	ogles.h	/^    int         PolygonOffset;$/;"	m	struct:GLfuncstat
PolygonOffsetx	fixed_api.cpp	/^void Context::PolygonOffsetx(GLfixed factor, GLfixed units)$/;"	f	class:Context
PopMatrix	fixed_api.cpp	/^void Context::PopMatrix(void)$/;"	f	class:Context
PopMatrix	matrix_stack.cpp	/^bool MatrixStack :: PopMatrix(void)$/;"	f	class:MatrixStack
PopMatrix	ogles.h	/^    int         PopMatrix;$/;"	m	struct:GLfuncstat
Position	geometry.h	/^		float    		Position[4]; 	 	 \/\/ Ppli$/;"	m	struct:Geometry
PriorityQ	glues/libtess/priorityq-heap.h	/^struct PriorityQ$/;"	s
PriorityQ	glues/libtess/priorityq-heap.h	/^typedef struct PriorityQ PriorityQ;$/;"	t	typeref:struct:PriorityQ
PriorityQ	glues/libtess/priorityq-heap.h	42;"	d
PriorityQ	glues/libtess/priorityq-sort.h	/^struct PriorityQ$/;"	s
PriorityQ	glues/libtess/priorityq-sort.h	/^typedef struct PriorityQ PriorityQ;$/;"	t	typeref:struct:PriorityQ
PriorityQ	glues/libtess/priorityq-sort.h	42;"	d
PriorityQ	glues/libtess/priorityq-sort.h	56;"	d
PriorityQ	glues/libtess/priorityq.h	/^struct PriorityQ$/;"	s
PriorityQ	glues/libtess/priorityq.h	/^typedef struct PriorityQ PriorityQ;$/;"	t	typeref:struct:PriorityQ
PriorityQ	glues/libtess/priorityq.h	42;"	d
PriorityQ	glues/libtess/priorityq.h	56;"	d
ProjectionMat	geometry.h	/^		float    		ProjectionMat[16];$/;"	m	struct:Geometry
PushMatrix	fixed_api.cpp	/^void Context::PushMatrix(void)$/;"	f	class:Context
PushMatrix	matrix_stack.cpp	/^bool MatrixStack :: PushMatrix(void)$/;"	f	class:MatrixStack
PushMatrix	ogles.h	/^    int         PushMatrix;$/;"	m	struct:GLfuncstat
Q24D8_2_CLAMPX	fixed.h	38;"	d
Q24D8_2_FLOAT	fixed.h	37;"	d
Q24D8_CEIL	fixed.h	34;"	d
Q24D8_DIV	fixed.h	27;"	d
Q24D8_DIVI	fixed.h	28;"	d
Q24D8_FLOOR	fixed.h	31;"	d
Q24D8_FRAC	fixed.h	32;"	d
Q24D8_FRAC_BITS	fixed.h	7;"	d
Q24D8_HALF	fixed.h	11;"	d
Q24D8_ICEIL	fixed.h	36;"	d
Q24D8_INT	fixed.h	29;"	d
Q24D8_INTP	fixed.h	30;"	d
Q24D8_INT_BITS	fixed.h	6;"	d
Q24D8_MUL	fixed.h	26;"	d
Q24D8_ONE	fixed.h	9;"	d
Q24D8_RND	fixed.h	35;"	d
Q24D8_TRUNC	fixed.h	33;"	d
Q24D8_TWO	fixed.h	10;"	d
Q24D8_ZERO	fixed.h	8;"	d
Q28D4_2_CLAMPX	fixed.h	53;"	d
Q28D4_2_FLOAT	fixed.h	52;"	d
Q28D4_CEIL	fixed.h	49;"	d
Q28D4_DIV	fixed.h	42;"	d
Q28D4_DIVI	fixed.h	43;"	d
Q28D4_FLOOR	fixed.h	46;"	d
Q28D4_FRAC	fixed.h	47;"	d
Q28D4_FRAC_BITS	fixed.h	14;"	d
Q28D4_HALF	fixed.h	18;"	d
Q28D4_ICEIL	fixed.h	51;"	d
Q28D4_INT	fixed.h	44;"	d
Q28D4_INTP	fixed.h	45;"	d
Q28D4_INT_BITS	fixed.h	13;"	d
Q28D4_MUL	fixed.h	41;"	d
Q28D4_ONE	fixed.h	16;"	d
Q28D4_RND	fixed.h	50;"	d
Q28D4_TRUNC	fixed.h	48;"	d
Q28D4_TWO	fixed.h	17;"	d
Q28D4_ZERO	fixed.h	15;"	d
RANDOM_TEST	ogles.h	88;"	d
RANDOM_TEST_TIME	ogles.h	89;"	d
RANDOM_UINT_MAX	demo.cpp	41;"	d	file:
RASTERIZER_H_INCLUDED	rasterizer.h	13;"	d
RC_FILEVERSION	version.h	24;"	d
RC_FILEVERSION_STRING	version.h	25;"	d
REVISION	version.h	/^	static const long REVISION = 0;$/;"	m	namespace:AutoVersion
RMdumper	outfile.cpp	/^FILE * RMdumper;$/;"	v
RUN_LENGTH	demo.cpp	38;"	d	file:
Rasterizer	rasterizer.cpp	/^Rasterizer::Rasterizer()$/;"	f	class:Rasterizer
Rasterizer	rasterizer.h	/^class Rasterizer$/;"	c
ReadOffFile	offviewer.h	/^Mesh * ReadOffFile(const char *filename)$/;"	f
ReadPixels	fixed_api.cpp	/^void Context::ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)$/;"	f	class:Context
RealInterpolate	glues/libtess/geom.c	184;"	d	file:
RebuildMatrices	context.cpp	/^void Context::RebuildMatrices(void)$/;"	f	class:Context
RecordError	context.cpp	/^void Context::RecordError(GLenum error)$/;"	f	class:Context
Rect	surface.h	/^        Rect(GLint _x = 0, GLint _y = 0, GLsizei _width = 0, GLsizei _height = 0):$/;"	f	struct:EGL::Rect
Rect	surface.h	/^    struct Rect$/;"	s	namespace:EGL
RegionAbove	glues/libtess/sweep.h	75;"	d
RegionBelow	glues/libtess/sweep.h	74;"	d
RemoveDegenerateEdges	glues/libtess/sweep.c	/^static void RemoveDegenerateEdges(GLUtesselator* tess)$/;"	f	file:
RemoveDegenerateFaces	glues/libtess/sweep.c	/^static int RemoveDegenerateFaces(GLUmesh* mesh)$/;"	f	file:
RenderFan	glues/libtess/render.c	/^static void RenderFan(GLUtesselator* tess, GLUhalfEdge* e, long size)$/;"	f	file:
RenderLonelyTriangles	glues/libtess/render.c	/^static void RenderLonelyTriangles(GLUtesselator* tess, GLUface* f)$/;"	f	file:
RenderMaximumFaceGroup	glues/libtess/render.c	/^static void RenderMaximumFaceGroup(GLUtesselator* tess, GLUface* fOrig)$/;"	f	file:
RenderObject	offviewer.h	/^void RenderObject(void)$/;"	f
RenderState	ogles.h	/^    RenderState(void) : ID(0), Value(0), next(0) {};$/;"	f	struct:RenderState
RenderState	ogles.h	/^struct RenderState$/;"	s
RenderStrip	glues/libtess/render.c	/^static void RenderStrip(GLUtesselator* tess, GLUhalfEdge* e, long size)$/;"	f	file:
RenderTriangle	glues/libtess/render.c	/^static void RenderTriangle(GLUtesselator* tess, GLUhalfEdge* e, long size)$/;"	f	file:
RequireState	glues/libtess/tess.c	140;"	d	file:
RescaleNormal	geometry.h	/^		GLboolean       RescaleNormal;$/;"	m	struct:Geometry
Rface	glues/libtess/mesh.h	155;"	d
Rnext	glues/libtess/mesh.h	163;"	d
Rotate	ogles.h	/^    int         Rotate;$/;"	m	struct:GLfuncstat
Rotatef	float_api.cpp	/^void Context::Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)$/;"	f	class:Context
Rotatex	fixed_api.cpp	/^void Context::Rotatex(GLfixed fx_angle, GLfixed fx_x, GLfixed fx_y, GLfixed fx_z)$/;"	f	class:Context
Round	fixed.h	/^        inline I32 Round()$/;"	f	class:EGL::Fixed
Round	fixed.h	/^        inline I32 Round()$/;"	f	class:EGL::Fixed24D8
Round	fixed.h	/^        inline I32 Round()$/;"	f	class:EGL::Fixed28D4
Rprev	glues/libtess/mesh.h	161;"	d
SCAN_ALGO_DEBUG	ogles.h	105;"	d
SCAN_ALGO_DEBUGfp	rasterizer.h	/^    FILE    *SCAN_ALGO_DEBUGfp;$/;"	m	class:Rasterizer
SDL_CYLINDER_H_INCLUDED	sdl_cylinder.h	2;"	d
SENTINEL_COORD	glues/libtess/sweep.c	1408;"	d	file:
SHAPES_H_INCLUDED	shapes.h	26;"	d
SIGN_INCONSISTENT	glues/libtess/render.c	404;"	d	file:
SN_and_TN	geometry.h	/^  unsigned int      SN_and_TN;$/;"	m	struct:tileData
STATUS	version.h	/^	static const char STATUS[] = "Alpha";$/;"	m	namespace:AutoVersion
STATUS_SHORT	version.h	/^	static const char STATUS_SHORT[] = "a";$/;"	m	namespace:AutoVersion
SUPERSHAPE_COUNT	shapes.h	56;"	d
SUPERSHAPE_PARAMS	shapes.h	29;"	d
SURFACE_H_INCLUDED	surface.h	2;"	d
S_UNIT_X	glues/libtess/normal.c	190;"	d	file:
S_UNIT_X	glues/libtess/normal.c	203;"	d	file:
S_UNIT_X	glues/libtess/normal.c	206;"	d	file:
S_UNIT_Y	glues/libtess/normal.c	191;"	d	file:
S_UNIT_Y	glues/libtess/normal.c	204;"	d	file:
S_UNIT_Y	glues/libtess/normal.c	207;"	d	file:
SampleCoverage	float_api.cpp	/^void Context::SampleCoverage(GLclampf value, GLboolean invert)$/;"	f	class:Context
SampleCoveragex	fixed_api.cpp	/^void Context::SampleCoveragex(GLclampx value, GLboolean invert)$/;"	f	class:Context
Save	surface.cpp	/^bool Surface::Save(const TCHAR * filename)$/;"	f	class:Surface
Save	surface.cpp	/^bool Surface::Save(const char * filename)$/;"	f	class:Surface
SaveDIBitmap	bitmap.cpp	/^SaveDIBitmap(const char *filename, \/* I - File to load *\/$/;"	f
Scale	ogles.h	/^    int         Scale;$/;"	m	struct:GLfuncstat
Scalef	float_api.cpp	/^void Context::Scalef(GLfloat x, GLfloat y, GLfloat z)$/;"	f	class:Context
Scalex	fixed_api.cpp	/^void Context::Scalex(GLfixed fx_x, GLfixed fx_y, GLfixed fx_z)$/;"	f	class:Context
SciBottom	rasterizer.h	/^    U32     SciBottom;$/;"	m	class:Rasterizer
SciHeight	rasterizer.h	/^    U32     SciHeight;$/;"	m	class:Rasterizer
SciLeft	rasterizer.h	/^    U32     SciLeft;$/;"	m	class:Rasterizer
SciWidth	rasterizer.h	/^    U32     SciWidth;$/;"	m	class:Rasterizer
Scissor	fixed_api.cpp	/^void Context::Scissor(GLint x, GLint y, GLsizei width, GLsizei height)$/;"	f	class:Context
Scissor	ogles.h	/^    int         Scissor;$/;"	m	struct:GLfuncstat
ScissorTest	ogles.h	/^struct ScissorTest$/;"	s
ScissorTestEn	rasterizer.h	/^    bool    DepthTestEn, AlphaTestEn, ScissorTestEn, StencilTestEn, LogicOpTestEn, MultiSampleEn;$/;"	m	class:Rasterizer
SetConfigAttrib	config.cpp	/^void Config::SetConfigAttrib(EGLint attribute, EGLint value)$/;"	f	class:Config
SetCurrent	context.cpp	/^void Context::SetCurrent(bool current)$/;"	f	class:Context
SetCurrentContext	context.cpp	/^void Context::SetCurrentContext(Context* context)$/;"	f	class:Context
SetCurrentContext	surface.cpp	/^void Surface::SetCurrentContext(Context * context)$/;"	f	class:Surface
SetDrawSurface	context.cpp	/^void Context::SetDrawSurface(EGL::Surface * surface)$/;"	f	class:Context
SetReadSurface	context.cpp	/^void Context::SetReadSurface(EGL::Surface * surface)$/;"	f	class:Context
SetStateReg	rasterizer.cpp	/^void Rasterizer::SetStateReg(unsigned short id, unsigned int value)$/;"	f	class:Rasterizer
ShadeModel	fixed_api.cpp	/^void Context::ShadeModel(GLenum mode)$/;"	f	class:Context
ShadeModel	geometry.h	/^		GLenum   		ShadeModel;\/\/{GL_SMOOTH=0,GL_FLAT};$/;"	m	struct:Geometry
ShadeModel	ogles.h	/^    int         ShadeModel;$/;"	m	struct:GLfuncstat
Shininess	geometry.h	/^		float    		Shininess; 		  \/\/ srm$/;"	m	struct:Geometry
Sleep	gltools_TGA_rev.cpp	35;"	d	file:
Source	ogles.h	/^    inline Source()$/;"	f	struct:Source
Source	ogles.h	/^struct Source$/;"	s
Splice	glues/libtess/mesh.c	/^static void Splice(GLUhalfEdge* a, GLUhalfEdge* b)$/;"	f	file:
SpliceMergeVertices	glues/libtess/sweep.c	/^static void SpliceMergeVertices(GLUtesselator* tess, GLUhalfEdge *e1, GLUhalfEdge* e2)$/;"	f	file:
Spot	geometry.h	/^		float 	 		Spot;$/;"	m	struct:Geometry
StateIO	drv_impl.cpp	/^int         StateIO = 0;$/;"	v
StateNodeSize	drv_impl.cpp	/^int         StateNodeSize = 0;$/;"	v
Statistics	ogles.h	/^    inline Statistics()$/;"	f	struct:Statistics
Statistics	ogles.h	/^struct Statistics$/;"	s
StenDfail	rasterizer.h	/^    U32     StenDfail;$/;"	m	class:Rasterizer
StenDpass	rasterizer.h	/^    U32     StenDpass;$/;"	m	class:Rasterizer
StenMask	rasterizer.h	/^    U32     StenMask;$/;"	m	class:Rasterizer
StenMode	rasterizer.h	/^    U32     StenMode;$/;"	m	class:Rasterizer
StenRef	rasterizer.h	/^    float   StenRef;$/;"	m	class:Rasterizer
StenSfail	rasterizer.h	/^    U32     StenSfail;$/;"	m	class:Rasterizer
StencilFunc	fixed_api.cpp	/^void Context::StencilFunc(GLenum func, GLint ref, GLuint mask)$/;"	f	class:Context
StencilFunc	ogles.h	/^    int         StencilFunc;$/;"	m	struct:GLfuncstat
StencilMask	fixed_api.cpp	/^void Context::StencilMask(GLuint mask)$/;"	f	class:Context
StencilOp	fixed_api.cpp	/^void Context::StencilOp(GLenum fail, GLenum zfail, GLenum zpass)$/;"	f	class:Context
StencilOp	ogles.h	/^    int         StencilOp;$/;"	m	struct:GLfuncstat
StencilTest	ogles.h	/^struct StencilTest$/;"	s
StencilTestEn	rasterizer.h	/^    bool    DepthTestEn, AlphaTestEn, ScissorTestEn, StencilTestEn, LogicOpTestEn, MultiSampleEn;$/;"	m	class:Rasterizer
String	glues/glues_error.c	/^   const char* String;$/;"	m	struct:token_string	file:
Surface	surface.cpp	/^Surface::Surface(const Config & config, HDC hdc)$/;"	f	class:Surface
Surface	surface.h	/^    class Surface$/;"	c	namespace:EGL
Swap	glues/libtess/geom.c	215;"	d	file:
Swap	glues/libtess/priorityq.c	101;"	d	file:
SweepEvent	glues/libtess/sweep.c	/^static void SweepEvent(GLUtesselator* tess, GLUvertex* vEvent)$/;"	f	file:
Sym	glues/libtess/mesh.h	/^   GLUhalfEdge* Sym;            \/* same edge, opposite direction *\/$/;"	m	struct:GLUhalfEdge
T	glm.cpp	21;"	d	file:
T	main.cpp	63;"	d	file:
TCHAR	GLES/egltypes.h	/^typedef char 		TCHAR;$/;"	t
TColorBuffer	rasterizer.h	/^    U8      TColorBuffer[TILEHEIGHT*2][TILEWIDTH*2][4];$/;"	m	class:Rasterizer
TDepthBuffer	rasterizer.h	/^    float   TDepthBuffer[TILEHEIGHT*2][TILEWIDTH*2];$/;"	m	class:Rasterizer
TESS_MAX_CACHE	glues/libtess/tess.h	52;"	d
TEXDEBUG	ogles.h	102;"	d
TEXDEBUGfp	rasterizer.h	/^    FILE    *TEXDEBUGfp;$/;"	m	class:Rasterizer
TEXTRANDEBUG	ogles.h	110;"	d
TEXTURE_NUMBER	main.cpp	62;"	d	file:
TEX_CACHE_BLOCK_SIZE	ogles.h	78;"	d
TEX_CACHE_BLOCK_SIZE_ROOT	ogles.h	77;"	d
TEX_CACHE_BLOCK_SIZE_ROOT_LOG	ogles.h	76;"	d
TEX_CACHE_ENTRY_X	ogles.h	80;"	d
TEX_CACHE_ENTRY_X_LOG	ogles.h	79;"	d
TEX_CACHE_ENTRY_Y	ogles.h	82;"	d
TEX_CACHE_ENTRY_Y_LOG	ogles.h	81;"	d
TEXfp	rasterizer.h	/^    U8      *TEXfp;$/;"	m	class:Rasterizer
TGAHEADER	gltools_TGA_rev.cpp	/^} TGAHEADER;$/;"	t	typeref:struct:__anon11	file:
TILEDIVIDERDEG	ogles.h	120;"	d
TILEHEIGHT	ogles.h	74;"	d
TILELINE	ogles.h	87;"	d
TILEWIDTH	ogles.h	73;"	d
TILE_COUNT	ogles.h	142;"	d
TOLERANCE_NONZERO	glues/libtess/sweep.c	1168;"	d	file:
TRANDEBUG	ogles.h	107;"	d
TRUE	glues/libtess/mesh.c	40;"	d	file:
TRUE	glues/libtess/normal.c	41;"	d	file:
TRUE	glues/libtess/render.c	41;"	d	file:
TRUE	glues/libtess/sweep.c	48;"	d	file:
TRUE	glues/libtess/tess.c	49;"	d	file:
T_DORMANT	glues/libtess/tess.h	/^enum TessState {T_DORMANT, T_IN_POLYGON, T_IN_CONTOUR};$/;"	e	enum:TessState
T_IN_CONTOUR	glues/libtess/tess.h	/^enum TessState {T_DORMANT, T_IN_POLYGON, T_IN_CONTOUR};$/;"	e	enum:TessState
T_IN_POLYGON	glues/libtess/tess.h	/^enum TessState {T_DORMANT, T_IN_POLYGON, T_IN_CONTOUR};$/;"	e	enum:TessState
TessState	glues/libtess/tess.h	/^enum TessState {T_DORMANT, T_IN_POLYGON, T_IN_CONTOUR};$/;"	g
TestEGLError	main.cpp	/^bool TestEGLError(HWND hWnd, char* pszLocation)$/;"	f
TexCache	rasterizer.h	/^    }TexCache;$/;"	m	class:Rasterizer	typeref:struct:Rasterizer::__anon12
TexCacheColdMiss	rasterizer.h	/^        int TexCacheColdMiss;$/;"	m	struct:Rasterizer::__anon12
TexCacheHit	rasterizer.h	/^        int TexCacheHit;$/;"	m	struct:Rasterizer::__anon12
TexCacheMiss	rasterizer.h	/^        int TexCacheMiss;$/;"	m	struct:Rasterizer::__anon12
TexCoordPointer	fixed_api.cpp	/^void Context::TexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)$/;"	f	class:Context
TexCoordPointer	ogles.h	/^    int         TexCoordPointer;$/;"	m	struct:GLfuncstat
TexCoords	geometry.h	/^		float 	 		TexCoords[4];$/;"	m	struct:Geometry
TexEnv	ogles.h	/^    int         TexEnv;$/;"	m	struct:GLfuncstat
TexEnvColor	rasterizer.h	/^    U8      TexEnvColor[4];$/;"	m	class:Rasterizer
TexEnvMode	rasterizer.h	/^    U32     TexEnvMode;$/;"	m	class:Rasterizer
TexEnvf	float_api.cpp	/^void Context::TexEnvf(GLenum target, GLenum pname, GLfloat param)$/;"	f	class:Context
TexEnvfv	float_api.cpp	/^void Context::TexEnvfv(GLenum target, GLenum pname, const GLfloat *params)$/;"	f	class:Context
TexEnvv	ogles.h	/^    int         TexEnvv;$/;"	m	struct:GLfuncstat
TexEnvx	fixed_api.cpp	/^void Context::TexEnvx(GLenum target, GLenum pname, GLfixed param)$/;"	f	class:Context
TexEnvxv	fixed_api.cpp	/^void Context::TexEnvxv(GLenum target, GLenum pname, const GLfixed *params)$/;"	f	class:Context
TexFilterMode	rasterizer.h	/^    U32     TexFilterMode;  \/\/Texture filtering mode$/;"	m	class:Rasterizer
TexHeight	rasterizer.h	/^    U32     TexHeight,TexWidth;$/;"	m	class:Rasterizer
TexImage2D	fixed_api.cpp	/^void Context::TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)$/;"	f	class:Context
TexImage2D	ogles.h	/^    int         TexImage2D;$/;"	m	struct:GLfuncstat
TexImgPtr	ogles.h	/^typedef TextureImage * TexImgPtr;$/;"	t
TexMappingEn	rasterizer.h	/^    bool    TexMappingEn,BlendingEn,FogEn;$/;"	m	class:Rasterizer
TexParameter	ogles.h	/^    int         TexParameter;$/;"	m	struct:GLfuncstat
TexParameterf	float_api.cpp	/^void Context::TexParameterf(GLenum target, GLenum pname, GLfloat param)$/;"	f	class:Context
TexParameteri	float_api.cpp	/^void Context::TexParameteri(GLenum target, GLenum pname, GLint param)$/;"	f	class:Context
TexParameterx	fixed_api.cpp	/^void Context::TexParameterx(GLenum target, GLenum pname, GLfixed param)$/;"	f	class:Context
TexSptr	ogles.h	/^typedef TextureState * TexSptr;$/;"	t
TexSubImage2D	fixed_api.cpp	/^void Context::TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)$/;"	f	class:Context
TexWidth	rasterizer.h	/^    U32     TexHeight,TexWidth;$/;"	m	class:Rasterizer
TexWrapModeS	rasterizer.h	/^    U32     TexWrapModeS,TexWrapModeT;$/;"	m	class:Rasterizer
TexWrapModeT	rasterizer.h	/^    U32     TexWrapModeS,TexWrapModeT;$/;"	m	class:Rasterizer
TextureCoord	ogles.h	/^    inline TextureCoord()$/;"	f	struct:TextureCoord
TextureCoord	ogles.h	/^struct TextureCoord$/;"	s
TextureImage	ogles.h	/^struct TextureImage$/;"	s
TextureInternalFormat	rasterizer.h	/^    U32     TextureInternalFormat;$/;"	m	class:Rasterizer
TextureMapping	rasterizer.cpp	/^void Rasterizer::TextureMapping()$/;"	f	class:Rasterizer
TextureMat	geometry.h	/^		float    		TextureMat[16];$/;"	m	struct:Geometry
TextureState	ogles.h	/^    inline TextureState()$/;"	f	struct:TextureState
TextureState	ogles.h	/^struct TextureState$/;"	s
TileNodeSize	drv_impl.cpp	/^int         TileNodeSize = 0;$/;"	v
ToInt	fixed.h	/^        inline int ToInt()$/;"	f	class:EGL::Fixed
ToInt	fixed.h	/^        inline int ToInt()$/;"	f	class:EGL::Fixed24D8
ToInt	fixed.h	/^        inline int ToInt()$/;"	f	class:EGL::Fixed28D4
Toggle	context.cpp	/^void Context::Toggle(GLenum cap, bool value)$/;"	f	class:Context
Token	glues/glues_error.c	/^   GLuint Token;$/;"	m	struct:token_string	file:
TopLeftRegion	glues/libtess/sweep.c	/^static ActiveRegion* TopLeftRegion(ActiveRegion* reg)$/;"	f	file:
TopRightRegion	glues/libtess/sweep.c	/^static ActiveRegion* TopRightRegion(ActiveRegion* reg)$/;"	f	file:
Total	ogles.h	/^    int         Total;$/;"	m	struct:GLfuncstat
TransEval	glues/libtess/geom.h	62;"	d
TransLeq	glues/libtess/geom.h	60;"	d
TransSign	glues/libtess/geom.h	63;"	d
Translate	ogles.h	/^    int         Translate;$/;"	m	struct:GLfuncstat
Translatef	float_api.cpp	/^void Context::Translatef(GLfloat x, GLfloat y, GLfloat z)$/;"	f	class:Context
Translatex	fixed_api.cpp	/^void Context::Translatex(GLfixed fx_x, GLfixed fx_y, GLfixed fx_z)$/;"	f	class:Context
TriVtxA	geometry.h	/^		float 	 		TriVtxA[16] , TriVtxB[16] , TriVtxC[16] ;$/;"	m	struct:Geometry
TriVtxABCBUG	ogles.h	115;"	d
TriVtxB	geometry.h	/^		float 	 		TriVtxA[16] , TriVtxB[16] , TriVtxC[16] ;$/;"	m	struct:Geometry
TriVtxC	geometry.h	/^		float 	 		TriVtxA[16] , TriVtxB[16] , TriVtxC[16] ;$/;"	m	struct:Geometry
TriangleCounter	geometry.h	/^		int   	 		TriangleCounter;$/;"	m	struct:Geometry
TriangleIO	drv_impl.cpp	/^int         TriangleIO = 0;$/;"	v
TriangleReady	geometry.h	/^		GLboolean       TriangleReady;$/;"	m	struct:Geometry
TriangleSetup	rasterizer.cpp	/^void Rasterizer::TriangleSetup(float* vertexA, float* vertexB, float* vertexC)$/;"	f	class:Rasterizer
Type_Widget	glues/glues_mipmap.c	/^} Type_Widget;$/;"	t	typeref:union:__anon14	file:
U16	ogles.h	/^typedef unsigned short 		U16;$/;"	t
U32	ogles.h	/^typedef unsigned int 		U32;$/;"	t
U64	ogles.h	/^typedef unsigned long long	U64;$/;"	t
U8	ogles.h	/^typedef unsigned char 		U8;$/;"	t
UBUNTU_VERSION_STYLE	version.h	/^	static const double UBUNTU_VERSION_STYLE = 8.07;$/;"	m	namespace:AutoVersion
UGLU_H_INCLUDED	uglu.h	2;"	d
UGdumper	outfile.cpp	/^FILE * UGdumper;$/;"	v
USE_PIXELSTAMP	ogles.h	90;"	d
UpdateInverseModelViewMatrix	context.cpp	/^void Context::UpdateInverseModelViewMatrix(void)$/;"	f	class:Context
VECTOR3	demo.cpp	/^} VECTOR3;$/;"	t	typeref:struct:__anon4	file:
VERBUFFDEBUG	ogles.h	119;"	d
VERSION_H	version.h	2;"	d
VIEWPORTBUG	ogles.h	118;"	d
VPFAR	ogles.h	71;"	d
VPNEAR	ogles.h	70;"	d
VTXINDEXBUG	ogles.h	113;"	d
Value	ogles.h	/^    U32         Value;$/;"	m	struct:RenderState
Vector3	ogles.h	/^    inline Vector3()$/;"	f	struct:Vector3
Vector3	ogles.h	/^struct Vector3$/;"	s
VectorDot	geometry.cpp	/^float Geometry::VectorDot ( float * v1, float * v2 )$/;"	f	class:Geometry
VertCCW	glues/libtess/geom.h	72;"	d
VertEq	glues/libtess/geom.h	45;"	d
VertEq	glues/libtess/geom.h	50;"	d
VertL1dist	glues/libtess/geom.h	70;"	d
VertLeq	glues/libtess/geom.h	46;"	d
VertLeq	glues/libtess/geom.h	51;"	d
Vertex	offviewer.h	/^typedef struct Vertex$/;"	s
Vertex	offviewer.h	/^} Vertex;$/;"	t	typeref:struct:Vertex
Vertex3	ogles.h	/^    inline Vertex3()$/;"	f	struct:Vertex3
Vertex3	ogles.h	/^struct Vertex3$/;"	s
Vertex4	ogles.h	/^    inline Vertex4()$/;"	f	struct:Vertex4
Vertex4	ogles.h	/^struct Vertex4$/;"	s
VertexCount	drv_impl.cpp	/^int         VertexCount = 0;$/;"	v
VertexDATA	geometry.h	/^  float  VertexDATA[36];$/;"	m	struct:triangleData
VertexPointer	fixed_api.cpp	/^void Context::VertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)$/;"	f	class:Context
VertexPointer	ogles.h	/^    int         VertexPointer;$/;"	m	struct:GLfuncstat
VertexWeights	glues/libtess/sweep.c	/^static void VertexWeights(GLUvertex* isect, GLUvertex* org, GLUvertex* dst,$/;"	f	file:
ViewPort	ogles.h	/^    inline ViewPort()$/;"	f	struct:ViewPort
ViewPort	ogles.h	/^struct ViewPort$/;"	s
Viewport	fixed_api.cpp	/^void Context::Viewport(GLint x, GLint y, GLsizei width, GLsizei height)$/;"	f	class:Context
Viewport	geometry.cpp	/^void Geometry::Viewport(void)$/;"	f	class:Geometry
Viewport	ogles.h	/^    int         Viewport;$/;"	m	struct:GLfuncstat
ViewportOrigin	geometry.h	/^		float    		ViewportOrigin[2]; \/\/ Ox=x+w\/2, Oy=y+h\/2$/;"	m	struct:Geometry
ViewportScale	geometry.h	/^		float    		ViewportScale[2];  \/\/ w\/2, h\/2$/;"	m	struct:Geometry
WIN32_LEAN_AND_MEAN	GLES/egltypes.h	24;"	d
WIN32_LEAN_AND_MEAN	GLES/gl.h	49;"	d
WINDOW_BPP	app.h	37;"	d
WINDOW_DEFAULT_HEIGHT	app.h	35;"	d
WINDOW_DEFAULT_HEIGHT	ogles.h	69;"	d
WINDOW_DEFAULT_WIDTH	app.h	34;"	d
WINDOW_DEFAULT_WIDTH	ogles.h	68;"	d
WINDOW_HEIGHT	sdl_cylinder.cpp	15;"	d	file:
WINDOW_HEIGHT	sdl_disk.c	19;"	d	file:
WINDOW_HEIGHT	sdl_mipmap.c	19;"	d	file:
WINDOW_HEIGHT	sdl_sphere.c	19;"	d	file:
WINDOW_WIDTH	sdl_cylinder.cpp	14;"	d	file:
WINDOW_WIDTH	sdl_disk.c	18;"	d	file:
WINDOW_WIDTH	sdl_mipmap.c	18;"	d	file:
WINDOW_WIDTH	sdl_sphere.c	18;"	d	file:
WalkDirtyRegions	glues/libtess/sweep.c	/^static void WalkDirtyRegions(GLUtesselator* tess, ActiveRegion* regUp)$/;"	f	file:
WinMain	main.cpp	/^int WINAPI WinMain(HINSTANCE hInstance,$/;"	f
WndProc	main.cpp	/^LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f
YEAR	version.h	/^	static const char YEAR[] = "2008";$/;"	m	namespace:AutoVersion
_BITMAPFILEHEADER	bitmap.h	/^    } _BITMAPFILEHEADER;$/;"	t	typeref:struct:__anon7
_BITMAPINFO	bitmap.h	/^    } _BITMAPINFO;$/;"	t	typeref:struct:__anon10
_BITMAPINFOHEADER	bitmap.h	/^    } _BITMAPINFOHEADER;$/;"	t	typeref:struct:__anon8
_BITMAP_H_	bitmap.h	8;"	d
_GLMgroup	glm.h	/^typedef struct _GLMgroup {$/;"	s
_GLMmaterial	glm.h	/^typedef struct _GLMmaterial$/;"	s
_GLMmodel	glm.h	/^typedef struct _GLMmodel {$/;"	s
_GLMnode	glm.cpp	/^typedef struct _GLMnode$/;"	s	file:
_GLMtextures	glm.h	/^typedef struct _GLMtextures$/;"	s
_GLMtriangle	glm.h	/^typedef struct _GLMtriangle {$/;"	s
_GLUfuncptr	glues/glu.h	/^typedef void (APIENTRYP _GLUfuncptr)();$/;"	t
_GLUfuncptr	glues/glues.h	/^typedef void (APIENTRYP _GLUfuncptr)();$/;"	t
_GLUfuncptr	glues/glues_quad.h	/^typedef void (APIENTRY * _GLUfuncptr)();$/;"	t
_GLfuncptr	GLES/gl.h	/^typedef void (*_GLfuncptr)();$/;"	t
_INT_2_24D8	fixed.h	39;"	d
_INT_2_28D4	fixed.h	54;"	d
_RGBQUAD	bitmap.h	/^    } _RGBQUAD;$/;"	t	typeref:struct:__anon9
_X_ADD	fixed.h	23;"	d
_X_MINF	fixed.h	21;"	d
_X_PINF	fixed.h	20;"	d
_X_SUB	fixed.h	24;"	d
__GLUES_MIPMAP_H__	glues/glues_mipmap.h	34;"	d
__GLUES_PROJECT_H__	glues/glues_project.h	34;"	d
__GLUES_QUAD_H__	glues/glues_quad.h	34;"	d
__GLUES_REGISTRY_H__	glues/glues_error.h	34;"	d
__GLUES_REGISTRY_H__	glues/glues_registry.h	34;"	d
__GLU_INIT_SWAP_IMAGE	glues/glues_mipmap.c	904;"	d	file:
__GLU_SWAP_2_BYTES	glues/glues_mipmap.c	208;"	d	file:
__GLU_SWAP_4_BYTES	glues/glues_mipmap.c	211;"	d	file:
__GLU_SWAP_IMAGE	glues/glues_mipmap.c	905;"	d	file:
__GL_Det2X2	ogles.h	177;"	d
__GL_FLOAT	ogles.h	146;"	d
__GL_FLOAT_2_F	ogles.h	174;"	d
__GL_FLOAT_2_S	ogles.h	182;"	d
__GL_FLOAT_2_X	ogles.h	179;"	d
__GL_F_2_CLAMPF	ogles.h	180;"	d
__GL_F_2_FLOAT	ogles.h	175;"	d
__GL_F_ADD	ogles.h	168;"	d
__GL_F_DEG_2_RAD	ogles.h	173;"	d
__GL_F_DIV	ogles.h	170;"	d
__GL_F_HALF	ogles.h	167;"	d
__GL_F_INT	ogles.h	171;"	d
__GL_F_MUL	ogles.h	169;"	d
__GL_F_ONE	ogles.h	165;"	d
__GL_F_TWO	ogles.h	166;"	d
__GL_F_ZERO	ogles.h	164;"	d
__GL_INT_2_F	ogles.h	176;"	d
__GL_INT_2_X	ogles.h	200;"	d
__GL_S_2_FLOAT	ogles.h	183;"	d
__GL_X_2PI	ogles.h	202;"	d
__GL_X_2_CLAMPX	ogles.h	199;"	d
__GL_X_2_F	ogles.h	172;"	d
__GL_X_2_FLOAT	ogles.h	198;"	d
__GL_X_ADD	ogles.h	185;"	d
__GL_X_CEIL	ogles.h	195;"	d
__GL_X_DEG_2_RAD	ogles.h	204;"	d
__GL_X_DIV	ogles.h	188;"	d
__GL_X_DIVI	ogles.h	189;"	d
__GL_X_ENUM	ogles.h	205;"	d
__GL_X_FLOOR	ogles.h	192;"	d
__GL_X_FRAC	ogles.h	193;"	d
__GL_X_FRAC_BITS	ogles.h	153;"	d
__GL_X_HALF	ogles.h	158;"	d
__GL_X_ICEIL	ogles.h	197;"	d
__GL_X_INT	ogles.h	190;"	d
__GL_X_INTP	ogles.h	191;"	d
__GL_X_INT_BITS	ogles.h	154;"	d
__GL_X_MINF	ogles.h	160;"	d
__GL_X_MUL	ogles.h	187;"	d
__GL_X_ONE	ogles.h	156;"	d
__GL_X_PINF	ogles.h	159;"	d
__GL_X_R2PI	ogles.h	203;"	d
__GL_X_RND	ogles.h	196;"	d
__GL_X_SUB	ogles.h	186;"	d
__GL_X_TRUNC	ogles.h	194;"	d
__GL_X_TWO	ogles.h	157;"	d
__GL_X_ZERO	ogles.h	155;"	d
__USE_SDL_GLES__	sdl_disk.c	14;"	d	file:
__USE_SDL_GLES__	sdl_mipmap.c	14;"	d	file:
__USE_SDL_GLES__	sdl_sphere.c	14;"	d	file:
__cosx	uglu.h	/^GLfixed __cosx(GLfixed a)$/;"	f
__dict_list_h_	glues/libtess/dict-list.h	36;"	d
__dict_list_h_	glues/libtess/dict.h	36;"	d
__divx	uglu.h	9;"	d
__egl_h_	GLES/egl.h	2;"	d
__egl_types_h_	GLES/egltypes.h	2;"	d
__f2x	uglu.h	7;"	d
__geom_h_	glues/libtess/geom.h	36;"	d
__glPi	glues/glues_project.c	54;"	d	file:
__gl_computeInterior	glues/libtess/sweep.c	/^int __gl_computeInterior(GLUtesselator* tess)$/;"	f
__gl_dictListInsert	glues/libtess/dict-list.h	79;"	d
__gl_dictListInsert	glues/libtess/dict.h	78;"	d
__gl_dictListKey	glues/libtess/dict-list.h	74;"	d
__gl_dictListKey	glues/libtess/dict.h	73;"	d
__gl_dictListMax	glues/libtess/dict-list.h	78;"	d
__gl_dictListMax	glues/libtess/dict.h	77;"	d
__gl_dictListMin	glues/libtess/dict-list.h	77;"	d
__gl_dictListMin	glues/libtess/dict.h	76;"	d
__gl_dictListPred	glues/libtess/dict-list.h	76;"	d
__gl_dictListPred	glues/libtess/dict.h	75;"	d
__gl_dictListSucc	glues/libtess/dict-list.h	75;"	d
__gl_dictListSucc	glues/libtess/dict.h	74;"	d
__gl_edgeEval	glues/libtess/geom.c	/^GLfloat __gl_edgeEval(GLUvertex* u, GLUvertex* v, GLUvertex* w)$/;"	f
__gl_edgeIntersect	glues/libtess/geom.c	/^void __gl_edgeIntersect(GLUvertex* o1, GLUvertex* d1,$/;"	f
__gl_edgeSign	glues/libtess/geom.c	/^GLfloat __gl_edgeSign(GLUvertex* u, GLUvertex* v, GLUvertex* w)$/;"	f
__gl_h_	GLES/gl.h	2;"	d
__gl_memAlloc	glues/libtess/memalloc.c	/^void* __gl_memAlloc(size_t n)$/;"	f
__gl_memInit	glues/libtess/memalloc.c	/^int __gl_memInit(size_t maxFast)$/;"	f
__gl_meshAddEdgeVertex	glues/libtess/mesh.c	/^GLUhalfEdge* __gl_meshAddEdgeVertex(GLUhalfEdge* eOrg)$/;"	f
__gl_meshCheckMesh	glues/libtess/mesh.c	/^void __gl_meshCheckMesh(GLUmesh* mesh)$/;"	f
__gl_meshCheckMesh	glues/libtess/mesh.h	264;"	d
__gl_meshConnect	glues/libtess/mesh.c	/^GLUhalfEdge* __gl_meshConnect(GLUhalfEdge* eOrg, GLUhalfEdge* eDst)$/;"	f
__gl_meshDelete	glues/libtess/mesh.c	/^int __gl_meshDelete(GLUhalfEdge* eDel)$/;"	f
__gl_meshDeleteMesh	glues/libtess/mesh.c	/^void __gl_meshDeleteMesh( GLUmesh *mesh )$/;"	f
__gl_meshDiscardExterior	glues/libtess/tessmono.c	/^void __gl_meshDiscardExterior(GLUmesh* mesh)$/;"	f
__gl_meshMakeEdge	glues/libtess/mesh.c	/^GLUhalfEdge* __gl_meshMakeEdge(GLUmesh* mesh)$/;"	f
__gl_meshNewMesh	glues/libtess/mesh.c	/^GLUmesh* __gl_meshNewMesh(void)$/;"	f
__gl_meshSetWindingNumber	glues/libtess/tessmono.c	/^int __gl_meshSetWindingNumber(GLUmesh* mesh, int value, GLboolean keepOnlyBoundary)$/;"	f
__gl_meshSplice	glues/libtess/mesh.c	/^int __gl_meshSplice(GLUhalfEdge* eOrg, GLUhalfEdge* eDst)$/;"	f
__gl_meshSplitEdge	glues/libtess/mesh.c	/^GLUhalfEdge* __gl_meshSplitEdge(GLUhalfEdge* eOrg)$/;"	f
__gl_meshTessellateInterior	glues/libtess/tessmono.c	/^int __gl_meshTessellateInterior(GLUmesh* mesh)$/;"	f
__gl_meshTessellateMonoRegion	glues/libtess/tessmono.c	/^int __gl_meshTessellateMonoRegion(GLUface* face)$/;"	f
__gl_meshUnion	glues/libtess/mesh.c	/^GLUmesh* __gl_meshUnion(GLUmesh* mesh1, GLUmesh* mesh2)$/;"	f
__gl_meshZapFace	glues/libtess/mesh.c	/^void __gl_meshZapFace(GLUface* fZap)$/;"	f
__gl_noBeginData	glues/libtess/tess.c	/^\/*ARGSUSED*\/ void APIENTRY __gl_noBeginData(GLenum type, void* polygonData) {}$/;"	f
__gl_noCombineData	glues/libtess/tess.c	/^\/*ARGSUSED*\/ void APIENTRY __gl_noCombineData(GLfloat coords[3], void* data[4],$/;"	f
__gl_noEdgeFlagData	glues/libtess/tess.c	/^\/*ARGSUSED*\/ void APIENTRY __gl_noEdgeFlagData(GLboolean boundaryEdge, void* polygonData) {}$/;"	f
__gl_noEndData	glues/libtess/tess.c	/^\/*ARGSUSED*\/ void APIENTRY __gl_noEndData(void* polygonData) {}$/;"	f
__gl_noErrorData	glues/libtess/tess.c	/^\/*ARGSUSED*\/ void APIENTRY __gl_noErrorData( GLenum errnum, void* polygonData) {}$/;"	f
__gl_noVertexData	glues/libtess/tess.c	/^\/*ARGSUSED*\/ void APIENTRY __gl_noVertexData(void* data, void* polygonData) {}$/;"	f
__gl_pqHeapIsEmpty	glues/libtess/priorityq-heap.h	114;"	d
__gl_pqHeapMinimum	glues/libtess/priorityq-heap.h	113;"	d
__gl_projectPolygon	glues/libtess/normal.c	/^void __gl_projectPolygon(GLUtesselator* tess)$/;"	f
__gl_renderBoundary	glues/libtess/render.c	/^void __gl_renderBoundary(GLUtesselator* tess, GLUmesh* mesh)$/;"	f
__gl_renderCache	glues/libtess/render.c	/^GLboolean __gl_renderCache(GLUtesselator* tess)$/;"	f
__gl_renderMesh	glues/libtess/render.c	/^void __gl_renderMesh(GLUtesselator* tess, GLUmesh* mesh)$/;"	f
__gl_transEval	glues/libtess/geom.c	/^GLfloat __gl_transEval(GLUvertex* u, GLUvertex* v, GLUvertex* w)$/;"	f
__gl_transSign	glues/libtess/geom.c	/^GLfloat __gl_transSign(GLUvertex* u, GLUvertex* v, GLUvertex* w)$/;"	f
__gl_vertCCW	glues/libtess/geom.c	/^int __gl_vertCCW(GLUvertex* u, GLUvertex* v, GLUvertex* w)$/;"	f
__gl_vertLeq	glues/libtess/geom.c	/^int __gl_vertLeq(GLUvertex* u, GLUvertex* v)$/;"	f
__glext_h_	GLES/glext.h	2;"	d
__gluInvertMatrixf	glues/glues_project.c	/^static int __gluInvertMatrixf(const GLfloat m[16], GLfloat invOut[16])$/;"	f	file:
__gluMakeIdentityf	glues/glues_project.c	/^static void __gluMakeIdentityf(GLfloat m[16])$/;"	f	file:
__gluMultMatricesf	glues/glues_project.c	/^static void __gluMultMatricesf(const GLfloat a[16], const GLfloat b[16],$/;"	f	file:
__gluMultMatrixVecf	glues/glues_project.c	/^static void __gluMultMatrixVecf(const GLfloat matrix[16], const GLfloat in[4],$/;"	f	file:
__gluNURBSErrorString	glues/glues_error.c	/^const unsigned char* __gluNURBSErrorString(int errnum)$/;"	f
__gluNurbsErrors	glues/glues_error.c	/^static unsigned char* __gluNurbsErrors[]=$/;"	v	file:
__gluTessErrorString	glues/glues_error.c	/^const unsigned char* __gluTessErrorString(int errnum)$/;"	f
__gluTessErrors	glues/glues_error.c	/^static unsigned char* __gluTessErrors[]=$/;"	v	file:
__glues_h__	glues/glu.h	34;"	d
__glues_h__	glues/glues.h	34;"	d
__identf	uglu.h	/^static void __identf(GLfloat m[])$/;"	f
__identx	uglu.h	/^static void __identx(GLfixed m[])$/;"	f
__memalloc_simple_h_	glues/libtess/memalloc.h	36;"	d
__mesh_h_	glues/libtess/mesh.h	36;"	d
__mulx	uglu.h	8;"	d
__normal_h_	glues/libtess/normal.h	36;"	d
__priorityq_heap_h_	glues/libtess/priorityq-heap.h	36;"	d
__priorityq_sort_h_	glues/libtess/priorityq-sort.h	36;"	d
__priorityq_sort_h_	glues/libtess/priorityq.h	36;"	d
__render_h_	glues/libtess/render.h	36;"	d
__sinx	uglu.h	/^GLfixed __sinx(GLfixed a)$/;"	f
__sqrtx	uglu.h	/^GLfixed __sqrtx(GLfixed a)$/;"	f
__sweep_h_	glues/libtess/sweep.h	36;"	d
__tess_h_	glues/libtess/tess.h	36;"	d
__tessmono_h_	glues/libtess/tessmono.h	36;"	d
aa_enable	context.h	/^        GLboolean       aa_enable;$/;"	m	class:EGL::Context
activeRegion	glues/libtess/mesh.h	/^   ActiveRegion* activeRegion;  \/* a region with this upper edge (sweep.c) *\/$/;"	m	struct:GLUhalfEdge
active_light	context.h	/^        size_t  active_light;$/;"	m	class:EGL::Context
active_texture	context.h	/^        size_t	active_texture;$/;"	m	class:EGL::Context
add	drv_impl.cpp	/^void add(unsigned char kind, unsigned int data, unsigned int index)$/;"	f
addState	drv_impl.cpp	/^RenderState* addState(unsigned short id, unsigned int value, RenderState *top)$/;"	f
addr	ogles.h	/^    U32         addr;$/;"	m	struct:Node
allocFace	glues/libtess/mesh.c	/^static GLUface* allocFace()$/;"	f	file:
allocVertex	glues/libtess/mesh.c	/^static GLUvertex* allocVertex()$/;"	f	file:
alpha	ogles.h	/^    GLfloat     alpha;$/;"	m	struct:Color
alpha_scale	ogles.h	/^    GLfixed     alpha_scale;$/;"	m	struct:TextureState
alpha_scale	ogles.h	/^    GLfloat     alpha_scale;$/;"	m	struct:TextureState
alpha_size	ogles.h	/^    GLuint      alpha_size;$/;"	m	struct:MipmapArray
alpha_test	context.h	/^        AlphaTest       alpha_test;$/;"	m	class:EGL::Context
ambient	glm.h	/^  GLfloat ambient[4];           \/* ambient component *\/$/;"	m	struct:_GLMmaterial
anEdge	glues/libtess/mesh.h	/^   GLUhalfEdge*  anEdge;        \/* a half-edge with this origin *\/$/;"	m	struct:GLUvertex
anEdge	glues/libtess/mesh.h	/^   GLUhalfEdge* anEdge;         \/* a half edge with this left face *\/$/;"	m	struct:GLUface
appDeinit	demo.cpp	/^void appDeinit()$/;"	f
appInit	demo.cpp	/^void appInit()$/;"	f
appRender	demo.cpp	/^void appRender(long tick, int width, int height)$/;"	f
area2	rasterizer.h	/^    float   area2;$/;"	m	class:Rasterizer
auto_genMipmap	ogles.h	/^    GLboolean   auto_genMipmap;$/;"	m	struct:TextureState
average_scan_rate	ogles.h	/^    float       average_scan_rate;$/;"	m	struct:Statistics
averaged	glm.cpp	/^    GLboolean averaged;$/;"	m	struct:_GLMnode	file:
b	glues/glues_mipmap.c	/^   char b[4];$/;"	m	union:__anon14	file:
bfOffBits	bitmap.h	/^    unsigned int   bfOffBits;        \/* Offset to bitmap data *\/$/;"	m	struct:__anon7
bfReserved1	bitmap.h	/^    unsigned short bfReserved1;      \/* Reserved *\/$/;"	m	struct:__anon7
bfReserved2	bitmap.h	/^    unsigned short bfReserved2;      \/* ... *\/$/;"	m	struct:__anon7
bfSize	bitmap.h	/^    unsigned int   bfSize;           \/* Size of file *\/$/;"	m	struct:__anon7
bfType	bitmap.h	/^    unsigned short bfType;           \/* Magic number for file *\/$/;"	m	struct:__anon7
biBitCount	bitmap.h	/^    unsigned short biBitCount;       \/* Number of bits per pixel *\/$/;"	m	struct:__anon8
biClrImportant	bitmap.h	/^    unsigned int   biClrImportant;   \/* Number of important colors *\/$/;"	m	struct:__anon8
biClrUsed	bitmap.h	/^    unsigned int   biClrUsed;        \/* Number of colors used *\/$/;"	m	struct:__anon8
biCompression	bitmap.h	/^    unsigned int   biCompression;    \/* Type of compression to use *\/$/;"	m	struct:__anon8
biHeight	bitmap.h	/^    int            biHeight;         \/* Height of image *\/$/;"	m	struct:__anon8
biPlanes	bitmap.h	/^    unsigned short biPlanes;         \/* Number of color planes *\/$/;"	m	struct:__anon8
biSize	bitmap.h	/^    unsigned int   biSize;           \/* Size of info header *\/$/;"	m	struct:__anon8
biSizeImage	bitmap.h	/^    unsigned int   biSizeImage;      \/* Size of image data *\/$/;"	m	struct:__anon8
biWidth	bitmap.h	/^    int            biWidth;          \/* Width of image *\/$/;"	m	struct:__anon8
biXPelsPerMeter	bitmap.h	/^    int            biXPelsPerMeter;  \/* X pixels per meter *\/$/;"	m	struct:__anon8
biYPelsPerMeter	bitmap.h	/^    int            biYPelsPerMeter;  \/* Y pixels per meter *\/$/;"	m	struct:__anon8
bit_count	glm.h	/^    GLubyte bit_count;            \/* num of bits per pixel *\/$/;"	m	struct:_GLMtextures
bit_count	glm.h	/^  GLubyte bit_count;            \/* num of bits per pixel *\/$/;"	m	struct:_GLMmaterial
bitmap	glm.h	/^  GLubyte *bitmap;              \/* pointer to image data *\/$/;"	m	struct:_GLMmaterial
bitmap	main.cpp	/^U8      *bitmap = NULL;$/;"	v
bits	gltools_TGA_rev.cpp	/^    GLbyte	bits;                   \/\/ bits per pixel (8 16, 24, 32)$/;"	m	struct:__anon11	file:
blendCount	rasterizer.h	/^    U32     blendCount;$/;"	m	class:Rasterizer
blend_func	context.h	/^        Blending        blend_func;$/;"	m	class:EGL::Context
blue	ogles.h	/^    GLfloat     blue;$/;"	m	struct:Color
blue_size	ogles.h	/^    GLuint      blue_size;$/;"	m	struct:MipmapArray
bmiColors	bitmap.h	/^        _RGBQUAD          bmiColors[256]; \/* Image colormap *\/$/;"	m	struct:__anon10
bmiColors	surface.cpp	/^        DWORD            bmiColors[3];$/;"	m	struct:__anon1::InfoHeader	file:
bmiHeader	bitmap.h	/^        _BITMAPINFOHEADER bmiHeader;      \/* Image header *\/$/;"	m	struct:__anon10
bmiHeader	surface.cpp	/^        BITMAPINFOHEADER bmiHeader;$/;"	m	struct:__anon1::InfoHeader	file:
border	ogles.h	/^    GLuint      border;$/;"	m	struct:TextureImage
bottom	ogles.h	/^    GLint       bottom;$/;"	m	struct:ScissorTest
boundaryOnly	glues/libtess/tess.h	/^  GLboolean     boundaryOnly;   \/* Extract contours, not triangles    *\/$/;"	m	struct:GLUtesselator
boxndex	uglu.h	/^static GLushort boxndex [12][3] =$/;"	v
boxvec	uglu.h	/^static GLfloat boxvec[6][3] =$/;"	v
bytes_per_element	glues/glues_mipmap.c	/^static GLfloat bytes_per_element(GLenum type)$/;"	f	file:
cache	glues/libtess/tess.h	/^  CachedVertex  cache[TESS_MAX_CACHE];  \/* the vertex data *\/$/;"	m	struct:GLUtesselator
cacheCount	glues/libtess/tess.h	/^  int           cacheCount;             \/* number of cached vertices *\/$/;"	m	struct:GLUtesselator
callBegin	glues/libtess/tess.h	/^  void (APIENTRY* callBegin)(GLenum type);$/;"	m	struct:GLUtesselator
callBeginData	glues/libtess/tess.h	/^  void (APIENTRY* callBeginData)(GLenum type, void* polygonData);$/;"	m	struct:GLUtesselator
callCombine	glues/libtess/tess.h	/^   void (APIENTRY* callCombine)(GLfloat coords[3], void*  data[4],$/;"	m	struct:GLUtesselator
callCombineData	glues/libtess/tess.h	/^  void (APIENTRY* callCombineData)(GLfloat coords[3], void* data[4],$/;"	m	struct:GLUtesselator
callEdgeFlag	glues/libtess/tess.h	/^  void (APIENTRY* callEdgeFlag)(GLboolean boundaryEdge);$/;"	m	struct:GLUtesselator
callEdgeFlagData	glues/libtess/tess.h	/^  void (APIENTRY* callEdgeFlagData)(GLboolean boundaryEdge, void* polygonData);$/;"	m	struct:GLUtesselator
callEnd	glues/libtess/tess.h	/^  void (APIENTRY* callEnd)(void);$/;"	m	struct:GLUtesselator
callEndData	glues/libtess/tess.h	/^  void (APIENTRY* callEndData)(void* polygonData);$/;"	m	struct:GLUtesselator
callError	glues/libtess/tess.h	/^   void (APIENTRY* callError)(GLenum errnum);$/;"	m	struct:GLUtesselator
callErrorData	glues/libtess/tess.h	/^  void (APIENTRY* callErrorData)(GLenum errnum, void *polygonData);$/;"	m	struct:GLUtesselator
callMesh	glues/libtess/tess.h	/^  void (APIENTRY* callMesh)(GLUmesh* mesh);$/;"	m	struct:GLUtesselator
callVertex	glues/libtess/tess.h	/^  void (APIENTRY* callVertex)(void* data);$/;"	m	struct:GLUtesselator
callVertexData	glues/libtess/tess.h	/^  void (APIENTRY* callVertexData)(void* data, void* polygonData);$/;"	m	struct:GLUtesselator
camTrack	demo.cpp	/^static void camTrack()$/;"	f	file:
center	offviewer.h	/^static float center[3] = { 0.0, 0.0, 0.0 };$/;"	v
cf	ogles.h	/^    Color       cf;$/;"	m	struct:Fog
checkMipmapArgs	glues/glues_mipmap.c	/^static int checkMipmapArgs(GLenum internalFormat, GLenum format, GLenum type)$/;"	f	file:
check_outside	geometry.h	/^		int 		 	check_outside[6];$/;"	m	struct:Geometry
clear_buffer_mask	context.h	/^        GLbitfield      clear_buffer_mask;$/;"	m	class:EGL::Context
clear_color	context.h	/^        Color           clear_color;$/;"	m	class:EGL::Context
clear_depth	context.h	/^        GLfloat         clear_depth;$/;"	m	class:EGL::Context
clear_stencil	context.h	/^        GLint           clear_stencil;$/;"	m	class:EGL::Context
client_active_texture	context.h	/^        size_t	client_active_texture;$/;"	m	class:EGL::Context
clip_plane_mask	context.h	/^        GLubyte         clip_plane_mask;$/;"	m	class:EGL::Context
clipcount	geometry.h	/^		int             clipcount;$/;"	m	struct:Geometry
clipping	geometry.cpp	/^void Geometry::clipping(float * input[16], float * output[16], float ** Temporary)$/;"	f	class:Geometry
clipvalid	geometry.h	/^		bool     		clipvalid;$/;"	m	struct:Geometry
closestFit	glues/glues_mipmap.c	/^static void closestFit(GLenum target, GLint width, GLint height,$/;"	f	file:
coldscan	rasterizer.h	/^    int     validstamp, scanstamp, coldscan, invalidstamp;$/;"	m	class:Rasterizer
color	rasterizer.h	/^        int color[TEX_CACHE_ENTRY_X*TEX_CACHE_ENTRY_Y][TEX_CACHE_BLOCK_SIZE];$/;"	m	struct:Rasterizer::__anon12
colorArray	demo.cpp	/^    GLubyte *colorArray;$/;"	m	struct:__anon3	file:
colorBufferBW	rasterizer.h	/^    int     colorBufferBW[2];$/;"	m	class:Rasterizer
colorMapBits	gltools_TGA_rev.cpp	/^    unsigned char 	colorMapBits;   \/\/ bits per palette entry$/;"	m	struct:__anon11	file:
colorMapLength	gltools_TGA_rev.cpp	/^    unsigned short	colorMapLength;         \/\/ Number of colors$/;"	m	struct:__anon11	file:
colorMapStart	gltools_TGA_rev.cpp	/^    unsigned short	colorMapStart;          \/\/ First colour map entry$/;"	m	struct:__anon11	file:
colorMapType	gltools_TGA_rev.cpp	/^    GLbyte	colorMapType;           \/\/ 0 = None, 1 = paletted$/;"	m	struct:__anon11	file:
color_array	context.h	/^        ArrayPointer    color_array;$/;"	m	class:EGL::Context
color_buffer_bw	ogles.h	/^    int         color_buffer_bw[2];$/;"	m	struct:Statistics
color_material_enable	context.h	/^        GLboolean       color_material_enable;$/;"	m	class:EGL::Context
combine_funcALPHA	ogles.h	/^    GLenum      combine_funcALPHA;$/;"	m	struct:TextureState
combine_funcRGB	ogles.h	/^    GLenum      combine_funcRGB;$/;"	m	struct:TextureState
combine_op0ALPHA	ogles.h	/^    GLenum      combine_op0ALPHA;$/;"	m	struct:TextureState
combine_op0RGB	ogles.h	/^    GLenum      combine_op0RGB;$/;"	m	struct:TextureState
combine_op1ALPHA	ogles.h	/^    GLenum      combine_op1ALPHA;$/;"	m	struct:TextureState
combine_op1RGB	ogles.h	/^    GLenum      combine_op1RGB;$/;"	m	struct:TextureState
combine_op2ALPHA	ogles.h	/^    GLenum      combine_op2ALPHA;$/;"	m	struct:TextureState
combine_op2RGB	ogles.h	/^    GLenum      combine_op2RGB;$/;"	m	struct:TextureState
combine_src0ALPHA	ogles.h	/^    GLenum      combine_src0ALPHA;$/;"	m	struct:TextureState
combine_src0RGB	ogles.h	/^    GLenum      combine_src0RGB;$/;"	m	struct:TextureState
combine_src1ALPHA	ogles.h	/^    GLenum      combine_src1ALPHA;$/;"	m	struct:TextureState
combine_src1RGB	ogles.h	/^    GLenum      combine_src1RGB;$/;"	m	struct:TextureState
combine_src2ALPHA	ogles.h	/^    GLenum      combine_src2ALPHA;$/;"	m	struct:TextureState
combine_src2RGB	ogles.h	/^    GLenum      combine_src2RGB;$/;"	m	struct:TextureState
compressed	ogles.h	/^    GLboolean   compressed;$/;"	m	struct:MipmapArray
computeLog	glues/glues_mipmap.c	/^static int computeLog(GLuint value)$/;"	f	file:
cone	sdl_mipmap.c	/^GLUquadricObj* cone;$/;"	v
cone_fill_flat	sdl_cylinder.cpp	/^GLUquadricObj* cone_fill_flat;$/;"	v
cone_fill_smooth	sdl_cylinder.cpp	/^GLUquadricObj* cone_fill_smooth;$/;"	v
cone_fill_texture	sdl_cylinder.cpp	/^GLUquadricObj* cone_fill_texture;$/;"	v
cone_line_flat	sdl_cylinder.cpp	/^GLUquadricObj* cone_line_flat;$/;"	v
cone_line_smooth	sdl_cylinder.cpp	/^GLUquadricObj* cone_line_smooth;$/;"	v
cone_line_texture	sdl_cylinder.cpp	/^GLUquadricObj* cone_line_texture;$/;"	v
cone_point_flat	sdl_cylinder.cpp	/^GLUquadricObj* cone_point_flat;$/;"	v
cone_point_smooth	sdl_cylinder.cpp	/^GLUquadricObj* cone_point_smooth;$/;"	v
cone_point_texture	sdl_cylinder.cpp	/^GLUquadricObj* cone_point_texture;$/;"	v
configureLightAndMaterial	demo.cpp	/^static void configureLightAndMaterial()$/;"	f	file:
coords	glues/libtess/mesh.h	/^   GLfloat coords[3];           \/* vertex location in 3D *\/$/;"	m	struct:GLUvertex
coords	glues/libtess/tess.h	/^   GLfloat coords[3];$/;"	m	struct:CachedVertex
count	demo.cpp	/^    GLsizei count;$/;"	m	struct:__anon3	file:
count	ogles.h	/^    GLsizei     count;$/;"	m	struct:DrawArrayCmd
count	ogles.h	/^    GLsizei     count;$/;"	m	struct:DrawElemCmd
covered_tiles	ogles.h	/^    int         covered_tiles;$/;"	m	struct:Statistics
createGroundPlane	demo.cpp	/^static GLOBJECT * createGroundPlane()$/;"	f	file:
createSuperShape	demo.cpp	/^static GLOBJECT * createSuperShape(const float *params)$/;"	f	file:
cross	glues/glues_project.c	/^static void cross(GLfloat v1[3], GLfloat v2[3], GLfloat result[3])$/;"	f	file:
crossf	uglu.h	/^static void crossf(float v0[3], float v1[3], float r[3])$/;"	f
crossx	uglu.h	/^void crossx(GLfixed* v0, GLfixed* v1, GLfixed* r)$/;"	f
cull_face	context.h	/^        GLenum          cull_face;$/;"	m	class:EGL::Context
cullcount	geometry.h	/^		int				cullcount;$/;"	m	struct:Geometry
culled_triangles	ogles.h	/^    int         culled_triangles;$/;"	m	struct:Statistics
culling	geometry.cpp	/^void Geometry::culling(void)$/;"	f	class:Geometry
culling_enable	context.h	/^        GLboolean       culling_enable;$/;"	m	class:EGL::Context
currentContext	context.cpp	/^static Context *currentContext = NULL;$/;"	v	file:
current_color	context.h	/^        Color           current_color;$/;"	m	class:EGL::Context
current_normal	context.h	/^        Normal          current_normal;$/;"	m	class:EGL::Context
current_teximage	context.h	/^        TextureImage    * current_teximage;$/;"	m	class:EGL::Context
current_texture_coords	context.h	/^        TextureCoord    current_texture_coords;$/;"	m	class:EGL::Context
data	glm.h	/^    GLubyte *data;$/;"	m	struct:_GLMtextures
data	glues/libtess/mesh.h	/^   void*         data;          \/* client's data *\/$/;"	m	struct:GLUvertex
data	glues/libtess/mesh.h	/^   void*        data;           \/* room for client's data *\/$/;"	m	struct:GLUface
data	glues/libtess/tess.h	/^   void*   data;$/;"	m	struct:CachedVertex
data	ogles.h	/^    GLvoid      * data;$/;"	m	struct:MipmapArray
data	ogles.h	/^    GLvoid      * data;$/;"	m	struct:TextureImage
deallocate	drv_impl.cpp	/^void deallocate(void)$/;"	f
default_color	context.h	/^        Color           default_color;$/;"	m	class:EGL::Context
density	ogles.h	/^    GLfixed     density;$/;"	m	struct:Fog
density	ogles.h	/^    GLfloat     density;$/;"	m	struct:Fog
depthBufferBW	rasterizer.h	/^    int     depthBufferBW[2]; \/\/Read,Write$/;"	m	class:Rasterizer
depth_buffer_bw	ogles.h	/^    int         depth_buffer_bw[2];$/;"	m	struct:Statistics
depth_offset	context.h	/^        DepthOffSet     depth_offset;$/;"	m	class:EGL::Context
depth_test	context.h	/^        DepthTest       depth_test;$/;"	m	class:EGL::Context
descriptor	gltools_TGA_rev.cpp	/^    GLbyte	descriptor;             \/\/ image descriptor$/;"	m	struct:__anon11	file:
dest	cams.h	/^    short src[5], dest[5];$/;"	m	struct:__anon6
dfail	ogles.h	/^    GLenum      dfail;$/;"	m	struct:StencilTest
dict	glues/libtess/tess.h	/^   Dict*      dict;             \/* edge dictionary for sweep line *\/$/;"	m	struct:GLUtesselator
dictDelete	glues/libtess/dict-list.h	50;"	d
dictDelete	glues/libtess/dict.c	/^void dictDelete(Dict* dict, DictNode* node) \/*ARGSUSED*\/$/;"	f
dictDelete	glues/libtess/dict.h	50;"	d
dictDeleteDict	glues/libtess/dict-list.h	45;"	d
dictDeleteDict	glues/libtess/dict.c	/^void dictDeleteDict(Dict* dict)$/;"	f
dictDeleteDict	glues/libtess/dict.h	45;"	d
dictInsert	glues/libtess/dict-list.h	48;"	d
dictInsert	glues/libtess/dict.h	48;"	d
dictInsertBefore	glues/libtess/dict-list.h	49;"	d
dictInsertBefore	glues/libtess/dict.c	/^DictNode* dictInsertBefore(Dict* dict, DictNode* node, DictKey key)$/;"	f
dictInsertBefore	glues/libtess/dict.h	49;"	d
dictKey	glues/libtess/dict-list.h	52;"	d
dictKey	glues/libtess/dict.h	52;"	d
dictMax	glues/libtess/dict-list.h	56;"	d
dictMax	glues/libtess/dict.h	56;"	d
dictMin	glues/libtess/dict-list.h	55;"	d
dictMin	glues/libtess/dict.h	55;"	d
dictNewDict	glues/libtess/dict-list.h	44;"	d
dictNewDict	glues/libtess/dict.c	/^Dict* dictNewDict(void* frame, int (*leq)(void *frame, DictKey key1, DictKey key2))$/;"	f
dictNewDict	glues/libtess/dict.h	44;"	d
dictPred	glues/libtess/dict-list.h	54;"	d
dictPred	glues/libtess/dict.h	54;"	d
dictSearch	glues/libtess/dict-list.h	47;"	d
dictSearch	glues/libtess/dict.c	/^DictNode* dictSearch(Dict* dict, DictKey key)$/;"	f
dictSearch	glues/libtess/dict.h	47;"	d
dictSucc	glues/libtess/dict-list.h	53;"	d
dictSucc	glues/libtess/dict.h	53;"	d
diffuse	glm.h	/^  GLfloat diffuse[4];           \/* diffuse component *\/$/;"	m	struct:_GLMmaterial
dirty	glues/libtess/sweep.h	/^   GLboolean     dirty;         \/* marks regions where the upper or lower$/;"	m	struct:ActiveRegion
dirtyTileMap	drv_impl.cpp	/^bool        dirtyTileMap[TILE_COUNT]={false};$/;"	v
disk_fill	sdl_disk.c	/^GLUquadricObj* disk_fill;$/;"	v
disk_fill_flat	sdl_disk.c	/^GLUquadricObj* disk_fill_flat;$/;"	v
disk_fill_texture	sdl_disk.c	/^GLUquadricObj* disk_fill_texture;$/;"	v
disk_line	sdl_disk.c	/^GLUquadricObj* disk_line;$/;"	v
disk_point	sdl_disk.c	/^GLUquadricObj* disk_point;$/;"	v
disk_silh	sdl_disk.c	/^GLUquadricObj* disk_silh;$/;"	v
displayList	drv_impl.cpp	/^Node        * displayList[TILE_COUNT]={NULL};$/;"	v
dist	cams.h	/^    unsigned char dist;     \/\/ if >0, cam rotates around eye xy on dist * 0.1$/;"	m	struct:__anon6
do_GM	geometry.cpp	/^int Geometry::do_GM(void)$/;"	f	class:Geometry
dp_range_far	ogles.h	/^    GLfixed     dp_range_far;$/;"	m	struct:ViewPort
dp_range_far	ogles.h	/^    GLfloat     dp_range_far;$/;"	m	struct:ViewPort
dp_range_near	ogles.h	/^    GLfixed     dp_range_near;$/;"	m	struct:ViewPort
dp_range_near	ogles.h	/^    GLfloat     dp_range_near;$/;"	m	struct:ViewPort
dpass	ogles.h	/^    GLenum      dpass;$/;"	m	struct:StencilTest
drawFadeQuad	demo.cpp	/^static void drawFadeQuad()$/;"	f	file:
drawGLObject	demo.cpp	/^static void drawGLObject(GLOBJECT *object)$/;"	f	file:
drawGroundPlane	demo.cpp	/^static void drawGroundPlane()$/;"	f	file:
drawModels	demo.cpp	/^static void drawModels(float zScale)$/;"	f	file:
drawStyle	glues/glues_quad.c	/^    GLint       drawStyle;$/;"	m	struct:GLUquadric	file:
draw_array	context.h	/^        DrawArrayCmd    draw_array;$/;"	m	class:EGL::Context
draw_element	context.h	/^        DrawElemCmd     draw_element;$/;"	m	class:EGL::Context
draw_init_table	drv_impl.cpp	/^void draw_init_table(void)$/;"	f
draw_mode	context.h	/^        GLenum          draw_mode;$/;"	m	class:EGL::Context
drawarrays_fixed_pipeline	drv_impl.cpp	/^void drawarrays_fixed_pipeline(void)$/;"	f
drawelements_fixed_pipeline	drv_impl.cpp	/^void drawelements_fixed_pipeline(void)$/;"	f
dst	ogles.h	/^    GLenum      dst;$/;"	m	struct:Blending
e	glues/libtess/mesh.c	/^   GLUhalfEdge e;$/;"	m	struct:__anon18	file:
e	glues/libtess/tess.c	/^typedef struct {GLUhalfEdge e, eSym;} EdgePair;$/;"	m	struct:__anon19	file:
eHead	glues/libtess/mesh.h	/^   GLUhalfEdge eHead;           \/* dummy header for edge list *\/$/;"	m	struct:GLUmesh
eHeadSym	glues/libtess/mesh.h	/^   GLUhalfEdge eHeadSym;        \/* and its symmetric counterpart *\/$/;"	m	struct:GLUmesh
eStart	glues/libtess/render.c	/^   GLUhalfEdge* eStart; \/* edge where this primitive starts *\/$/;"	m	struct:FaceCount	file:
eSym	glues/libtess/mesh.c	/^   GLUhalfEdge eSym;$/;"	m	struct:__anon18	file:
eSym	glues/libtess/tess.c	/^typedef struct {GLUhalfEdge e, eSym;} EdgePair;$/;"	m	struct:__anon19	file:
eUp	glues/libtess/sweep.h	/^   GLUhalfEdge*  eUp;           \/* upper edge, directed right to left      *\/$/;"	m	struct:ActiveRegion
eglBindTexImage	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)$/;"	f
eglCreateContext	egl.cpp	/^GLAPI EGLContext APIENTRY eglCreateContext (EGLDisplay dpy, EGLConfig config, EGLContext share_list, const EGLint *attrib_list)$/;"	f
eglCreateWindowSurface	egl.cpp	/^GLAPI EGLSurface APIENTRY eglCreateWindowSurface (EGLDisplay dpy, EGLConfig config, NativeWindowType window, const EGLint *attrib_list)$/;"	f
eglDestroyContext	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglDestroyContext (EGLDisplay dpy, EGLContext ctx)$/;"	f
eglDestroySurface	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglDestroySurface (EGLDisplay dpy, EGLSurface surface)$/;"	f
eglGetCurrentDisplay	egl.cpp	/^GLAPI EGLDisplay APIENTRY eglGetCurrentDisplay (void)$/;"	f
eglGetDisplay	egl.cpp	/^GLAPI EGLDisplay APIENTRY eglGetDisplay (NativeDisplayType display)$/;"	f
eglInitialize	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglInitialize (EGLDisplay dpy, EGLint *major, EGLint *minor)$/;"	f
eglMakeCurrent	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglMakeCurrent (EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)$/;"	f
eglQueryString	egl.cpp	/^GLAPI const char * APIENTRY eglQueryString (EGLDisplay dpy, EGLint name)$/;"	f
eglReleaseTexImage	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)$/;"	f
eglSaveSurfaceHM	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSaveSurfaceHM(EGLSurface surface, const TCHAR * filename)$/;"	f
eglSurfaceAttrib	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSurfaceAttrib (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)$/;"	f
eglSwapBuffers	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSwapBuffers (EGLDisplay dpy, EGLSurface draw)$/;"	f
eglSwapInterval	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSwapInterval(EGLDisplay dpy, EGLint interval)$/;"	f
eglTerminate	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglTerminate (EGLDisplay dpy)$/;"	f
eglWaitGL	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglWaitGL (void)$/;"	f
eglWaitNative	egl.cpp	/^GLAPI EGLBoolean APIENTRY eglWaitNative (EGLint engine)$/;"	f
element	ogles.h	/^    GLfloat     element[16];$/;"	m	struct:Matrix4x4
element	ogles.h	/^    GLfloat     element[9];$/;"	m	struct:Matrix3x3
elements_per_group	glues/glues_mipmap.c	/^static GLint elements_per_group(GLenum format, GLenum type)$/;"	f	file:
elementsof	ogles.h	242;"	d
emmissive	glm.h	/^  GLfloat emmissive[4];         \/* emmissive component *\/$/;"	m	struct:_GLMmaterial
emptyCache	glues/libtess/tess.h	/^  GLboolean     emptyCache;             \/* empty cache on next vertex() call *\/$/;"	m	struct:GLUtesselator
empty_image	glues/glues_mipmap.c	/^static void empty_image(const PixelStorageModes* psm, GLint width,$/;"	f	file:
enable	ogles.h	/^    GLboolean   enable;$/;"	m	struct:AlphaTest
enable	ogles.h	/^    GLboolean   enable;$/;"	m	struct:ArrayPointer
enable	ogles.h	/^    GLboolean   enable;$/;"	m	struct:Blending
enable	ogles.h	/^    GLboolean   enable;$/;"	m	struct:DepthOffSet
enable	ogles.h	/^    GLboolean   enable;$/;"	m	struct:DepthTest
enable	ogles.h	/^    GLboolean   enable;$/;"	m	struct:Fog
enable	ogles.h	/^    GLboolean   enable;$/;"	m	struct:LogicOpTest
enable	ogles.h	/^    GLboolean   enable;$/;"	m	struct:ScissorTest
enable	ogles.h	/^    GLboolean   enable;$/;"	m	struct:StencilTest
enable	ogles.h	/^    GLboolean   enable;$/;"	m	struct:TextureState
end	ogles.h	/^    GLfixed     end;$/;"	m	struct:Fog
end	ogles.h	/^    GLfloat     end;$/;"	m	struct:Fog
env	glues/libtess/tess.h	/^  jmp_buf env;          \/* place to jump to when memAllocs fail *\/$/;"	m	struct:GLUtesselator
env_color	ogles.h	/^    GLuint      env_color;$/;"	m	struct:TextureState
env_mode	ogles.h	/^    GLenum      env_mode;$/;"	m	struct:TextureState
errorCallback	glues/glues_quad.c	/^    void        (APIENTRY* errorCallback)( GLint );$/;"	m	struct:GLUquadric	file:
event	glues/libtess/tess.h	/^   GLUvertex* event;            \/* current sweep event being processed *\/$/;"	m	struct:GLUtesselator
extensionString	glues/glues_registry.c	/^static const GLubyte extensionString[]="";$/;"	v	file:
extract4444	glues/glues_mipmap.c	/^static void extract4444(int isSwap,const void* packedPixel, GLfloat extractComponents[])$/;"	f	file:
extract5551	glues/glues_mipmap.c	/^static void extract5551(int isSwap,const void* packedPixel, GLfloat extractComponents[])$/;"	f	file:
extract565	glues/glues_mipmap.c	/^static void extract565(int isSwap, const void* packedPixel, GLfloat extractComponents[])$/;"	f	file:
f	glues/glues_mipmap.c	/^   float f;$/;"	m	union:__anon14	file:
fHead	glues/libtess/mesh.h	/^   GLUface     fHead;           \/* dummy header for face list *\/$/;"	m	struct:GLUmesh
faces	offviewer.h	/^    Face *faces;$/;"	m	struct:Mesh
facetnorms	glm.h	/^  GLfloat* facetnorms;          \/* array of facetnorms *\/$/;"	m	struct:_GLMmodel
factor	ogles.h	/^    GLfixed     factor;$/;"	m	struct:DepthOffSet
factor	ogles.h	/^    GLfloat     factor;$/;"	m	struct:DepthOffSet
fatalError	glues/libtess/tess.h	/^   GLboolean fatalError;        \/* fatal error: needed combine callback *\/$/;"	m	struct:GLUtesselator
fill_image	glues/glues_mipmap.c	/^static void fill_image(const PixelStorageModes* psm,$/;"	f	file:
findex	glm.h	/^  GLuint findex;                \/* index of triangle facet normal *\/$/;"	m	struct:_GLMtriangle
first	ogles.h	/^    GLint       first;$/;"	m	struct:DrawArrayCmd
fixUpperEdge	glues/libtess/sweep.h	/^   GLboolean     fixUpperEdge;  \/* marks temporary edges introduced when$/;"	m	struct:ActiveRegion
flagBoundary	glues/libtess/tess.h	/^  GLboolean     flagBoundary;   \/* mark boundary edges (use EdgeFlag) *\/$/;"	m	struct:GLUtesselator
floatToFixed	demo.cpp	/^static long floatToFixed(float value)$/;"	f	file:
fog	context.h	/^        Fog             fog;$/;"	m	class:EGL::Context
format	ogles.h	/^    GLenum      format;$/;"	m	struct:TextureImage
fps	ogles.h	/^    float       fps;$/;"	m	struct:Statistics
frame	glues/libtess/dict-list.h	/^   void*    frame;$/;"	m	struct:Dict
frame	glues/libtess/dict.h	/^   void*    frame;$/;"	m	struct:Dict
frameDEG	geometry.h	/^		bool            frameDEG;$/;"	m	struct:Geometry
frame_count	outfile.cpp	/^int frame_count = 0;$/;"	v
frames	main.cpp	/^static int frames = 0;$/;"	v	file:
freeGLObject	demo.cpp	/^static void freeGLObject(GLOBJECT *object)$/;"	f	file:
freeList	glues/libtess/priorityq-heap.h	/^   PQhandle      freeList;$/;"	m	struct:PriorityQ
front_face	context.h	/^        GLenum          front_face;$/;"	m	class:EGL::Context
func	ogles.h	/^    GLenum      func;$/;"	m	struct:AlphaTest
func	ogles.h	/^    GLenum      func;$/;"	m	struct:DepthTest
func	ogles.h	/^    GLenum      func;$/;"	m	struct:StencilTest
g_bDemoDone	main.cpp	/^bool	g_bDemoDone = false;$/;"	v
getActiveLight	context.h	/^        inline size_t getActiveLight()$/;"	f	class:EGL::Context
getActiveTexture	context.h	/^        inline size_t getActiveTexture()$/;"	f	class:EGL::Context
glActiveTexture	gl.cpp	/^GLAPI void APIENTRY glActiveTexture (GLenum texture)$/;"	f
glAlphaFunc	gl.cpp	/^GLAPI void APIENTRY glAlphaFunc (GLenum func, GLclampf ref)$/;"	f
glAlphaFuncx	gl.cpp	/^GLAPI void APIENTRY glAlphaFuncx (GLenum func, GLclampx ref)$/;"	f
glBindBuffer	gl.cpp	/^GLAPI void APIENTRY glBindBuffer(GLenum target, GLuint buffer)$/;"	f
glBindTexture	gl.cpp	/^GLAPI void APIENTRY glBindTexture (GLenum target, GLuint texture)$/;"	f
glBlendFunc	gl.cpp	/^GLAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor)$/;"	f
glBufferData	gl.cpp	/^GLAPI void APIENTRY glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)$/;"	f
glBufferSubData	gl.cpp	/^GLAPI void APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)$/;"	f
glClear	gl.cpp	/^GLAPI void APIENTRY glClear (GLbitfield mask)$/;"	f
glClearColor	gl.cpp	/^GLAPI void APIENTRY glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)$/;"	f
glClearColorx	gl.cpp	/^GLAPI void APIENTRY glClearColorx (GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)$/;"	f
glClearDepthf	gl.cpp	/^GLAPI void APIENTRY glClearDepthf (GLclampf depth)$/;"	f
glClearDepthx	gl.cpp	/^GLAPI void APIENTRY glClearDepthx (GLclampx depth)$/;"	f
glClearStencil	gl.cpp	/^GLAPI void APIENTRY glClearStencil (GLint s)$/;"	f
glClientActiveTexture	gl.cpp	/^GLAPI void APIENTRY glClientActiveTexture (GLenum texture)$/;"	f
glClipPlanef	gl.cpp	/^GLAPI void APIENTRY glClipPlanef(GLenum plane, const GLfloat *equation)$/;"	f
glClipPlanex	gl.cpp	/^GLAPI void APIENTRY glClipPlanex(GLenum plane, const GLfixed *equation)$/;"	f
glColor4f	gl.cpp	/^GLAPI void APIENTRY glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)$/;"	f
glColor4x	gl.cpp	/^GLAPI void APIENTRY glColor4x (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)$/;"	f
glColorMask	gl.cpp	/^GLAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)$/;"	f
glColorPointer	gl.cpp	/^GLAPI void APIENTRY glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)$/;"	f
glCompressedTexImage2D	gl.cpp	/^GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)$/;"	f
glCompressedTexSubImage2D	gl.cpp	/^GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)$/;"	f
glCopyTexImage2D	gl.cpp	/^GLAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)$/;"	f
glCopyTexSubImage2D	gl.cpp	/^GLAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)$/;"	f
glCullFace	gl.cpp	/^GLAPI void APIENTRY glCullFace (GLenum mode)$/;"	f
glDeleteBuffers	gl.cpp	/^GLAPI void APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers)$/;"	f
glDeleteTextures	gl.cpp	/^GLAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures)$/;"	f
glDepthFunc	gl.cpp	/^GLAPI void APIENTRY glDepthFunc (GLenum func)$/;"	f
glDepthMask	gl.cpp	/^GLAPI void APIENTRY glDepthMask (GLboolean flag)$/;"	f
glDepthRangef	gl.cpp	/^GLAPI void APIENTRY glDepthRangef (GLclampf zNear, GLclampf zFar)$/;"	f
glDepthRangex	gl.cpp	/^GLAPI void APIENTRY glDepthRangex (GLclampx zNear, GLclampx zFar)$/;"	f
glDisable	gl.cpp	/^GLAPI void APIENTRY glDisable (GLenum cap)$/;"	f
glDisableClientState	gl.cpp	/^GLAPI void APIENTRY glDisableClientState (GLenum array)$/;"	f
glDrawArrays	gl.cpp	/^GLAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count)$/;"	f
glDrawElements	gl.cpp	/^GLAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)$/;"	f
glEnable	gl.cpp	/^GLAPI void APIENTRY glEnable (GLenum cap)$/;"	f
glEnableClientState	gl.cpp	/^GLAPI void APIENTRY glEnableClientState (GLenum array)$/;"	f
glFinish	gl.cpp	/^GLAPI void APIENTRY glFinish (void)$/;"	f
glFlush	gl.cpp	/^GLAPI void APIENTRY glFlush (void)$/;"	f
glFogf	gl.cpp	/^GLAPI void APIENTRY glFogf (GLenum pname, GLfloat param)$/;"	f
glFogfv	gl.cpp	/^GLAPI void APIENTRY glFogfv (GLenum pname, const GLfloat *params)$/;"	f
glFogx	gl.cpp	/^GLAPI void APIENTRY glFogx (GLenum pname, GLfixed param)$/;"	f
glFogxv	gl.cpp	/^GLAPI void APIENTRY glFogxv (GLenum pname, const GLfixed *params)$/;"	f
glFrontFace	gl.cpp	/^GLAPI void APIENTRY glFrontFace (GLenum mode)$/;"	f
glFrustumf	gl.cpp	/^GLAPI void APIENTRY glFrustumf (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)$/;"	f
glFrustumx	gl.cpp	/^GLAPI void APIENTRY glFrustumx (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)$/;"	f
glGenBuffers	gl.cpp	/^GLAPI void APIENTRY glGenBuffers(GLsizei n, GLuint *buffers)$/;"	f
glGenTextures	gl.cpp	/^GLAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures)$/;"	f
glGetBooleanv	gl.cpp	/^GLAPI void APIENTRY glGetBooleanv(GLenum pname, GLboolean *params)$/;"	f
glGetBufferParameteriv	gl.cpp	/^GLAPI void APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)$/;"	f
glGetClipPlanef	gl.cpp	/^GLAPI void APIENTRY glGetClipPlanef(GLenum pname, GLfloat eqn[4])$/;"	f
glGetClipPlanex	gl.cpp	/^GLAPI void APIENTRY glGetClipPlanex(GLenum pname, GLfixed eqn[4])$/;"	f
glGetError	gl.cpp	/^GLAPI GLenum APIENTRY glGetError (void)$/;"	f
glGetFixedv	gl.cpp	/^GLAPI void APIENTRY glGetFixedv(GLenum pname, GLfixed *params)$/;"	f
glGetFloatv	gl.cpp	/^GLAPI void APIENTRY glGetFloatv(GLenum pname, GLfloat *params)$/;"	f
glGetIntegerv	gl.cpp	/^GLAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *params)$/;"	f
glGetLightfv	gl.cpp	/^GLAPI void APIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params)$/;"	f
glGetLightxv	gl.cpp	/^GLAPI void APIENTRY glGetLightxv(GLenum light, GLenum pname, GLfixed *params)$/;"	f
glGetMaterialfv	gl.cpp	/^GLAPI void APIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)$/;"	f
glGetMaterialxv	gl.cpp	/^GLAPI void APIENTRY glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params)$/;"	f
glGetPointerv	gl.cpp	/^GLAPI void APIENTRY glGetPointerv(GLenum pname, void **params)$/;"	f
glGetString	gl.cpp	/^GLAPI const GLubyte * APIENTRY glGetString (GLenum name)$/;"	f
glGetTexEnvfv	gl.cpp	/^GLAPI void APIENTRY glGetTexEnvfv(GLenum env, GLenum pname, GLfloat *params)$/;"	f
glGetTexEnviv	gl.cpp	/^GLAPI void APIENTRY glGetTexEnviv(GLenum env, GLenum pname, GLint *params)$/;"	f
glGetTexEnvxv	gl.cpp	/^GLAPI void APIENTRY glGetTexEnvxv(GLenum env, GLenum pname, GLfixed *params)$/;"	f
glGetTexParameterfv	gl.cpp	/^GLAPI void APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)$/;"	f
glGetTexParameteriv	gl.cpp	/^GLAPI void APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)$/;"	f
glGetTexParameterxv	gl.cpp	/^GLAPI void APIENTRY glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)$/;"	f
glHint	gl.cpp	/^GLAPI void APIENTRY glHint (GLenum target, GLenum mode)$/;"	f
glIsBuffer	gl.cpp	/^GLAPI GLboolean APIENTRY glIsBuffer(GLuint buffer)$/;"	f
glIsEnabled	gl.cpp	/^GLAPI GLboolean APIENTRY glIsEnabled(GLenum cap)$/;"	f
glIsTexture	gl.cpp	/^GLAPI GLboolean APIENTRY glIsTexture(GLuint texture)$/;"	f
glLightModelf	gl.cpp	/^GLAPI void APIENTRY glLightModelf (GLenum pname, GLfloat param)$/;"	f
glLightModelfv	gl.cpp	/^GLAPI void APIENTRY glLightModelfv (GLenum pname, const GLfloat *params)$/;"	f
glLightModelx	gl.cpp	/^GLAPI void APIENTRY glLightModelx (GLenum pname, GLfixed param)$/;"	f
glLightModelxv	gl.cpp	/^GLAPI void APIENTRY glLightModelxv (GLenum pname, const GLfixed *params)$/;"	f
glLightf	gl.cpp	/^GLAPI void APIENTRY glLightf (GLenum light, GLenum pname, GLfloat param)$/;"	f
glLightfv	gl.cpp	/^GLAPI void APIENTRY glLightfv (GLenum light, GLenum pname, const GLfloat *params)$/;"	f
glLightx	gl.cpp	/^GLAPI void APIENTRY glLightx (GLenum light, GLenum pname, GLfixed param)$/;"	f
glLightxv	gl.cpp	/^GLAPI void APIENTRY glLightxv (GLenum light, GLenum pname, const GLfixed *params)$/;"	f
glLineWidth	gl.cpp	/^GLAPI void APIENTRY glLineWidth (GLfloat width)$/;"	f
glLineWidthx	gl.cpp	/^GLAPI void APIENTRY glLineWidthx (GLfixed width)$/;"	f
glLoadIdentity	gl.cpp	/^GLAPI void APIENTRY glLoadIdentity (void)$/;"	f
glLoadMatrixf	gl.cpp	/^GLAPI void APIENTRY glLoadMatrixf (const GLfloat *m)$/;"	f
glLoadMatrixx	gl.cpp	/^GLAPI void APIENTRY glLoadMatrixx (const GLfixed *m)$/;"	f
glLogicOp	gl.cpp	/^GLAPI void APIENTRY glLogicOp (GLenum opcode)$/;"	f
glMaterialf	gl.cpp	/^GLAPI void APIENTRY glMaterialf (GLenum face, GLenum pname, GLfloat param)$/;"	f
glMaterialfv	gl.cpp	/^GLAPI void APIENTRY glMaterialfv (GLenum face, GLenum pname, const GLfloat *params)$/;"	f
glMaterialx	gl.cpp	/^GLAPI void APIENTRY glMaterialx (GLenum face, GLenum pname, GLfixed param)$/;"	f
glMaterialxv	gl.cpp	/^GLAPI void APIENTRY glMaterialxv (GLenum face, GLenum pname, const GLfixed *params)$/;"	f
glMatrixMode	gl.cpp	/^GLAPI void APIENTRY glMatrixMode (GLenum mode)$/;"	f
glMultMatrixf	gl.cpp	/^GLAPI void APIENTRY glMultMatrixf (const GLfloat *m)$/;"	f
glMultMatrixx	gl.cpp	/^GLAPI void APIENTRY glMultMatrixx (const GLfixed *m)$/;"	f
glMultiTexCoord4f	gl.cpp	/^GLAPI void APIENTRY glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)$/;"	f
glMultiTexCoord4x	gl.cpp	/^GLAPI void APIENTRY glMultiTexCoord4x (GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)$/;"	f
glNormal3f	gl.cpp	/^GLAPI void APIENTRY glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz)$/;"	f
glNormal3x	gl.cpp	/^GLAPI void APIENTRY glNormal3x (GLfixed nx, GLfixed ny, GLfixed nz)$/;"	f
glNormalPointer	gl.cpp	/^GLAPI void APIENTRY glNormalPointer (GLenum type, GLsizei stride, const GLvoid *pointer)$/;"	f
glOrthof	gl.cpp	/^GLAPI void APIENTRY glOrthof (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)$/;"	f
glOrthox	gl.cpp	/^GLAPI void APIENTRY glOrthox (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)$/;"	f
glPixelStorei	gl.cpp	/^GLAPI void APIENTRY glPixelStorei (GLenum pname, GLint param)$/;"	f
glPointParameterf	gl.cpp	/^GLAPI void APIENTRY glPointParameterf(GLenum pname, GLfloat param)$/;"	f
glPointParameterfv	gl.cpp	/^GLAPI void APIENTRY glPointParameterfv(GLenum pname, const GLfloat *params)$/;"	f
glPointParameterx	gl.cpp	/^GLAPI void APIENTRY glPointParameterx(GLenum pname, GLfixed param)$/;"	f
glPointParameterxv	gl.cpp	/^GLAPI void APIENTRY glPointParameterxv(GLenum pname, const GLfixed *params)$/;"	f
glPointSize	gl.cpp	/^GLAPI void APIENTRY glPointSize (GLfloat size)$/;"	f
glPointSizex	gl.cpp	/^GLAPI void APIENTRY glPointSizex (GLfixed size)$/;"	f
glPolygonOffset	gl.cpp	/^GLAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units)$/;"	f
glPolygonOffsetx	gl.cpp	/^GLAPI void APIENTRY glPolygonOffsetx (GLfixed factor, GLfixed units)$/;"	f
glPopMatrix	gl.cpp	/^GLAPI void APIENTRY glPopMatrix (void)$/;"	f
glPushMatrix	gl.cpp	/^GLAPI void APIENTRY glPushMatrix (void)$/;"	f
glReadPixels	gl.cpp	/^GLAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)$/;"	f
glRotatef	gl.cpp	/^GLAPI void APIENTRY glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z)$/;"	f
glRotatex	gl.cpp	/^GLAPI void APIENTRY glRotatex (GLfixed angle, GLfixed x, GLfixed y, GLfixed z)$/;"	f
glSampleCoverage	gl.cpp	/^GLAPI void APIENTRY glSampleCoverage (GLclampf value, GLboolean invert)$/;"	f
glSampleCoveragex	gl.cpp	/^GLAPI void APIENTRY glSampleCoveragex (GLclampx value, GLboolean invert)$/;"	f
glScalef	gl.cpp	/^GLAPI void APIENTRY glScalef (GLfloat x, GLfloat y, GLfloat z)$/;"	f
glScalex	gl.cpp	/^GLAPI void APIENTRY glScalex (GLfixed x, GLfixed y, GLfixed z)$/;"	f
glScissor	gl.cpp	/^GLAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height)$/;"	f
glShadeModel	gl.cpp	/^GLAPI void APIENTRY glShadeModel (GLenum mode)$/;"	f
glStencilFunc	gl.cpp	/^GLAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask)$/;"	f
glStencilMask	gl.cpp	/^GLAPI void APIENTRY glStencilMask (GLuint mask)$/;"	f
glStencilOp	gl.cpp	/^GLAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass)$/;"	f
glTexCoordPointer	gl.cpp	/^GLAPI void APIENTRY glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)$/;"	f
glTexEnvf	gl.cpp	/^GLAPI void APIENTRY glTexEnvf (GLenum target, GLenum pname, GLfloat param)$/;"	f
glTexEnvfv	gl.cpp	/^GLAPI void APIENTRY glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params)$/;"	f
glTexEnvx	gl.cpp	/^GLAPI void APIENTRY glTexEnvx (GLenum target, GLenum pname, GLfixed param)$/;"	f
glTexEnvxv	gl.cpp	/^GLAPI void APIENTRY glTexEnvxv (GLenum target, GLenum pname, const GLfixed *params)$/;"	f
glTexImage2D	gl.cpp	/^GLAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)$/;"	f
glTexParameterf	gl.cpp	/^GLAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param)$/;"	f
glTexParameteri	gl.cpp	/^GLAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param)$/;"	f
glTexParameterx	gl.cpp	/^GLAPI void APIENTRY glTexParameterx (GLenum target, GLenum pname, GLfixed param)$/;"	f
glTexSubImage2D	gl.cpp	/^GLAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)$/;"	f
glTranslatef	gl.cpp	/^GLAPI void APIENTRY glTranslatef (GLfloat x, GLfloat y, GLfloat z)$/;"	f
glTranslatex	gl.cpp	/^GLAPI void APIENTRY glTranslatex (GLfixed x, GLfixed y, GLfixed z)$/;"	f
glVertexPointer	gl.cpp	/^GLAPI void APIENTRY glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)$/;"	f
glViewport	gl.cpp	/^GLAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height)$/;"	f
glfunc	outfile.cpp	/^GLfuncstat glfunc;$/;"	v
glmAbs	glm.cpp	/^glmAbs(GLfloat f)$/;"	f	file:
glmAddGroup	glm.cpp	/^glmAddGroup(GLMmodel* model, char* name)$/;"	f
glmCross	glm.cpp	/^glmCross(GLfloat* u, GLfloat* v, GLfloat* n)$/;"	f	file:
glmDelete	glm.cpp	/^glmDelete(GLMmodel* model)$/;"	f
glmDimensions	glm.cpp	/^glmDimensions(GLMmodel* model, GLfloat* dimensions)$/;"	f
glmDirName	glm.cpp	/^glmDirName(char* path)$/;"	f	file:
glmDot	glm.cpp	/^glmDot(GLfloat* u, GLfloat* v)$/;"	f	file:
glmDraw	glm.cpp	/^glmDraw(GLMmodel* model, GLuint mode)$/;"	f
glmEqual	glm.cpp	/^glmEqual(GLfloat* u, GLfloat* v, GLfloat epsilon)$/;"	f	file:
glmFacetNormals	glm.cpp	/^glmFacetNormals(GLMmodel* model)$/;"	f
glmFindGroup	glm.cpp	/^glmFindGroup(GLMmodel* model, char* name)$/;"	f
glmFindMaterial	glm.cpp	/^glmFindMaterial(GLMmodel* model, char* name)$/;"	f
glmFirstPass	glm.cpp	/^glmFirstPass(GLMmodel* model, FILE* file)$/;"	f	file:
glmLinearTexture	glm.cpp	/^glmLinearTexture(GLMmodel* model)$/;"	f
glmMax	glm.cpp	/^glmMax(GLfloat a, GLfloat b)$/;"	f	file:
glmNormalize	glm.cpp	/^glmNormalize(GLfloat* v)$/;"	f	file:
glmReadMTL	glm.cpp	/^glmReadMTL(GLMmodel* model, char* name)$/;"	f	file:
glmReadOBJ	glm.cpp	/^glmReadOBJ(char* filename)$/;"	f
glmReadPPM	glm.cpp	/^glmReadPPM(char* filename, int* width, int* height)$/;"	f
glmReverseWinding	glm.cpp	/^glmReverseWinding(GLMmodel* model)$/;"	f
glmScale	glm.cpp	/^glmScale(GLMmodel* model, GLfloat scale)$/;"	f
glmSecondPass	glm.cpp	/^glmSecondPass(GLMmodel* model, FILE* file)$/;"	f	file:
glmSpheremapTexture	glm.cpp	/^glmSpheremapTexture(GLMmodel* model)$/;"	f
glmUnitize	glm.cpp	/^glmUnitize(GLMmodel* model)$/;"	f
glmVertexNormals	glm.cpp	/^glmVertexNormals(GLMmodel* model, GLfloat angle)$/;"	f
glmWeld	glm.cpp	/^glmWeld(GLMmodel* model, GLfloat epsilon)$/;"	f
glmWeldVectors	glm.cpp	/^glmWeldVectors(GLfloat* vectors, GLuint* numvectors, GLfloat epsilon)$/;"	f
glmWriteMTL	glm.cpp	/^glmWriteMTL(GLMmodel* model, char* modelpath, char* mtllibname)$/;"	f	file:
glmWriteOBJ	glm.cpp	/^glmWriteOBJ(GLMmodel* model, char* filename, GLuint mode)$/;"	f
gltLoadTGA	gltools_TGA_rev.cpp	/^GLbyte *gltLoadTGA(const char *szFileName, GLint *iWidth, GLint *iHeight, GLint *iComponents, GLenum *eFormat)$/;"	f
gltWriteTGA	gltools_TGA_rev.cpp	/^GLint gltWriteTGA(const char *szFileName)$/;"	f
gluBeginPolygon	glues/libtess/tess.c	/^void APIENTRY gluBeginPolygon(GLUtesselator* tess)$/;"	f
gluBuild2DMipmapLevels	glues/glues_mipmap.c	/^gluBuild2DMipmapLevels(GLenum target, GLint internalFormat,$/;"	f
gluBuild2DMipmapLevelsCore	glues/glues_mipmap.c	/^static int gluBuild2DMipmapLevelsCore(GLenum target, GLint internalFormat,$/;"	f	file:
gluBuild2DMipmaps	glues/glues_mipmap.c	/^gluBuild2DMipmaps(GLenum target, GLint internalFormat, GLsizei width,$/;"	f
gluCheckExtension	glues/glues_registry.c	/^GLAPI GLboolean APIENTRY gluCheckExtension(const GLubyte* extName, const GLubyte* extString)$/;"	f
gluCylinder	glues/glues_quad.c	/^GLAPI void APIENTRY gluCylinder(GLUquadric* qobj, GLfloat baseRadius,$/;"	f
gluDeleteQuadric	glues/glues_quad.c	/^GLAPI void APIENTRY gluDeleteQuadric(GLUquadric* state)$/;"	f
gluDeleteTess	glues/libtess/tess.c	/^GLAPI void APIENTRY gluDeleteTess(GLUtesselator* tess)$/;"	f
gluDisk	glues/glues_quad.c	/^GLAPI void APIENTRY gluDisk(GLUquadric* qobj, GLfloat innerRadius,$/;"	f
gluEndPolygon	glues/libtess/tess.c	/^void APIENTRY gluEndPolygon(GLUtesselator* tess)$/;"	f
gluErrorString	glues/glues_error.c	/^GLAPI const GLubyte* APIENTRY gluErrorString(GLenum errorCode)$/;"	f
gluGetString	glues/glues_registry.c	/^GLAPI const GLubyte* APIENTRY gluGetString(GLenum name)$/;"	f
gluGetTessProperty	glues/libtess/tess.c	/^GLAPI void APIENTRY gluGetTessProperty(GLUtesselator* tess, GLenum which, GLfloat* value)$/;"	f
gluLookAt	demo.cpp	/^static void gluLookAt(GLfloat eyex, GLfloat eyey, GLfloat eyez,$/;"	f	file:
gluLookAt	glues/glues_project.c	/^gluLookAt(GLfloat eyex, GLfloat eyey, GLfloat eyez, GLfloat centerx,$/;"	f
gluNewQuadric	glues/glues_quad.c	/^GLAPI GLUquadric* APIENTRY gluNewQuadric(void)$/;"	f
gluNewTess	glues/libtess/tess.c	/^GLAPI GLUtesselator* APIENTRY gluNewTess(void)$/;"	f
gluNextContour	glues/libtess/tess.c	/^void APIENTRY gluNextContour(GLUtesselator* tess, GLenum type)$/;"	f
gluOrtho2D	glues/glues_project.c	/^gluOrtho2D(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top)$/;"	f
gluPartialDisk	glues/glues_quad.c	/^GLAPI void APIENTRY gluPartialDisk(GLUquadric* qobj, GLfloat innerRadius,$/;"	f
gluPerspective	demo.cpp	/^static void gluPerspective(GLfloat fovy, GLfloat aspect,$/;"	f	file:
gluPerspective	glues/glues_project.c	/^gluPerspective(GLfloat fovy, GLfloat aspect, GLfloat zNear, GLfloat zFar)$/;"	f
gluPickMatrix	glues/glues_project.c	/^gluPickMatrix(GLfloat x, GLfloat y, GLfloat deltax, GLfloat deltay,$/;"	f
gluProject	glues/glues_project.c	/^gluProject(GLfloat objx, GLfloat objy, GLfloat objz, $/;"	f
gluQuadricCallback	glues/glues_quad.c	/^GLAPI void APIENTRY gluQuadricCallback(GLUquadric* qobj, GLenum which, _GLUfuncptr fn)$/;"	f
gluQuadricDrawStyle	glues/glues_quad.c	/^GLAPI void APIENTRY gluQuadricDrawStyle(GLUquadric* qobj, GLenum drawStyle)$/;"	f
gluQuadricError	glues/glues_quad.c	/^static void gluQuadricError(GLUquadric* qobj, GLenum which)$/;"	f	file:
gluQuadricNormals	glues/glues_quad.c	/^GLAPI void APIENTRY gluQuadricNormals(GLUquadric* qobj, GLenum normals)$/;"	f
gluQuadricOrientation	glues/glues_quad.c	/^GLAPI void APIENTRY gluQuadricOrientation(GLUquadric* qobj, GLenum orientation)$/;"	f
gluQuadricTexture	glues/glues_quad.c	/^GLAPI void APIENTRY gluQuadricTexture(GLUquadric* qobj, GLboolean textureCoords)$/;"	f
gluScaleImage	glues/glues_mipmap.c	/^gluScaleImage(GLenum format, GLsizei widthin, GLsizei heightin,$/;"	f
gluSphere	glues/glues_quad.c	/^GLAPI void APIENTRY gluSphere(GLUquadric* qobj, GLfloat radius, GLint slices, GLint stacks)$/;"	f
gluTessBeginContour	glues/libtess/tess.c	/^void APIENTRY gluTessBeginContour(GLUtesselator* tess)$/;"	f
gluTessBeginPolygon	glues/libtess/tess.c	/^GLAPI void APIENTRY gluTessBeginPolygon(GLUtesselator* tess, void* data)$/;"	f
gluTessCallback	glues/libtess/tess.c	/^GLAPI void APIENTRY gluTessCallback(GLUtesselator* tess, GLenum which, _GLUfuncptr fn)$/;"	f
gluTessEndContour	glues/libtess/tess.c	/^void APIENTRY gluTessEndContour(GLUtesselator* tess)$/;"	f
gluTessEndPolygon	glues/libtess/tess.c	/^void APIENTRY gluTessEndPolygon(GLUtesselator* tess)$/;"	f
gluTessNormal	glues/libtess/tess.c	/^GLAPI void APIENTRY gluTessNormal(GLUtesselator* tess, GLfloat x, GLfloat y, GLfloat z)$/;"	f
gluTessProperty	glues/libtess/tess.c	/^GLAPI void APIENTRY gluTessProperty(GLUtesselator* tess, GLenum which, GLfloat value)$/;"	f
gluTessVertex	glues/libtess/tess.c	/^void APIENTRY gluTessVertex(GLUtesselator* tess, GLfloat coords[3], void* data)$/;"	f
gluUnProject	glues/glues_project.c	/^gluUnProject(GLfloat winx, GLfloat winy, GLfloat winz,$/;"	f
gluUnProject4	glues/glues_project.c	/^gluUnProject4(GLfloat winx, GLfloat winy, GLfloat winz, GLfloat clipw,$/;"	f
gm	geometry.cpp	/^Geometry gm;$/;"	v
green	ogles.h	/^    GLfloat     green;$/;"	m	struct:Color
green_size	ogles.h	/^    GLuint      green_size;$/;"	m	struct:MipmapArray
groups	glm.h	/^  GLMgroup*    groups;          \/* linked list of groups *\/$/;"	m	struct:_GLMmodel
halve1DimagePackedPixel	glues/glues_mipmap.c	/^static void halve1DimagePackedPixel(int components,$/;"	f	file:
halve1Dimage_ubyte	glues/glues_mipmap.c	/^static void halve1Dimage_ubyte(GLint components, GLuint width, GLuint height,$/;"	f	file:
halveImage	glues/glues_mipmap.c	/^static void halveImage(GLint components, GLuint width, GLuint height,$/;"	f	file:
halveImagePackedPixel	glues/glues_mipmap.c	/^static void halveImagePackedPixel(int components,$/;"	f	file:
halveImage_ubyte	glues/glues_mipmap.c	/^static void halveImage_ubyte(GLint components, GLuint width, GLuint height,$/;"	f	file:
handle	glues/libtess/priorityq-heap.h	/^   PQhandle handle;$/;"	m	struct:__anon16
handles	glues/libtess/priorityq-heap.h	/^   PQhandleElem* handles;$/;"	m	struct:PriorityQ
head	glues/libtess/dict-list.h	/^   DictNode head;$/;"	m	struct:Dict
head	glues/libtess/dict.h	/^   DictNode head;$/;"	m	struct:Dict
heap	glues/libtess/priorityq-sort.h	/^   PriorityQHeap* heap;$/;"	m	struct:PriorityQ
heap	glues/libtess/priorityq.h	/^   PriorityQHeap* heap;$/;"	m	struct:PriorityQ
height	glm.h	/^    GLint   height;               \/* height of texture *\/$/;"	m	struct:_GLMtextures
height	glm.h	/^  GLint   height;               \/* height of texture *\/$/;"	m	struct:_GLMmaterial
height	gltools_TGA_rev.cpp	/^    unsigned short	height;                 \/\/ height in pixels$/;"	m	struct:__anon11	file:
height	ogles.h	/^    GLint       width,height;$/;"	m	struct:ViewPort
height	ogles.h	/^    GLsizei     height;$/;"	m	struct:ScissorTest
height	ogles.h	/^    GLuint      height;$/;"	m	struct:MipmapArray
height	ogles.h	/^    GLuint      height;$/;"	m	struct:TextureImage
height	surface.h	/^        GLsizei height;$/;"	m	struct:EGL::Rect
i	geometry.h	/^		int      		i;$/;"	m	struct:Geometry
i	glues/glues_mipmap.c	/^   int i;$/;"	m	union:__anon14	file:
id	glm.h	/^  GLuint  id;                   \/* texture id *\/$/;"	m	struct:_GLMmaterial
identsize	gltools_TGA_rev.cpp	/^    GLbyte	identsize;              \/\/ Size of ID field that follows header (0)$/;"	m	struct:__anon11	file:
imageType	gltools_TGA_rev.cpp	/^    GLbyte	imageType;              \/\/ 0 = none, 1 = indexed, 2 = rgb, 3 = grey, +8=rle$/;"	m	struct:__anon11	file:
image_size	glues/glues_mipmap.c	/^static GLint image_size(GLint width, GLint height, GLenum format, GLenum type)$/;"	f	file:
image_size	ogles.h	/^    GLuint      image_size;$/;"	m	struct:MipmapArray
index	glm.cpp	/^    GLuint index;$/;"	m	struct:_GLMnode	file:
indices	ogles.h	/^    const void  * indices;$/;"	m	struct:DrawElemCmd
init_scene	sdl_cylinder.cpp	/^void init_scene(int width, int height)$/;"	f
init_scene	sdl_disk.c	/^void init_scene(int width, int height)$/;"	f
init_scene	sdl_mipmap.c	/^void init_scene(int width, int height)$/;"	f
init_scene	sdl_sphere.c	/^void init_scene(int width, int height)$/;"	f
initialize	geometry.cpp	/^void Geometry::initialize()$/;"	f	class:Geometry
initialized	glues/libtess/priorityq-heap.h	/^   int           initialized;$/;"	m	struct:PriorityQ
initialized	glues/libtess/priorityq-sort.h	/^   int            initialized;$/;"	m	struct:PriorityQ
initialized	glues/libtess/priorityq.h	/^   int initialized;$/;"	m	struct:PriorityQ
inside	glues/libtess/mesh.h	/^   GLboolean    inside;         \/* this face is in the polygon interior *\/$/;"	m	struct:GLUface
inside	glues/libtess/sweep.h	/^   GLboolean     inside;        \/* is this region inside the polygon?      *\/$/;"	m	struct:ActiveRegion
internal_format	ogles.h	/^    GLint       internal_format;$/;"	m	struct:TextureImage
internal_format	ogles.h	/^    GLuint      internal_format;$/;"	m	struct:MipmapArray
invalidstamp	rasterizer.h	/^    int     validstamp, scanstamp, coldscan, invalidstamp;$/;"	m	class:Rasterizer
isLegalFormatForPackedPixelType	glues/glues_mipmap.c	/^static GLboolean isLegalFormatForPackedPixelType(GLenum format, GLenum type)$/;"	f	file:
isLegalLevels	glues/glues_mipmap.c	/^static GLboolean isLegalLevels(GLint userLevel,GLint baseLevel,GLint maxLevel,$/;"	f	file:
isRenderDone	drv_impl.cpp	/^bool        isRenderDone = false;$/;"	v
isTypePackedPixel	glues/glues_mipmap.c	/^static GLboolean isTypePackedPixel(GLenum type)$/;"	f	file:
itoa	drv_impl.cpp	/^char* itoa( int value, char* result, int base ) $/;"	f
key	glues/libtess/dict-list.h	/^   DictKey   key;$/;"	m	struct:DictNode
key	glues/libtess/dict.h	/^   DictKey   key;$/;"	m	struct:DictNode
key	glues/libtess/priorityq-heap.h	/^   PQkey key;$/;"	m	struct:__anon17
keys	glues/libtess/priorityq-sort.h	/^   PQkey*         keys;$/;"	m	struct:PriorityQ
keys	glues/libtess/priorityq.h	/^   PQkey*         keys;$/;"	m	struct:PriorityQ
kick_small_area_count	geometry.h	/^        int             kick_small_area_count;$/;"	m	struct:Geometry
kind	ogles.h	/^    U8          kind;$/;"	m	struct:Node
lastEdge	glues/libtess/tess.h	/^   GLUhalfEdge* lastEdge;       \/* lastEdge->Org is the most recent vertex *\/$/;"	m	struct:GLUtesselator
lastTime	main.cpp	/^static int lastTime = 0;$/;"	v	file:
lastTime	main.cpp	/^time_t lastTime = time(0), updateTime = time(0);$/;"	v
left	ogles.h	/^    GLint       left;$/;"	m	struct:ScissorTest
legalFormat	glues/glues_mipmap.c	/^static GLboolean legalFormat(GLenum format)$/;"	f	file:
legalType	glues/glues_mipmap.c	/^static GLboolean legalType(GLenum type)$/;"	f	file:
len	cams.h	/^    unsigned char len;      \/\/ length multiplier$/;"	m	struct:__anon6
leq	glues/libtess/dict-list.h	/^   int      (*leq)(void *frame, DictKey key1, DictKey key2);$/;"	m	struct:Dict
leq	glues/libtess/dict.h	/^   int      (*leq)(void* frame, DictKey key1, DictKey key2);$/;"	m	struct:Dict
leq	glues/libtess/priorityq-heap.h	/^   int           (*leq)(PQkey key1, PQkey key2);$/;"	m	struct:PriorityQ
leq	glues/libtess/priorityq-sort.h	/^   int            (*leq)(PQkey key1, PQkey key2);$/;"	m	struct:PriorityQ
leq	glues/libtess/priorityq.h	/^   int (*leq)(PQkey key1, PQkey key2);$/;"	m	struct:PriorityQ
level	ogles.h	/^    GLuint      level;$/;"	m	struct:TextureImage
light_model_ambient	context.h	/^        Color           light_model_ambient;$/;"	m	class:EGL::Context
light_model_two_side	context.h	/^        GLboolean       light_model_two_side;$/;"	m	class:EGL::Context
lighting	geometry.cpp	/^void Geometry::lighting (void)     \/\/RETURN BACK Color[0]~Color[1]~Color[2]~Color[3]$/;"	f	class:Geometry
lighting_enable	context.h	/^        GLboolean       lighting_enable;$/;"	m	class:EGL::Context
lihgt_unit_mask	context.h	/^        GLubyte         lihgt_unit_mask;$/;"	m	class:EGL::Context
loadSceneTextures	main.cpp	/^bool loadSceneTextures()$/;"	f
loadSimpleTextures	main.cpp	/^bool loadSimpleTextures()$/;"	f
loadTextures	main.cpp	/^bool loadTextures(char *filename)$/;"	f
logic_op	context.h	/^        LogicOpTest     logic_op;$/;"	m	class:EGL::Context
lonelyTriList	glues/libtess/tess.h	/^  GLUface*      lonelyTriList;$/;"	m	struct:GLUtesselator
luminance_size	ogles.h	/^    GLuint      luminance_size;$/;"	m	struct:MipmapArray
m_AlphaBuffer	surface.h	/^        U8 *	    m_AlphaBuffer;		\/\/ pointer to alpha buffer$/;"	m	class:EGL::Surface
m_AlphaSize	config.h	/^        EGLint	m_AlphaSize;$/;"	m	class:EGL::Config
m_Bitmap	surface.h	/^        HBITMAP	  m_Bitmap;			\/\/ windows bitmap handle$/;"	m	class:EGL::Surface
m_Bitmap	surface.h	/^        void *	  m_Bitmap;			\/\/ windows bitmap handle$/;"	m	class:EGL::Surface
m_BlueSize	config.h	/^        EGLint	m_BlueSize;$/;"	m	class:EGL::Config
m_BufferSize	config.h	/^        EGLint	m_BufferSize;$/;"	m	class:EGL::Config
m_ColorBuffer	surface.h	/^        U32 *     m_ColorBuffer;    \/\/ pointer to color buffer RGB 24bit$/;"	m	class:EGL::Surface
m_Config	surface.h	/^        Config	  m_Config;			\/\/ configuration arguments$/;"	m	class:EGL::Surface
m_ConfigCaveat	config.h	/^        EGLint	m_ConfigCaveat;$/;"	m	class:EGL::Config
m_ConfigID	config.h	/^        EGLint	m_ConfigID;$/;"	m	class:EGL::Config
m_CurrentContext	surface.h	/^        Context *	m_CurrentContext;$/;"	m	class:EGL::Surface
m_DepthBuffer	surface.h	/^        U16 *	    m_DepthBuffer;		\/\/ pointer to Z-buffer base address$/;"	m	class:EGL::Surface
m_DepthSize	config.h	/^        EGLint	m_DepthSize;$/;"	m	class:EGL::Config
m_Disposed	surface.h	/^        bool	    m_Disposed;			\/\/ the surface$/;"	m	class:EGL::Surface
m_FrameBuffer	surface.h	/^        U16 *	    m_FrameBuffer;		\/\/ pointer to frame buffer base address 5-6-5$/;"	m	class:EGL::Surface
m_GreenSize	config.h	/^        EGLint	m_GreenSize;$/;"	m	class:EGL::Config
m_HDC	surface.h	/^        HDC		    m_HDC;				\/\/ windows device context handle$/;"	m	class:EGL::Surface
m_HDC	surface.h	/^        void *    m_HDC;				\/\/ windows device context handle$/;"	m	class:EGL::Surface
m_Height	config.h	/^        EGLint	m_Height;$/;"	m	class:EGL::Config
m_Level	config.h	/^        EGLint	m_Level;$/;"	m	class:EGL::Config
m_MaxPBufferHeight	config.h	/^        EGLint	m_MaxPBufferHeight;$/;"	m	class:EGL::Config
m_MaxPBufferPixels	config.h	/^        EGLint	m_MaxPBufferPixels;$/;"	m	class:EGL::Config
m_MaxPBufferWidth	config.h	/^        EGLint	m_MaxPBufferWidth;$/;"	m	class:EGL::Config
m_NativeDisplay	display.h	/^        NativeDisplayType		m_NativeDisplay;$/;"	m	class:EGL::Display
m_NativeRenderable	config.h	/^        EGLint	m_NativeRenderable;$/;"	m	class:EGL::Config
m_NativeVisualID	config.h	/^        EGLint	m_NativeVisualID;$/;"	m	class:EGL::Config
m_NativeVisualType	config.h	/^        EGLint	m_NativeVisualType;$/;"	m	class:EGL::Config
m_Rect	surface.h	/^        Rect	    m_Rect;$/;"	m	class:EGL::Surface
m_RedSize	config.h	/^        EGLint	m_RedSize;$/;"	m	class:EGL::Config
m_SampleBuffers	config.h	/^        EGLint	m_SampleBuffers;$/;"	m	class:EGL::Config
m_Samples	config.h	/^        EGLint	m_Samples;$/;"	m	class:EGL::Config
m_Stack	matrix_stack.h	/^        Matrix4x4	*m_Stack;$/;"	m	class:EGL::MatrixStack
m_StackPointer	matrix_stack.h	/^        I32			m_StackPointer;$/;"	m	class:EGL::MatrixStack
m_StackSize	matrix_stack.h	/^        I32			m_StackSize;$/;"	m	class:EGL::MatrixStack
m_StencilBuffer	surface.h	/^        U32 *	    m_StencilBuffer;	\/\/ stencil buffer$/;"	m	class:EGL::Surface
m_StencilSize	config.h	/^        EGLint	m_StencilSize;$/;"	m	class:EGL::Config
m_SurfaceType	config.h	/^        EGLint	m_SurfaceType;$/;"	m	class:EGL::Config
m_TransparentBlueValue	config.h	/^        EGLint	m_TransparentBlueValue;$/;"	m	class:EGL::Config
m_TransparentGreenValue	config.h	/^        EGLint	m_TransparentGreenValue;$/;"	m	class:EGL::Config
m_TransparentRedValue	config.h	/^        EGLint	m_TransparentRedValue;$/;"	m	class:EGL::Config
m_TransparentType	config.h	/^        EGLint	m_TransparentType;$/;"	m	class:EGL::Config
m_Width	config.h	/^        EGLint  m_Width;$/;"	m	class:EGL::Config
m_config	context.h	/^        Config			m_config;			\/\/ copy of configuration args$/;"	m	class:EGL::Context
m_current	context.h	/^        bool    m_current;$/;"	m	class:EGL::Context
m_current_stack	context.h	/^        MatrixStack     * m_current_stack;$/;"	m	class:EGL::Context
m_disposed	context.h	/^        bool    m_disposed;$/;"	m	class:EGL::Context
m_draw_surface	context.h	/^        Surface         * m_draw_surface;		\/\/ current surface for drawing$/;"	m	class:EGL::Context
m_inversed_modelview	context.h	/^        Matrix3x3       m_inversed_modelview;$/;"	m	class:EGL::Context
m_light	context.h	/^        Material        m_light;$/;"	m	class:EGL::Context
m_matrix_mode	context.h	/^        GLenum	        m_matrix_mode;$/;"	m	class:EGL::Context
m_modelview_stack	context.h	/^        MatrixStack     m_modelview_stack;$/;"	m	class:EGL::Context
m_projection_stack	context.h	/^        MatrixStack     m_projection_stack;$/;"	m	class:EGL::Context
m_read_surface	context.h	/^        Surface 		* m_read_surface;		\/\/ current surface for reading$/;"	m	class:EGL::Context
m_texture_stack	context.h	/^        MatrixStack     m_texture_stack[EGL_NUM_TEXTURE_UNITS];$/;"	m	class:EGL::Context
m_value	fixed.h	/^        GLfixed m_value;$/;"	m	class:EGL::Fixed
m_value	fixed.h	/^        GLfixed m_value;$/;"	m	class:EGL::Fixed24D8
m_value	fixed.h	/^        GLfixed m_value;$/;"	m	class:EGL::Fixed28D4
main	main.cpp	/^int main(int argc, char **argv)$/;"	f
main	sdl_disk.c	/^int main(int argc, char** argv)$/;"	f
main	sdl_mipmap.c	/^int main(int argc, char** argv)$/;"	f
main	sdl_sphere.c	/^int main(int argc, char** argv)$/;"	f
make_texture	sdl_cylinder.cpp	/^GLubyte* make_texture(int maxs, int maxt)$/;"	f
make_texture	sdl_disk.c	/^GLubyte* make_texture(int maxs, int maxt)$/;"	f
make_texture	sdl_mipmap.c	/^GLubyte* make_texture(int maxs, int maxt)$/;"	f
make_texture	sdl_sphere.c	/^GLubyte* make_texture(int maxs, int maxt)$/;"	f
map_name	glm.h	/^  char    *map_name;             \/* name of texture *\/$/;"	m	struct:_GLMmaterial
marked	glues/libtess/mesh.h	/^   GLboolean    marked;         \/* flag for conversion to strips *\/$/;"	m	struct:GLUface
mask	ogles.h	/^    GLuint      mask;$/;"	m	struct:StencilTest
material	glm.h	/^  GLuint            material;       \/* index to material for group *\/$/;"	m	struct:_GLMgroup
material_ambient	ogles.h	/^    Color       material_ambient;$/;"	m	struct:Material
material_diffuse	ogles.h	/^    Color       material_diffuse;$/;"	m	struct:Material
material_emission	ogles.h	/^    Color       material_emission;$/;"	m	struct:Material
material_shininess	ogles.h	/^    GLfixed     material_shininess;$/;"	m	struct:Material
material_shininess	ogles.h	/^    GLfloat     material_shininess;$/;"	m	struct:Material
material_specular	ogles.h	/^    Color       material_specular;$/;"	m	struct:Material
materials	glm.h	/^  GLMmaterial* materials;       \/* array of materials *\/$/;"	m	struct:_GLMmodel
max	glues/libtess/priorityq-heap.h	/^   long          max;$/;"	m	struct:PriorityQ
max	glues/libtess/priorityq-sort.h	/^   PQhandle       max;$/;"	m	struct:PriorityQ
max	glues/libtess/priorityq.h	/^   PQhandle       max;$/;"	m	struct:PriorityQ
measure_stat	context.h	/^        Statistics      measure_stat;$/;"	m	class:EGL::Context
memAlloc	glues/libtess/memalloc.h	47;"	d
memAlloc	glues/libtess/memalloc.h	49;"	d
memFree	glues/libtess/memalloc.h	41;"	d
memInit	glues/libtess/memalloc.h	43;"	d
memRealloc	glues/libtess/memalloc.h	40;"	d
mesh	glues/libtess/tess.h	/^   GLUmesh* mesh;               \/* stores the input contours, and eventually$/;"	m	struct:GLUtesselator
mesh	offviewer.h	/^static Mesh *mesh = NULL;$/;"	v
mode	ogles.h	/^    GLenum      mode;$/;"	m	struct:Fog
mtllibname	glm.h	/^  char*    mtllibname;          \/* name of the material library *\/$/;"	m	struct:_GLMmodel
name	glm.h	/^    char *name;$/;"	m	struct:_GLMtextures
name	glm.h	/^  char    *name;                 \/* name of material *\/$/;"	m	struct:_GLMmaterial
name	glm.h	/^  char*             name;           \/* name of this group *\/$/;"	m	struct:_GLMgroup
nearestPower	glues/glues_mipmap.c	/^static int nearestPower(GLuint value)$/;"	f	file:
newGLObject	demo.cpp	/^static GLOBJECT * newGLObject(long vertices, int vertexComponents,$/;"	f	file:
next	glm.cpp	/^    struct _GLMnode* next;$/;"	m	struct:_GLMnode	typeref:struct:_GLMnode::_GLMnode	file:
next	glm.h	/^  struct _GLMgroup* next;           \/* pointer to next group in model *\/$/;"	m	struct:_GLMgroup	typeref:struct:_GLMgroup::_GLMgroup
next	glues/libtess/dict-list.h	/^   DictNode* next;$/;"	m	struct:DictNode
next	glues/libtess/dict.h	/^   DictNode* next;$/;"	m	struct:DictNode
next	glues/libtess/mesh.h	/^   GLUface*     next;           \/* next face (never NULL) *\/$/;"	m	struct:GLUface
next	glues/libtess/mesh.h	/^   GLUhalfEdge* next;           \/* doubly-linked list (prev==Sym->next) *\/$/;"	m	struct:GLUhalfEdge
next	glues/libtess/mesh.h	/^   GLUvertex*    next;          \/* next vertex (never NULL) *\/$/;"	m	struct:GLUvertex
next	ogles.h	/^    struct Node * next;$/;"	m	struct:Node	typeref:struct:Node::Node
next	ogles.h	/^    struct RenderState * next;$/;"	m	struct:RenderState	typeref:struct:RenderState::RenderState
next_tile	geometry.h	/^  struct tileData * next_tile;$/;"	m	struct:tileData	typeref:struct:tileData::tileData
next_triangle	geometry.h	/^  struct triangleData * next_triangle;$/;"	m	struct:triangleData	typeref:struct:triangleData::triangleData
nfaces	offviewer.h	/^    int nfaces;$/;"	m	struct:Mesh
nindices	glm.h	/^  GLuint nindices[3];           \/* array of triangle normal indices *\/$/;"	m	struct:_GLMtriangle
noBegin	glues/libtess/tess.c	/^\/*ARGSUSED*\/ static void APIENTRY noBegin(GLenum type) {}$/;"	f	file:
noCombine	glues/libtess/tess.c	/^\/*ARGSUSED*\/ static void APIENTRY noCombine(GLfloat coords[3], void *data[4],$/;"	f	file:
noEdgeFlag	glues/libtess/tess.c	/^\/*ARGSUSED*\/ static void APIENTRY noEdgeFlag(GLboolean boundaryEdge ) {}$/;"	f	file:
noEnd	glues/libtess/tess.c	/^\/*ARGSUSED*\/ static void APIENTRY noEnd(void) {}$/;"	f	file:
noError	glues/libtess/tess.c	/^\/*ARGSUSED*\/ static void APIENTRY noError(GLenum errnum) {}$/;"	f	file:
noMesh	glues/libtess/tess.c	/^\/*ARGSUSED*\/ static void APIENTRY noMesh(GLUmesh* mesh) {}$/;"	f	file:
noVertex	glues/libtess/tess.c	/^\/*ARGSUSED*\/ static void APIENTRY noVertex(void* data) {}$/;"	f	file:
node	glues/libtess/priorityq-heap.h	/^   PQhandle node;$/;"	m	struct:__anon17
nodeUp	glues/libtess/sweep.h	/^   DictNode*     nodeUp;        \/* dictionary node corresponding to eUp    *\/$/;"	m	struct:ActiveRegion
nodes	glues/libtess/priorityq-heap.h	/^   PQnode*       nodes;$/;"	m	struct:PriorityQ
normal	glues/libtess/tess.h	/^   GLfloat normal[3]; \/* user-specified normal (if provided) *\/$/;"	m	struct:GLUtesselator
normal	offviewer.h	/^    float normal[3];$/;"	m	struct:Face
normalArray	demo.cpp	/^    GLfixed *normalArray;$/;"	m	struct:__anon3	file:
normal_array	context.h	/^        ArrayPointer    normal_array;$/;"	m	class:EGL::Context
normalize	glues/glues_project.c	/^static void normalize(GLfloat v[3])$/;"	f	file:
normalize_enable	context.h	/^        GLboolean       normalize_enable;$/;"	m	class:EGL::Context
normalized_device_coord	geometry.h	/^		float    		normalized_device_coord[3];$/;"	m	struct:Geometry
normalizef	uglu.h	/^static void normalizef(float v[3])$/;"	f
normalizex	uglu.h	/^void normalizex(GLfixed* v)$/;"	f
normals	glm.h	/^  GLfloat* normals;             \/* array of normals *\/$/;"	m	struct:_GLMmodel
normals	glues/glues_quad.c	/^    GLint       normals;$/;"	m	struct:GLUquadric	file:
num_of_state_node	ogles.h	/^    int         num_of_state_node;$/;"	m	struct:Statistics
num_of_tile_node	ogles.h	/^    int         num_of_tile_node;$/;"	m	struct:Statistics
num_of_tiles	ogles.h	/^    int         num_of_tiles;$/;"	m	struct:Statistics
num_of_triangle	ogles.h	/^    int         num_of_triangle;$/;"	m	struct:Statistics
num_of_vertex	ogles.h	/^    int         num_of_vertex;$/;"	m	struct:Statistics
numfacetnorms	glm.h	/^  GLuint   numfacetnorms;       \/* number of facetnorms in model *\/$/;"	m	struct:_GLMmodel
numgroups	glm.h	/^  GLuint       numgroups;       \/* number of groups in model *\/$/;"	m	struct:_GLMmodel
nummaterials	glm.h	/^  GLuint       nummaterials;    \/* number of materials in model *\/$/;"	m	struct:_GLMmodel
numnormals	glm.h	/^  GLuint   numnormals;          \/* number of normals in model *\/$/;"	m	struct:_GLMmodel
numtexcoords	glm.h	/^  GLuint   numtexcoords;        \/* number of texcoords in model *\/$/;"	m	struct:_GLMmodel
numtriangles	glm.h	/^  GLuint            numtriangles;   \/* number of triangles in this group *\/$/;"	m	struct:_GLMgroup
numtriangles	glm.h	/^  GLuint       numtriangles;    \/* number of triangles in model *\/$/;"	m	struct:_GLMmodel
numvertices	glm.h	/^  GLuint   numvertices;         \/* number of vertices in model *\/$/;"	m	struct:_GLMmodel
nverts	offviewer.h	/^    int nverts;$/;"	m	struct:Face
nverts	offviewer.h	/^    int nverts;$/;"	m	struct:Mesh
nx	ogles.h	/^    GLfloat     nx;$/;"	m	struct:Normal
ny	ogles.h	/^    GLfloat     ny;$/;"	m	struct:Normal
nz	ogles.h	/^    GLfloat     nz;$/;"	m	struct:Normal
op	ogles.h	/^    GLenum      op;$/;"	m	struct:LogicOpTest
operator !=	fixed.h	/^        inline bool operator!=(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator !=	fixed.h	/^        inline bool operator!=(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator !=	fixed.h	/^        inline bool operator!=(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator %	fixed.h	/^        inline Fixed operator%(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator %	fixed.h	/^        inline Fixed24D8 operator%(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator %	fixed.h	/^        inline Fixed28D4 operator%(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator &	fixed.h	/^        inline Fixed operator&(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator &	fixed.h	/^        inline Fixed24D8 operator&(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator &	fixed.h	/^        inline Fixed28D4 operator&(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator *	fixed.h	/^        inline Fixed operator*(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator *	fixed.h	/^        inline Fixed operator*(const GLfixed& other) const$/;"	f	class:EGL::Fixed
operator *	fixed.h	/^        inline Fixed24D8 operator*(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator *	fixed.h	/^        inline Fixed24D8 operator*(const GLfixed& other) const$/;"	f	class:EGL::Fixed24D8
operator *	fixed.h	/^        inline Fixed28D4 operator*(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator *	fixed.h	/^        inline Fixed28D4 operator*(const GLfixed& other) const$/;"	f	class:EGL::Fixed28D4
operator *=	fixed.h	/^        inline Fixed& operator*=(const Fixed& other)$/;"	f	class:EGL::Fixed
operator *=	fixed.h	/^        inline Fixed24D8& operator*=(const Fixed24D8& other)$/;"	f	class:EGL::Fixed24D8
operator *=	fixed.h	/^        inline Fixed28D4& operator*=(const Fixed28D4& other)$/;"	f	class:EGL::Fixed28D4
operator +	fixed.h	/^        inline Fixed operator+(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator +	fixed.h	/^        inline Fixed24D8 operator+(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator +	fixed.h	/^        inline Fixed28D4 operator+(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator +=	fixed.h	/^        inline Fixed& operator+=(const Fixed& other)$/;"	f	class:EGL::Fixed
operator +=	fixed.h	/^        inline Fixed24D8& operator+=(const Fixed24D8& other)$/;"	f	class:EGL::Fixed24D8
operator +=	fixed.h	/^        inline Fixed28D4& operator+=(const Fixed28D4& other)$/;"	f	class:EGL::Fixed28D4
operator -	fixed.h	/^        inline Fixed operator-(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator -	fixed.h	/^        inline Fixed24D8 operator-(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator -	fixed.h	/^        inline Fixed28D4 operator-(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator -=	fixed.h	/^        inline Fixed& operator-=(const Fixed& other)$/;"	f	class:EGL::Fixed
operator -=	fixed.h	/^        inline Fixed24D8& operator-=(const Fixed24D8& other)$/;"	f	class:EGL::Fixed24D8
operator -=	fixed.h	/^        inline Fixed28D4& operator-=(const Fixed28D4& other)$/;"	f	class:EGL::Fixed28D4
operator /	fixed.h	/^        inline Fixed operator\/(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator /	fixed.h	/^        inline Fixed24D8 operator\/(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator /	fixed.h	/^        inline Fixed28D4 operator\/(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator /=	fixed.h	/^        inline Fixed& operator\/=(const Fixed& other)$/;"	f	class:EGL::Fixed
operator /=	fixed.h	/^        inline Fixed24D8& operator\/=(const Fixed24D8& other)$/;"	f	class:EGL::Fixed24D8
operator /=	fixed.h	/^        inline Fixed28D4& operator\/=(const Fixed28D4& other)$/;"	f	class:EGL::Fixed28D4
operator <	fixed.h	/^        inline bool operator<(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator <	fixed.h	/^        inline bool operator<(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator <	fixed.h	/^        inline bool operator<(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator <	fixed.h	/^        inline bool operator<(const GLfixed& other) const$/;"	f	class:EGL::Fixed
operator <	fixed.h	/^        inline bool operator<(const GLfixed& other) const$/;"	f	class:EGL::Fixed24D8
operator <	fixed.h	/^        inline bool operator<(const GLfixed& other) const$/;"	f	class:EGL::Fixed28D4
operator <<	fixed.h	/^        inline Fixed operator<<(const int other) const$/;"	f	class:EGL::Fixed
operator <<	fixed.h	/^        inline Fixed24D8 operator<<(const int other) const$/;"	f	class:EGL::Fixed24D8
operator <<	fixed.h	/^        inline Fixed28D4 operator<<(const int other) const$/;"	f	class:EGL::Fixed28D4
operator <=	fixed.h	/^        inline bool operator<=(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator <=	fixed.h	/^        inline bool operator<=(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator <=	fixed.h	/^        inline bool operator<=(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator =	fixed.h	/^        inline Fixed& operator=(const Fixed& other)$/;"	f	class:EGL::Fixed
operator =	fixed.h	/^        inline Fixed24D8& operator=(const Fixed24D8& other)$/;"	f	class:EGL::Fixed24D8
operator =	fixed.h	/^        inline Fixed28D4& operator=(const Fixed28D4& other)$/;"	f	class:EGL::Fixed28D4
operator ==	fixed.h	/^        inline bool operator==(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator ==	fixed.h	/^        inline bool operator==(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator ==	fixed.h	/^        inline bool operator==(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator >	fixed.h	/^        inline bool operator>(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator >	fixed.h	/^        inline bool operator>(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator >	fixed.h	/^        inline bool operator>(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator >	fixed.h	/^        inline bool operator>(const GLfixed& other) const$/;"	f	class:EGL::Fixed
operator >	fixed.h	/^        inline bool operator>(const GLfixed& other) const$/;"	f	class:EGL::Fixed24D8
operator >	fixed.h	/^        inline bool operator>(const GLfixed& other) const$/;"	f	class:EGL::Fixed28D4
operator >=	fixed.h	/^        inline bool operator>=(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator >=	fixed.h	/^        inline bool operator>=(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator >=	fixed.h	/^        inline bool operator>=(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator >=	fixed.h	/^        inline bool operator>=(const GLfixed& other) const$/;"	f	class:EGL::Fixed
operator >=	fixed.h	/^        inline bool operator>=(const GLfixed& other) const$/;"	f	class:EGL::Fixed24D8
operator >=	fixed.h	/^        inline bool operator>=(const GLfixed& other) const$/;"	f	class:EGL::Fixed28D4
operator >>	fixed.h	/^        inline Fixed operator>>(const int other) const$/;"	f	class:EGL::Fixed
operator >>	fixed.h	/^        inline Fixed24D8 operator>>(const int other) const$/;"	f	class:EGL::Fixed24D8
operator >>	fixed.h	/^        inline Fixed28D4 operator>>(const int other) const$/;"	f	class:EGL::Fixed28D4
operator GLfixed	fixed.h	/^        operator GLfixed()$/;"	f	class:EGL::Fixed
operator GLfixed	fixed.h	/^        operator GLfixed()$/;"	f	class:EGL::Fixed24D8
operator GLfixed	fixed.h	/^        operator GLfixed()$/;"	f	class:EGL::Fixed28D4
operator float	fixed.h	/^        operator float()$/;"	f	class:EGL::Fixed
operator float	fixed.h	/^        operator float()$/;"	f	class:EGL::Fixed24D8
operator float	fixed.h	/^        operator float()$/;"	f	class:EGL::Fixed28D4
operator |	fixed.h	/^        inline Fixed operator|(const Fixed& other) const$/;"	f	class:EGL::Fixed
operator |	fixed.h	/^        inline Fixed24D8 operator|(const Fixed24D8& other) const$/;"	f	class:EGL::Fixed24D8
operator |	fixed.h	/^        inline Fixed28D4 operator|(const Fixed28D4& other) const$/;"	f	class:EGL::Fixed28D4
operator ~	fixed.h	/^        inline Fixed operator~()$/;"	f	class:EGL::Fixed
operator ~	fixed.h	/^        inline Fixed24D8 operator~()$/;"	f	class:EGL::Fixed24D8
operator ~	fixed.h	/^        inline Fixed28D4 operator~()$/;"	f	class:EGL::Fixed28D4
order	glues/libtess/priorityq-sort.h	/^   PQkey**        order;$/;"	m	struct:PriorityQ
order	glues/libtess/priorityq.h	/^   PQkey**        order;$/;"	m	struct:PriorityQ
orientation	glues/glues_quad.c	/^    GLint       orientation;$/;"	m	struct:GLUquadric	file:
output_list	geometry.h	/^		float           output_list[6][16];$/;"	m	struct:Geometry
pack_alignment	glues/glues_mipmap.c	/^   GLint pack_alignment;$/;"	m	struct:__anon15	file:
pack_image_height	glues/glues_mipmap.c	/^   GLint pack_image_height;$/;"	m	struct:__anon15	file:
pack_row_length	glues/glues_mipmap.c	/^   GLint pack_row_length;$/;"	m	struct:__anon15	file:
pack_skip_pixels	glues/glues_mipmap.c	/^   GLint pack_skip_pixels;$/;"	m	struct:__anon15	file:
pack_skip_rows	glues/glues_mipmap.c	/^   GLint pack_skip_rows;$/;"	m	struct:__anon15	file:
pack_swap_bytes	glues/glues_mipmap.c	/^   GLint pack_swap_bytes;$/;"	m	struct:__anon15	file:
pathname	glm.h	/^  char*    pathname;            \/* path to this model *\/$/;"	m	struct:_GLMmodel
pattern	rasterizer.h	/^    U8      pattern;        \/\/0:diagonal    1:OGSS  2:RGSS$/;"	m	class:Rasterizer
perspectiveA_w	geometry.h	/^		float 	 		perspectiveA_w;$/;"	m	struct:Geometry
perspectiveB_w	geometry.h	/^		float 	 		perspectiveB_w;$/;"	m	struct:Geometry
perspectiveC_w	geometry.h	/^		float 	 		perspectiveC_w;$/;"	m	struct:Geometry
perspective_division	geometry.cpp	/^void Geometry::perspective_division(void)$/;"	f	class:Geometry
perspective_w	geometry.h	/^		float 	 		perspective_w;$/;"	m	struct:Geometry
plane	rasterizer.h	/^    float   plane[11][3];$/;"	m	class:Rasterizer
pmodel	main.cpp	/^GLMmodel *pmodel = NULL;$/;"	v
polygonData	glues/libtess/tess.h	/^  void* polygonData;    \/* client data for current polygon *\/$/;"	m	struct:GLUtesselator
pos	rasterizer.h	/^        int pos[TEX_CACHE_ENTRY_X*TEX_CACHE_ENTRY_Y];$/;"	m	struct:Rasterizer::__anon12
position	glm.h	/^  GLfloat position[3];          \/* position of the model *\/$/;"	m	struct:_GLMmodel
pq	glues/libtess/tess.h	/^   PriorityQ* pq;               \/* priority queue of vertex events *\/$/;"	m	struct:GLUtesselator
pqDelete	glues/libtess/priorityq-heap.h	64;"	d
pqDelete	glues/libtess/priorityq-sort.h	49;"	d
pqDelete	glues/libtess/priorityq-sort.h	78;"	d
pqDelete	glues/libtess/priorityq.c	/^void pqDelete(PriorityQ* pq, PQhandle curr)$/;"	f
pqDelete	glues/libtess/priorityq.h	49;"	d
pqDelete	glues/libtess/priorityq.h	78;"	d
pqDeletePriorityQ	glues/libtess/priorityq-heap.h	45;"	d
pqDeletePriorityQ	glues/libtess/priorityq-sort.h	44;"	d
pqDeletePriorityQ	glues/libtess/priorityq-sort.h	59;"	d
pqDeletePriorityQ	glues/libtess/priorityq.c	/^void pqDeletePriorityQ(PriorityQ* pq)$/;"	f
pqDeletePriorityQ	glues/libtess/priorityq.h	44;"	d
pqDeletePriorityQ	glues/libtess/priorityq.h	59;"	d
pqExtractMin	glues/libtess/priorityq-heap.h	63;"	d
pqExtractMin	glues/libtess/priorityq-sort.h	48;"	d
pqExtractMin	glues/libtess/priorityq-sort.h	77;"	d
pqExtractMin	glues/libtess/priorityq.c	/^PQkey pqExtractMin(PriorityQ* pq)$/;"	f
pqExtractMin	glues/libtess/priorityq.h	48;"	d
pqExtractMin	glues/libtess/priorityq.h	77;"	d
pqHandle	glues/libtess/mesh.h	/^   long    pqHandle;            \/* to allow deletion from priority queue *\/$/;"	m	struct:GLUvertex
pqInit	glues/libtess/priorityq-heap.h	60;"	d
pqInit	glues/libtess/priorityq-sort.h	45;"	d
pqInit	glues/libtess/priorityq-sort.h	74;"	d
pqInit	glues/libtess/priorityq.c	/^int pqInit(PriorityQ* pq)$/;"	f
pqInit	glues/libtess/priorityq.h	45;"	d
pqInit	glues/libtess/priorityq.h	74;"	d
pqInsert	glues/libtess/priorityq-heap.h	61;"	d
pqInsert	glues/libtess/priorityq-sort.h	46;"	d
pqInsert	glues/libtess/priorityq-sort.h	75;"	d
pqInsert	glues/libtess/priorityq.c	/^PQhandle pqInsert(PriorityQ* pq, PQkey keyNew)$/;"	f
pqInsert	glues/libtess/priorityq.h	46;"	d
pqInsert	glues/libtess/priorityq.h	75;"	d
pqIsEmpty	glues/libtess/priorityq-heap.h	65;"	d
pqIsEmpty	glues/libtess/priorityq-sort.h	50;"	d
pqIsEmpty	glues/libtess/priorityq-sort.h	79;"	d
pqIsEmpty	glues/libtess/priorityq.c	/^int pqIsEmpty(PriorityQ* pq)$/;"	f
pqIsEmpty	glues/libtess/priorityq.h	50;"	d
pqIsEmpty	glues/libtess/priorityq.h	79;"	d
pqMinimum	glues/libtess/priorityq-heap.h	62;"	d
pqMinimum	glues/libtess/priorityq-sort.h	47;"	d
pqMinimum	glues/libtess/priorityq-sort.h	76;"	d
pqMinimum	glues/libtess/priorityq.c	/^PQkey pqMinimum(PriorityQ* pq)$/;"	f
pqMinimum	glues/libtess/priorityq.h	47;"	d
pqMinimum	glues/libtess/priorityq.h	76;"	d
pqNewPriorityQ	glues/libtess/priorityq-heap.h	44;"	d
pqNewPriorityQ	glues/libtess/priorityq-sort.h	43;"	d
pqNewPriorityQ	glues/libtess/priorityq-sort.h	58;"	d
pqNewPriorityQ	glues/libtess/priorityq.c	/^PriorityQ* pqNewPriorityQ(int (*leq)(PQkey key1, PQkey key2))$/;"	f
pqNewPriorityQ	glues/libtess/priorityq.h	43;"	d
pqNewPriorityQ	glues/libtess/priorityq.h	58;"	d
pre_clipping	geometry.cpp	/^void Geometry::pre_clipping(void)$/;"	f	class:Geometry
pre_clipping_count	geometry.h	/^		int      		pre_clipping_count;$/;"	m	struct:Geometry
pre_state_counter	context.h	/^        size_t  pre_state_counter;$/;"	m	class:EGL::Context
prepareFrame	demo.cpp	/^static void prepareFrame(int width, int height)$/;"	f	file:
prev	glues/libtess/dict-list.h	/^   DictNode* prev;$/;"	m	struct:DictNode
prev	glues/libtess/dict.h	/^   DictNode* prev;$/;"	m	struct:DictNode
prev	glues/libtess/mesh.h	/^   GLUface*     prev;           \/* previous face (never NULL) *\/$/;"	m	struct:GLUface
prev	glues/libtess/mesh.h	/^   GLUvertex*    prev;          \/* previous vertex (never NULL) *\/$/;"	m	struct:GLUvertex
primitive_assembly	geometry.cpp	/^void Geometry::primitive_assembly(void)$/;"	f	class:Geometry
procVtxA	geometry.h	/^		float 	 		procVtxA[12], procVtxB[12], procVtxC[12];$/;"	m	struct:Geometry
procVtxB	geometry.h	/^		float 	 		procVtxA[12], procVtxB[12], procVtxC[12];$/;"	m	struct:Geometry
procVtxC	geometry.h	/^		float 	 		procVtxA[12], procVtxB[12], procVtxC[12];$/;"	m	struct:Geometry
processed_pixels	ogles.h	/^    int         processed_pixels;$/;"	m	struct:Statistics
ptr	ogles.h	/^    const void  * ptr;$/;"	m	struct:ArrayPointer
randomUInt	demo.cpp	/^static unsigned long randomUInt()$/;"	f	file:
read_dword	bitmap.cpp	/^read_dword(FILE *fp)              \/* I - File to read from *\/$/;"	f	file:
read_long	bitmap.cpp	/^read_long(FILE *fp)               \/* I - File to read from *\/$/;"	f	file:
read_word	bitmap.cpp	/^read_word(FILE *fp)       \/* I - File to read from *\/$/;"	f	file:
red	ogles.h	/^    GLfloat     red;$/;"	m	struct:Color
red_size	ogles.h	/^    GLuint      red_size;$/;"	m	struct:MipmapArray
ref_val	ogles.h	/^    GLclampf    ref_val;$/;"	m	struct:AlphaTest
ref_val	ogles.h	/^    GLclampx    ref_val;$/;"	m	struct:AlphaTest
ref_val	ogles.h	/^    GLint       ref_val;$/;"	m	struct:StencilTest
referenced_mat	glm.h	/^  GLuint  referenced_mat;$/;"	m	struct:_GLMmaterial
refresh_display_list	drv_impl.cpp	/^void refresh_display_list(bool lastdraw)$/;"	f
relTolerance	glues/libtess/tess.h	/^   GLfloat   relTolerance;      \/* tolerance for merging features *\/$/;"	m	struct:GLUtesselator
release_display_list	drv_impl.cpp	/^void release_display_list(void)$/;"	f
release_state_list	drv_impl.cpp	/^void release_state_list(void)$/;"	f
release_triangle_list	geometry.cpp	/^void Geometry::release_triangle_list()$/;"	f	class:Geometry
removed_kick_triangles	ogles.h	/^    int         removed_kick_triangles;$/;"	m	struct:Statistics
render	glues/libtess/render.c	/^   void         (*render)(GLUtesselator*, GLUhalfEdge*, long);$/;"	m	struct:FaceCount	file:
render_scene	sdl_cylinder.cpp	/^void render_scene()$/;"	f
render_scene	sdl_disk.c	/^void render_scene()$/;"	f
render_scene	sdl_mipmap.c	/^void render_scene()$/;"	f
render_scene	sdl_sphere.c	/^void render_scene()$/;"	f
rescale_normal_enable	context.h	/^        GLboolean       rescale_normal_enable;$/;"	m	class:EGL::Context
retrieveStoreModes	glues/glues_mipmap.c	/^static void retrieveStoreModes(PixelStorageModes* psm)$/;"	f	file:
rgbBlue	bitmap.h	/^    unsigned char  rgbBlue;          \/* Blue value *\/$/;"	m	struct:__anon9
rgbGreen	bitmap.h	/^    unsigned char  rgbGreen;         \/* Green value *\/$/;"	m	struct:__anon9
rgbRed	bitmap.h	/^    unsigned char  rgbRed;           \/* Red value *\/$/;"	m	struct:__anon9
rgbReserved	bitmap.h	/^    unsigned char  rgbReserved;      \/* Reserved *\/$/;"	m	struct:__anon9
rgb_scale	ogles.h	/^    GLfixed     rgb_scale;$/;"	m	struct:TextureState
rgb_scale	ogles.h	/^    GLfloat     rgb_scale;$/;"	m	struct:TextureState
rm	rasterizer.cpp	/^Rasterizer rm;$/;"	v
rotate	sdl_cylinder.cpp	/^GLfloat rotate=0;$/;"	v
rotate	sdl_disk.c	/^GLfloat rotate=0;$/;"	v
rotate	sdl_mipmap.c	/^GLint rotate=0;$/;"	v
rotate	sdl_sphere.c	/^GLfloat rotate=0;$/;"	v
rotating	offviewer.h	/^static int rotating = 0;$/;"	v
rotation	offviewer.h	/^static float rotation[3] = { 0.0, 0.0, 0.0 };$/;"	v
s	glues/glues_mipmap.c	/^   short s[2];$/;"	m	union:__anon14	file:
s	glues/libtess/mesh.h	/^   GLfloat s, t;                \/* projection onto the sweep plane *\/$/;"	m	struct:GLUvertex
sCamTracks	cams.h	/^static CAMTRACK sCamTracks[] =$/;"	v
sCurrentCamTrack	demo.cpp	/^static int sCurrentCamTrack = 0;$/;"	v	file:
sCurrentCamTrackStartTick	demo.cpp	/^static long sCurrentCamTrackStartTick = 0;$/;"	v	file:
sGroundPlane	demo.cpp	/^static GLOBJECT *sGroundPlane = NULL;$/;"	v	file:
sNextCamTrackStartTick	demo.cpp	/^static long sNextCamTrackStartTick = 0x7fffffff;$/;"	v	file:
sRandomSeed	demo.cpp	/^static unsigned long sRandomSeed = 0;$/;"	v	file:
sStartTick	demo.cpp	/^static long sStartTick = 0;$/;"	v	file:
sSuperShapeObjects	demo.cpp	/^static GLOBJECT *sSuperShapeObjects[SUPERSHAPE_COUNT] = { NULL };$/;"	v	file:
sSuperShapeParams	shapes.h	/^static const float sSuperShapeParams[][SUPERSHAPE_PARAMS] =$/;"	v
sTick	demo.cpp	/^static long sTick = 0;$/;"	v	file:
sUnit	glues/libtess/tess.h	/^   GLfloat sUnit[3];  \/* unit vector in s-direction (debugging) *\/$/;"	m	struct:GLUtesselator
s_light	context.h	/^        Source          s_light[EGL_NUM_LIGHTING];$/;"	m	class:EGL::Context
scale	offviewer.h	/^static float scale = 0.0;$/;"	v
scaleInternalPackedPixel	glues/glues_mipmap.c	/^static void scaleInternalPackedPixel(int components,$/;"	f	file:
scale_internal	glues/glues_mipmap.c	/^static void scale_internal(GLint components, GLint widthin, GLint heightin,$/;"	f	file:
scale_internal_ubyte	glues/glues_mipmap.c	/^static void scale_internal_ubyte(GLint components, GLint widthin,$/;"	f	file:
scaling	offviewer.h	/^static int scaling = 0;$/;"	v
scanpixel	rasterizer.h	/^    int     validpixel, scanpixel, shadedpixel;$/;"	m	class:Rasterizer
scanstamp	rasterizer.h	/^    int     validstamp, scanstamp, coldscan, invalidstamp;$/;"	m	class:Rasterizer
scissor_test	context.h	/^        ScissorTest     scissor_test;$/;"	m	class:EGL::Context
search_count	geometry.h	/^		int   	 		search_count;$/;"	m	struct:Geometry
seedRandom	demo.cpp	/^static void seedRandom(unsigned long seed)$/;"	f	file:
send_vertex	geometry.h	/^		int				send_vertex;$/;"	m	struct:Geometry
sentinel	glues/libtess/sweep.h	/^   GLboolean     sentinel;      \/* marks fake edges at t = +\/-infinity     *\/$/;"	m	struct:ActiveRegion
sfail	ogles.h	/^    GLenum      sfail;$/;"	m	struct:StencilTest
shade_model	context.h	/^        GLenum          shade_model;$/;"	m	class:EGL::Context
shaded_pixels	ogles.h	/^    int         shaded_pixels;$/;"	m	struct:Statistics
shadedpixel	rasterizer.h	/^    int     validpixel, scanpixel, shadedpixel;$/;"	m	class:Rasterizer
shininess	glm.h	/^  GLfloat shininess;            \/* specular exponent *\/$/;"	m	struct:_GLMmaterial
shove4444	glues/glues_mipmap.c	/^static void shove4444(const GLfloat shoveComponents[], int index,void* packedPixel)$/;"	f	file:
shove5551	glues/glues_mipmap.c	/^static void shove5551(const GLfloat shoveComponents[], int index,void* packedPixel)$/;"	f	file:
shove565	glues/glues_mipmap.c	/^static void shove565(const GLfloat shoveComponents[], int index, void* packedPixel)$/;"	f	file:
size	glues/libtess/priorityq-heap.h	/^   long          size;$/;"	m	struct:PriorityQ
size	glues/libtess/priorityq-sort.h	/^   PQhandle       size;$/;"	m	struct:PriorityQ
size	glues/libtess/priorityq.h	/^   PQhandle       size;$/;"	m	struct:PriorityQ
size	glues/libtess/render.c	/^   long         size;   \/* number of triangles used *\/$/;"	m	struct:FaceCount	file:
size	ogles.h	/^    GLint       size;$/;"	m	struct:ArrayPointer
source_ambient	ogles.h	/^    Color       source_ambient;$/;"	m	struct:Source
source_constant_attenuation	ogles.h	/^    GLfixed     source_constant_attenuation;$/;"	m	struct:Source
source_constant_attenuation	ogles.h	/^    GLfloat     source_constant_attenuation;$/;"	m	struct:Source
source_diffuse	ogles.h	/^    Color       source_diffuse;$/;"	m	struct:Source
source_linear_attenuation	ogles.h	/^    GLfixed     source_linear_attenuation;$/;"	m	struct:Source
source_linear_attenuation	ogles.h	/^    GLfloat     source_linear_attenuation;$/;"	m	struct:Source
source_position	ogles.h	/^    Vertex4     source_position;$/;"	m	struct:Source
source_quadratic_attenuation	ogles.h	/^    GLfixed     source_quadratic_attenuation;$/;"	m	struct:Source
source_quadratic_attenuation	ogles.h	/^    GLfloat     source_quadratic_attenuation;$/;"	m	struct:Source
source_specular	ogles.h	/^    Color       source_specular;$/;"	m	struct:Source
source_spot_curoff	ogles.h	/^    GLfixed     source_spot_curoff;$/;"	m	struct:Source
source_spot_curoff	ogles.h	/^    GLfloat     source_spot_curoff;$/;"	m	struct:Source
source_spot_direction	ogles.h	/^    Vector3     source_spot_direction;$/;"	m	struct:Source
source_spot_exponent	ogles.h	/^    GLfixed     source_spot_exponent;$/;"	m	struct:Source
source_spot_exponent	ogles.h	/^    GLfloat     source_spot_exponent;$/;"	m	struct:Source
specular	glm.h	/^  GLfloat specular[4];          \/* specular component *\/$/;"	m	struct:_GLMmaterial
sphere	sdl_mipmap.c	/^GLUquadricObj* sphere;$/;"	v
sphere_fill_flat	sdl_sphere.c	/^GLUquadricObj* sphere_fill_flat;$/;"	v
sphere_fill_smooth	sdl_sphere.c	/^GLUquadricObj* sphere_fill_smooth;$/;"	v
sphere_fill_texture	sdl_sphere.c	/^GLUquadricObj* sphere_fill_texture;$/;"	v
sphere_line_flat	sdl_sphere.c	/^GLUquadricObj* sphere_line_flat;$/;"	v
sphere_line_smooth	sdl_sphere.c	/^GLUquadricObj* sphere_line_smooth;$/;"	v
sphere_line_texture	sdl_sphere.c	/^GLUquadricObj* sphere_line_texture;$/;"	v
sphere_point_flat	sdl_sphere.c	/^GLUquadricObj* sphere_point_flat;$/;"	v
sphere_point_smooth	sdl_sphere.c	/^GLUquadricObj* sphere_point_smooth;$/;"	v
sphere_point_texture	sdl_sphere.c	/^GLUquadricObj* sphere_point_texture;$/;"	v
src	cams.h	/^    short src[5], dest[5];$/;"	m	struct:__anon6
src	ogles.h	/^    GLenum      src;$/;"	m	struct:Blending
ssFunc	demo.cpp	/^static float ssFunc(const float t, const float *p)$/;"	f	file:
start	ogles.h	/^    GLfixed     start;$/;"	m	struct:Fog
start	ogles.h	/^    GLfloat     start;$/;"	m	struct:Fog
state	glues/libtess/tess.h	/^   enum TessState state;        \/* what begin\/end calls have we seen? *\/$/;"	m	struct:GLUtesselator	typeref:enum:GLUtesselator::TessState
stateIter	drv_impl.cpp	/^RenderState * stateIter = stateLinkList;$/;"	v
stateLinkList	drv_impl.cpp	/^RenderState * stateLinkList = new RenderState();$/;"	v
state_counter	context.h	/^        size_t  state_counter;$/;"	m	class:EGL::Context
state_list_size	ogles.h	/^    int         state_list_size;$/;"	m	struct:Statistics
state_raster_bw	ogles.h	/^    int         state_raster_bw;$/;"	m	struct:Statistics
stencil_test	context.h	/^        StencilTest     stencil_test;$/;"	m	class:EGL::Context
stride	ogles.h	/^    GLsizei     stride;$/;"	m	struct:ArrayPointer
superShapeMap	demo.cpp	/^static void superShapeMap(VECTOR3 *point, float r1, float r2, float t, float p)$/;"	f	file:
t	glues/libtess/mesh.h	/^   GLfloat s, t;                \/* projection onto the sweep plane *\/$/;"	m	struct:GLUvertex
tUnit	glues/libtess/tess.h	/^   GLfloat tUnit[3];  \/* unit vector in t-direction (debugging) *\/$/;"	m	struct:GLUtesselator
tex_array_num	ogles.h	/^    GLuint      tex_array_num;$/;"	m	struct:TextureState
tex_cache_hit	ogles.h	/^    int         tex_cache_hit;$/;"	m	struct:Statistics
tex_cache_hitrate	ogles.h	/^    float       tex_cache_hitrate;$/;"	m	struct:Statistics
tex_cache_miss	ogles.h	/^    int         tex_cache_miss;$/;"	m	struct:Statistics
texcoords	glm.h	/^  GLfloat* texcoords;           \/* array of texture coordinates *\/$/;"	m	struct:_GLMmodel
teximage	ogles.h	/^    TexImgPtr   teximage;$/;"	m	struct:TextureState
texture	main.cpp	/^GLuint  texture[TEXTURE_NUMBER] = {0};$/;"	v
textureBW	rasterizer.h	/^    int     textureBW;$/;"	m	class:Rasterizer
textureCoords	glues/glues_quad.c	/^    GLboolean   textureCoords;$/;"	m	struct:GLUquadric	file:
texture_bindID	ogles.h	/^    GLuint      texture_bindID;$/;"	m	struct:TextureState
texture_coord_array	context.h	/^        ArrayPointer    texture_coord_array;$/;"	m	class:EGL::Context
texture_created	glm.h	/^  bool    texture_created;$/;"	m	struct:_GLMmaterial
texture_mem_read	ogles.h	/^    int         texture_mem_read;$/;"	m	struct:Statistics
texture_object	sdl_cylinder.cpp	/^GLuint texture_object[3]; \/* Storage for 3 textures *\/$/;"	v
texture_state	context.h	/^        TextureState    texture_state[EGL_NUM_TEXTURE_UNITS];$/;"	m	class:EGL::Context
texture_total_seq	context.h	/^        GLuint          texture_total_seq;$/;"	m	class:EGL::Context
texture_transformation	geometry.cpp	/^void Geometry::texture_transformation(void)  \/\/RETURN BACK  TexCoords$/;"	f	class:Geometry
texvec	context.h	/^        vector<TextureState> texvec;$/;"	m	class:EGL::Context
tileDEG	rasterizer.h	/^    bool    tileDEG;$/;"	m	class:Rasterizer
tileData	geometry.h	/^struct tileData$/;"	s
tile_count_num	geometry.h	/^		int   	 		tile_count_num;$/;"	m	struct:Geometry
tile_counter	geometry.h	/^		int			 	tile_counter;$/;"	m	struct:Geometry
tile_divider	geometry.cpp	/^void Geometry::tile_divider(int *search_count,int *tile_count_num,triangle_node  triangle_list,float *TriVtxA_clipped,float *TriVtxB_clipped,float  *TriVtxC_clipped)$/;"	f	class:Geometry
tile_node	geometry.h	/^typedef struct tileData * tile_node;$/;"	t	typeref:struct:tileData
tile_render	drv_impl.cpp	/^void tile_render()$/;"	f
tiled_list_size	ogles.h	/^    int         tiled_list_size;$/;"	m	struct:Statistics
tiledata_ptr	geometry.h	/^  struct tileData 	  * tiledata_ptr;$/;"	m	struct:triangleData	typeref:struct:triangleData::tileData
tindices	glm.h	/^  GLuint tindices[3];           \/* array of triangle texcoord indices*\/$/;"	m	struct:_GLMtriangle
tmpVtx00	geometry.h	/^		float    		tmpVtx00[16], tmpVtx01[16], tmpVtx02[16], tmpVtx03[16];$/;"	m	struct:Geometry
tmpVtx01	geometry.h	/^		float    		tmpVtx00[16], tmpVtx01[16], tmpVtx02[16], tmpVtx03[16];$/;"	m	struct:Geometry
tmpVtx02	geometry.h	/^		float    		tmpVtx00[16], tmpVtx01[16], tmpVtx02[16], tmpVtx03[16];$/;"	m	struct:Geometry
tmpVtx03	geometry.h	/^		float    		tmpVtx00[16], tmpVtx01[16], tmpVtx02[16], tmpVtx03[16];$/;"	m	struct:Geometry
tmpVtx04	geometry.h	/^		float    		tmpVtx04[16], tmpVtx05[16], tmpVtx06[16], tmpVtx07[16];$/;"	m	struct:Geometry
tmpVtx05	geometry.h	/^		float    		tmpVtx04[16], tmpVtx05[16], tmpVtx06[16], tmpVtx07[16];$/;"	m	struct:Geometry
tmpVtx06	geometry.h	/^		float    		tmpVtx04[16], tmpVtx05[16], tmpVtx06[16], tmpVtx07[16];$/;"	m	struct:Geometry
tmpVtx07	geometry.h	/^		float    		tmpVtx04[16], tmpVtx05[16], tmpVtx06[16], tmpVtx07[16];$/;"	m	struct:Geometry
tmpVtx08	geometry.h	/^		float    		tmpVtx08[16], tmpVtx09[16], tmpVtx10[16], tmpVtx11[16];$/;"	m	struct:Geometry
tmpVtx09	geometry.h	/^		float    		tmpVtx08[16], tmpVtx09[16], tmpVtx10[16], tmpVtx11[16];$/;"	m	struct:Geometry
tmpVtx10	geometry.h	/^		float    		tmpVtx08[16], tmpVtx09[16], tmpVtx10[16], tmpVtx11[16];$/;"	m	struct:Geometry
tmpVtx11	geometry.h	/^		float    		tmpVtx08[16], tmpVtx09[16], tmpVtx10[16], tmpVtx11[16];$/;"	m	struct:Geometry
tmpVtx12	geometry.h	/^		float    		tmpVtx12[16], tmpVtx13[16], tmpVtx14[16], tmpVtx15[16];$/;"	m	struct:Geometry
tmpVtx13	geometry.h	/^		float    		tmpVtx12[16], tmpVtx13[16], tmpVtx14[16], tmpVtx15[16];$/;"	m	struct:Geometry
tmpVtx14	geometry.h	/^		float    		tmpVtx12[16], tmpVtx13[16], tmpVtx14[16], tmpVtx15[16];$/;"	m	struct:Geometry
tmpVtx15	geometry.h	/^		float    		tmpVtx12[16], tmpVtx13[16], tmpVtx14[16], tmpVtx15[16];$/;"	m	struct:Geometry
token_string	glues/glues_error.c	/^struct token_string$/;"	s	file:
total_bandwidth	ogles.h	/^    int         total_bandwidth;$/;"	m	struct:Statistics
total_states	ogles.h	/^    int         total_states;$/;"	m	struct:Statistics
trail	glues/libtess/mesh.h	/^   GLUface*     trail;          \/* "stack" for conversion to strips *\/$/;"	m	struct:GLUface
transformation	geometry.cpp	/^void Geometry::transformation(void)\/\/RETURN BACK  EyeCoords~ClipCoords~EyeNormal$/;"	f	class:Geometry
translating	offviewer.h	/^static int translating = 0;$/;"	v
translation	offviewer.h	/^static float translation[3] = { 0.0, 0.0, -2.0 }; \/\/for view03$/;"	v
triCount	rasterizer.h	/^    int     triCount;$/;"	m	class:Rasterizer
triangleData	geometry.h	/^struct triangleData$/;"	s
triangleListSize	geometry.h	/^        int             triangleListSize;$/;"	m	struct:Geometry
triangleSize	geometry.h	/^        int             triangleSize;$/;"	m	struct:Geometry
triangle_iterator	geometry.h	/^		triangle_node   triangle_iterator;$/;"	m	struct:Geometry
triangle_list	geometry.h	/^		triangle_node   triangle_list;$/;"	m	struct:Geometry
triangle_list_size	ogles.h	/^    int         triangle_list_size;$/;"	m	struct:Statistics
triangle_node	geometry.h	/^typedef struct triangleData * triangle_node;$/;"	t	typeref:struct:triangleData
triangle_raster_bw	ogles.h	/^    int         triangle_raster_bw;$/;"	m	struct:Statistics
triangle_size	ogles.h	/^    int         triangle_size;$/;"	m	struct:Statistics
triangles	glm.h	/^  GLMtriangle* triangles;       \/* array of triangles *\/$/;"	m	struct:_GLMmodel
triangles	glm.h	/^  GLuint*           triangles;      \/* array of triangle indices *\/$/;"	m	struct:_GLMgroup
tu	ogles.h	/^    GLfloat     tu;$/;"	m	struct:TextureCoord
tv	ogles.h	/^    GLfloat     tv;$/;"	m	struct:TextureCoord
type	ogles.h	/^    GLenum      type;$/;"	m	struct:ArrayPointer
type	ogles.h	/^    GLenum      type;$/;"	m	struct:DrawElemCmd
type	ogles.h	/^    GLenum      type;$/;"	m	struct:TextureImage
ub	glues/glues_mipmap.c	/^   unsigned char ub[4];$/;"	m	union:__anon14	file:
ugSolidBox	uglu.h	/^void ugSolidBox(GLfloat Width, GLfloat Depth, GLfloat Height)$/;"	f
ugSolidConef	uglu.h	/^void ugSolidConef(GLfloat base, GLfloat height, GLint slices, GLint stacks)$/;"	f
ugSolidCubef	uglu.h	/^void ugSolidCubef(GLfloat size)$/;"	f
ugSolidDisk	uglu.h	/^void ugSolidDisk(GLfloat inner_radius, GLfloat outer_radius, GLshort rings, GLshort slices)$/;"	f
ugSolidSpheref	uglu.h	/^void ugSolidSpheref(GLfloat radius, GLint slices, GLint stacks)$/;"	f
ugSolidTorusf	uglu.h	/^void ugSolidTorusf(GLfloat irr, GLfloat orr, GLint sides, GLint rings)$/;"	f
ugSolidTube	uglu.h	/^void ugSolidTube(GLfloat radius, GLfloat height, GLshort stacks, GLshort slices)$/;"	f
ugluLookAtf	uglu.h	/^void ugluLookAtf(GLfloat eyex, GLfloat eyey, GLfloat eyez, GLfloat centerx,$/;"	f
ugluLookAtx	uglu.h	/^void ugluLookAtx(GLfixed eyex, GLfixed eyey, GLfixed eyez, GLfixed centerx,$/;"	f
ugluPerspectivef	uglu.h	/^void ugluPerspectivef(GLfloat fovy, GLfloat aspect, GLfloat n, GLfloat f)$/;"	f
ugluPerspectivex	uglu.h	/^void ugluPerspectivex(GLfixed fovy, GLfixed aspect, GLfixed n, GLfixed f)$/;"	f
ui	glues/glues_mipmap.c	/^   unsigned int ui;$/;"	m	union:__anon14	file:
units	ogles.h	/^    GLfixed     units;$/;"	m	struct:DepthOffSet
units	ogles.h	/^    GLfloat     units;$/;"	m	struct:DepthOffSet
unpack_alignment	glues/glues_mipmap.c	/^   GLint unpack_alignment;$/;"	m	struct:__anon15	file:
unpack_image_height	glues/glues_mipmap.c	/^   GLint unpack_image_height;$/;"	m	struct:__anon15	file:
unpack_row_length	glues/glues_mipmap.c	/^   GLint unpack_row_length;$/;"	m	struct:__anon15	file:
unpack_skip_pixels	glues/glues_mipmap.c	/^   GLint unpack_skip_pixels;$/;"	m	struct:__anon15	file:
unpack_skip_rows	glues/glues_mipmap.c	/^   GLint unpack_skip_rows;$/;"	m	struct:__anon15	file:
unpack_swap_bytes	glues/glues_mipmap.c	/^   GLint unpack_swap_bytes;$/;"	m	struct:__anon15	file:
updateFrameBuffer	surface.cpp	/^void Surface::updateFrameBuffer()$/;"	f	class:Surface
updateTime	main.cpp	/^const static int updateTime = 1000;$/;"	v	file:
updateTime	main.cpp	/^time_t lastTime = time(0), updateTime = time(0);$/;"	v
us	glues/glues_mipmap.c	/^   unsigned short us[2];$/;"	m	union:__anon14	file:
vHead	glues/libtess/mesh.h	/^   GLUvertex   vHead;           \/* dummy header for vertex list *\/$/;"	m	struct:GLUmesh
v_x	ogles.h	/^    GLfloat     v_x;$/;"	m	struct:Vector3
v_y	ogles.h	/^    GLfloat     v_y;$/;"	m	struct:Vector3
v_z	ogles.h	/^    GLfloat     v_z;$/;"	m	struct:Vector3
valid	rasterizer.h	/^        bool valid[TEX_CACHE_ENTRY_X*TEX_CACHE_ENTRY_Y];$/;"	m	struct:Rasterizer::__anon12
validpixel	rasterizer.h	/^    int     validpixel, scanpixel, shadedpixel;$/;"	m	class:Rasterizer
validstamp	rasterizer.h	/^    int     validstamp, scanstamp, coldscan, invalidstamp;$/;"	m	class:Rasterizer
vector3Sub	demo.cpp	/^static void vector3Sub(VECTOR3 *dest, VECTOR3 *v1, VECTOR3 *v2)$/;"	f	file:
versionString	glues/glues_registry.c	/^static const GLubyte versionString[]="1.3";$/;"	v	file:
vertexArray	demo.cpp	/^    GLfixed *vertexArray;$/;"	m	struct:__anon3	file:
vertexComponents	demo.cpp	/^    GLint vertexComponents;$/;"	m	struct:__anon3	file:
vertex_array	context.h	/^        ArrayPointer    vertex_array;$/;"	m	class:EGL::Context
vertices	glm.h	/^  GLfloat* vertices;            \/* array of vertices  *\/$/;"	m	struct:_GLMmodel
verts	offviewer.h	/^    Vertex **verts;$/;"	m	struct:Face
verts	offviewer.h	/^    Vertex *verts;$/;"	m	struct:Mesh
vindices	glm.h	/^  GLuint vindices[3];           \/* array of triangle vertex indices *\/$/;"	m	struct:_GLMtriangle
visited_pixels	ogles.h	/^    int         visited_pixels;$/;"	m	struct:Statistics
vp	context.h	/^        ViewPort        vp;$/;"	m	class:EGL::Context
vtxIndex	geometry.h	/^		int 		 	vtxIndex;$/;"	m	struct:Geometry
w	ogles.h	/^    GLfloat     w;$/;"	m	struct:Vertex4
width	glm.h	/^    GLint   width;                \/* width of texture *\/$/;"	m	struct:_GLMtextures
width	glm.h	/^  GLint   width;                \/* width of texture *\/$/;"	m	struct:_GLMmaterial
width	gltools_TGA_rev.cpp	/^    unsigned short	width;                  \/\/ width in pixels$/;"	m	struct:__anon11	file:
width	ogles.h	/^    GLint       width,height;$/;"	m	struct:ViewPort
width	ogles.h	/^    GLsizei     width;$/;"	m	struct:ScissorTest
width	ogles.h	/^    GLuint      width;$/;"	m	struct:MipmapArray
width	ogles.h	/^    GLuint      width;$/;"	m	struct:TextureImage
width	surface.h	/^        GLsizei width;$/;"	m	struct:EGL::Rect
winding	glues/libtess/mesh.h	/^   int           winding;       \/* change in winding number when crossing$/;"	m	struct:GLUhalfEdge
windingNumber	glues/libtess/sweep.h	/^   int           windingNumber; \/* used to determine which regions are$/;"	m	struct:ActiveRegion
windingRule	glues/libtess/tess.h	/^   GLenum    windingRule;       \/* rule for determining polygon interior *\/$/;"	m	struct:GLUtesselator
wireboxndex	uglu.h	/^static GLushort wireboxndex[6][4] =$/;"	v
wrap_s	ogles.h	/^    GLenum      wrap_s;$/;"	m	struct:TextureState
wrap_t	ogles.h	/^    GLenum      wrap_t;$/;"	m	struct:TextureState
write_dword	bitmap.cpp	/^write_dword(FILE         *fp, \/* I - File to write to *\/$/;"	f	file:
write_long	bitmap.cpp	/^write_long(FILE *fp, \/* I - File to write to *\/$/;"	f	file:
write_word	bitmap.cpp	/^write_word(FILE           *fp, \/* I - File to write to *\/$/;"	f	file:
x	demo.cpp	/^    float x, y, z;$/;"	m	struct:__anon4	file:
x	offviewer.h	/^    float x, y, z;$/;"	m	struct:Vertex
x	ogles.h	/^    GLfloat     x;$/;"	m	struct:Vertex3
x	ogles.h	/^    GLfloat     x;$/;"	m	struct:Vertex4
x	surface.h	/^        GLint x;$/;"	m	struct:EGL::Rect
xstart	gltools_TGA_rev.cpp	/^    unsigned short	xstart;                 \/\/ image x origin$/;"	m	struct:__anon11	file:
y	demo.cpp	/^    float x, y, z;$/;"	m	struct:__anon4	file:
y	offviewer.h	/^    float x, y, z;$/;"	m	struct:Vertex
y	ogles.h	/^    GLfloat     y;$/;"	m	struct:Vertex3
y	ogles.h	/^    GLfloat     y;$/;"	m	struct:Vertex4
y	surface.h	/^        GLint y;$/;"	m	struct:EGL::Rect
ystart	gltools_TGA_rev.cpp	/^    unsigned short	ystart;                 \/\/ image y origin$/;"	m	struct:__anon11	file:
z	demo.cpp	/^    float x, y, z;$/;"	m	struct:__anon4	file:
z	offviewer.h	/^    float x, y, z;$/;"	m	struct:Vertex
z	ogles.h	/^    GLfloat     z;$/;"	m	struct:Vertex3
z	ogles.h	/^    GLfloat     z;$/;"	m	struct:Vertex4
~Context	context.cpp	/^Context::~Context()$/;"	f	class:Context
~MatrixStack	matrix_stack.cpp	/^MatrixStack :: ~MatrixStack()$/;"	f	class:MatrixStack
~Surface	surface.cpp	/^Surface::~Surface()$/;"	f	class:Surface
~TextureState	ogles.h	/^    ~TextureState()$/;"	f	struct:TextureState
